<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hill&#39;s Notes</title>
  <subtitle>notes and blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-17T15:51:38.468Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hill</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈Java垃圾回收与JVM</title>
    <link href="http://yoursite.com/2018/06/20/%E6%B5%85%E8%B0%88Java%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E4%B8%8EJVM/"/>
    <id>http://yoursite.com/2018/06/20/浅谈Java垃圾回收与JVM/</id>
    <published>2018-06-20T13:31:31.000Z</published>
    <updated>2018-07-17T15:51:38.468Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介Java与JVM"><a href="#简介Java与JVM" class="headerlink" title="简介Java与JVM"></a>简介Java与JVM</h4><ul>
<li>为什么要有JVM。在程序里，没有一件事情是抽象出来一层解决不了的，如果有那就抽象出两层。</li>
</ul>
<ul>
<li><p>大家都知道，Java是一门跨平台的语言，有那么一个非常经典梗—一次编写，处处异常(一次编写，处处运行)。java是通过JVM实现在不同平台上运行的，无论你是Windows，Linux还是其他什么系统，只要你能装上对应的支持JVM，就可以把代码拿过来直接使用。不需要做任何修改（当你没有自定义或者调用一些特有的Native方法就可以）就可以直接运行。这就归功于JVM的设计，也就是Machine和Code之间抽象Virtual Machine（有所问题都可以通过抽象一个层次来解决）；java不用与系统底层直接打交道，而是通过JVM进行内存的分配与回收，多线程的处理等等。</p>
</li>
<li><p>我们都知道高级语言一般分两种，一种是编译型语言，一种是解释型语言。编译型语言就是常用的C、C++，Basic等他们都是编译语言，使用的时候都是先编译成目标文件（也就是.o和.obj文件），然后再去链接相应的类库，的工具库，然后才能运行，（做了一大桌子菜，都做好了，才能开始吃饭；菜就是代码，人就是CPU；<strong>也就是代码在运行之前就已经确定了，不能在改变</strong>）。他们编译之后都变成了机器码，不同的机器上对机器码（就是CPU执行的指令，就是一大堆0和1）的要求可能也不同，比如32位机和64位机，windows系统和linux系统，所以可能在别的机器上完美运行的代码在其他机器上就会有问题。所以编译型语言在不同的平台上使用不同的编译器重新编译一遍才能运行而解释型语言就不一样，他是通过解释器，解释给系统底层，一般没有编译的过程，在运行时候解释给操作系统（这个过程就像吃火锅，你需要什么就在里面加什么根据自己的喜好，而且还可以在这个过程中在进行二次处理，比如说反射的一些应用。也就是程序会在运行时被解释。我们可以在解释之前做一些操作）；这类语言有PHP，JavaScript，Ruby等等一般他们都是不需要编译。而java是介于这两者之间的一种语言。属于混合型。因为java有编译的过程（前期编译，后期编译），大多数时候java是被编译成字节码文件也就是.class文件。但是有一些常用或者热点代码也会直接编译成本地代码（机器码）直接被使用（详情可以看看JIT）。所以java属于混合型，这类型的语言还有C#。他们不是直接把代码交给解释器直接去执行，而是先编译成一个中间文件，然后再把中间文件交给解释器去处理。</p>
</li>
<li><p>Java与C++之间有一堵内存动态分配和垃圾回收的技术所围城的“高墙”，墙外的人想进去，墙里的人却想出来。对与C和C++的程序员他们都是自己去管理内存（malloc和free）否则就会产生内存泄漏和溢出的问题。<strong>内存泄漏指的是本应该回收（不再使用）的内存对象无法被系统回收的现象；</strong>在C++和C中都是程序猿手动申请和释放，而java是通过JVM实现内存的分配和回收，可以减少内存的泄漏，但是也不能完全避免。java使用的是可达性算法，来回收那些没有使用的也就是不可达的对象。但是<strong>被使用对象引用的无用对象却不能被回收；</strong>内存泄漏一般都是情况有，单例模式的使用，类里面的静态变量，Threadlocal弱引用key问题等等；<strong>内存溢出是指当对象分配内存时，可用内存小于对象的内存，也就是内存不足现象</strong>。两者也是有一定关联也就是如果内存经常泄漏导致可用内存越来越少，最后会导致内存溢出。 同样内存溢出也可能会导致安全问题，一般是缓冲区和栈内存，因为他们都是连续的内存，所以黑客可以通过你内存的溢出的位置去查找你栈中和缓存区的数据，然后修改数据。不过程序猿把控制权交给了JVM，一旦出现内存泄漏和内存溢出问题就会很难排查。我之前有一篇文章写java内存模型的，可以先了解一下JVM内存。</p>
<p><img src="/img/jvm/jvm-01.png" alt=""></p>
</li>
</ul>
<h4 id="JVM内存分配策略"><a href="#JVM内存分配策略" class="headerlink" title="JVM内存分配策略"></a>JVM内存分配策略</h4><ul>
<li>JAVA虚拟机里面各个区域都装的什么，难道是shit吗？</li>
</ul>
<ul>
<li><h5 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h5><p>java运行时内存是由，java堆，虚拟机栈，程序计数器，方法区（现在是metadata），本地方法栈和运行常量池组成。还有一部分是直接内存，直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域，就是JVM以外的机器内存，比如，你有4G的内存，JVM占用了1G，则其余的3G就是直接内存。这部分被频繁的使用，所以也会出现OutOfMemory异常。在Java NIO中引入基于通道和缓冲区（Buffer）的I/O方式，它可以使用Native函数直接分配堆外内存也就是直接内存，（也就是JVM调用系统方法，把数据读取到内存中，而这一块内存不在JVM的堆内存中heap Memory。JVM在操作系统里其实就是一个进程）然后通过一个存储在java堆中的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些情况下显著提高性能，因为避免了在java堆和Native堆中来回的复制。</p>
<h5 id="对象与引用"><a href="#对象与引用" class="headerlink" title="对象与引用"></a>对象与引用</h5><p><strong>什么是对象</strong>（对象是程序运行时的实体；它的状态存储在 fields (也就是变量)行为是通过方法 (method) 实现的；方法上操作对象的内部的状态方法是对象对对象的通信的主要手段）。</p>
<p>肯定有人说对象就是女朋友啊。没错如果你没对象可以尝试new一个出来。放心你在怎么new都不会有对象（女朋友）。开个玩笑，对象就是程序运行时用来存储数据的一个集合体(实体)，他包含你声明类（class）中有的变量（可能这些变量都是空）和一些操作变量的方法，一般java都是通过方法来操作属性，大多树情况下对象存在java堆中（也有可能存在堆上，这个要进行逃逸分析），通过引用去找到这个对象对象是程序运行时的实体。java是一门面向对象语言(Object-oriented programming OOP)。面向对象语言是对以前<strong>C的面向过程</strong>进行封装，过程都是通过函数来实现，也就是一个程序有很多函数。但是对象把函数和变量封装成一个整体，通过操作对象来实现对业务的处理（对数据的加工）或者实现功能，也可以说<strong>对象是对函数和变量的抽象</strong>。增加了代码的可复用性和灵活性，但是也增加了对象之间的关系比如说继承和多态（设计模式，增加代码的的复用性的设计）。其实函数式编程可以更好的减少代码（一个功能，代码写的越多bug越多，维护成本越高，尽量少写bug）。</p>
<p><strong>什么是引用</strong>。（引用是数据存储于内存或存储设备中的地址。因此，引用亦常被称为该数据的指针或地址）</p>
<p>引用类型和其他基本类型差不多，都是存储值，只不过引用存储的是java堆内的地址。如果赋值了就像这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Student s = <span class="keyword">new</span> Student(); <span class="comment">//创建一个新的Student对象</span></div></pre></td></tr></table></figure>
<p>也就是把new 出来的 Student对象在java堆中的地址给s。之后我们操作这个新对象，都通过引用s。因为s就像一把钥匙能打开这个java堆中存储这个对象的大门，它可以操作Student对象的方法和变量，大多数时候我们都是这样操作对象。同样引用和基本类型都在栈上存储。但是String这个类型比较特殊，他的值一般都在堆上存储（直接赋值的String 一般都是存在<strong>字符串常量池（ Strings Pool）</strong>在堆里，这样方便管理字符串内容相同的String对象，他们都指向一个字符串，而不是多个。new出来的String对象除外，不在池子里），这个和引用类型很类似，它也只存一个堆上的地址，所以这些类型在初始化时候为null，而其他类型会报错，同时String可以new出来。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String s=<span class="keyword">null</span>; <span class="comment">//这样不会报错。</span></div><div class="line"><span class="keyword">int</span> i=<span class="keyword">null</span>;  <span class="comment">//这样会报错编译不通过。</span></div><div class="line">String k=<span class="keyword">new</span> String(<span class="string">"this is hill blog"</span>); <span class="comment">//String 是可以new出来的 k指向的值也是存在堆上面的</span></div><div class="line">Integer j=<span class="keyword">new</span> Integer(<span class="number">1</span>); <span class="comment">//int 是不能这样new 的但是int的包装类Integer可以。j指向的对象也是存在堆上面的</span></div><div class="line">String o=<span class="string">"hello hill"</span>; <span class="comment">//这个字符串是存在字符串常量池中的。o指向的值也是存在堆上面的</span></div><div class="line"><span class="keyword">int</span> p=<span class="number">1</span>； <span class="comment">//这个p是存在栈上的，一般情况</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="强引用，软引用，弱引用，虚引用，ReferenceQueue。"><a href="#强引用，软引用，弱引用，虚引用，ReferenceQueue。" class="headerlink" title="强引用，软引用，弱引用，虚引用，ReferenceQueue。"></a>强引用，软引用，弱引用，虚引用，ReferenceQueue。</h5><p>在JDK1.2以后，java对引用的概念进行的扩充，将引用分为强引用(Strong Reference)，软引用(Soft Reference)，弱引用(Weak Reference)，虚引用(Phantom Reference)。这四种，引用强度分别减弱。肯定有人会问搞这么多东西干嘛，一种难道不够用吗。<strong>这些引用为垃圾回收提供了灵活的方式</strong>，我知道JVM垃圾回收不是通过引用技术的方式，而是通过可达性算法来实现，也就是这个对象有没有被引用。就会被定义为垃圾然后把他回收掉，但是有虚引用和弱引用，就可以在回收的时候不用计算一遍，<strong>减少Stop-The-World的时间</strong>，可以直接判断为垃圾或者回收掉。</p>
<p>强引用：强引用就是代码中普遍存在的引用例如<code>Object obj=new Object();</code> 这类的引用。这里的obj是强引用。只要强引用还存在，垃圾回收器就不会回收该对象。当<code>obj=null;</code>的时候强引用的值消失，<strong>也就是该对象不可达。没有任何引用和可以操作该对象，表示该引用可以被回收</strong>。有时候强引用会显得“过强”，比如实现一个图像缓存，缓存中保存了对图像的引用，当图像不再使用时，如果缓存中还保存了对该图像的强引用，图像就不会被垃圾回收，需要手动断开缓存中的引用。</p>
<p>软引用：用来描述一些还有用但是非必需的对象。对于软引用关联着的对象<strong>，只有在内存不足的时候JVM才会回收该对象</strong>。因此，这一点可以很好地用来解决OOM的问题，并且这个<strong>特性很适合用来实现缓存</strong>：比如网页缓存、图片缓存等。</p>
<p>弱引用：弱引用来描述非必需的对象，他的强度比软引用还要低。被弱引用关联的对象会在下一次GC的时候回收掉，无论当前内存是否充足，<strong>他的生命周期就是一个GC周期</strong>。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。弱引用对象的存在不会阻止它所指向的对象变被垃圾回收器回收。<strong>弱引用最常见的用途是实现规范映射</strong>(canonicalizing mappings，比如哈希表（WeakHashMap）。假设垃圾收集器在某个时间点决定一个对象是弱可达的(weakly reachable)（也就是说当前指向它的全都是弱引用），这时垃圾收集器会清除所有指向该对象的弱引用，然后垃圾收集器会把这个弱可达对象标记为可终结(finalizable)的，这样它们随后就会被回收。与此同时或稍后，<strong>垃圾收集器会把那些刚清除的弱引用放入创建弱引用对象时所登记到的引用队列(Reference Queue)中</strong>。</p>
<p>虚引用：又称为幽灵引用或幻影引用，虚引用既不会影响对象的生命周期，也无法通过虚引用来获取对象实例，仅用于在发生GC时接收一个系统通知。无法通过虚引用来获取对象。虚引用只能和ReferenceQueue一起使用。</p>
<p>虚引用：一个对象是都有虚引用的存在都不会对生存时间都构成影响，也无法通过虚引用来获取对一个对象的真实引用。唯一的用处：<strong>能在对象被GC时收到系统通知，</strong>JAVA中用PhantomReference来实现虚引用。PhantomReferenc的<code>get()</code>始终返回<code>null</code>，无法通过虚引用来获取对象。虚引用只能和ReferenceQueue一起使用。</p>
<p>ReferenceQueue：翻译过来就是引用队列。垃圾回收器可以在对象的可及性发生特定的改变时，把对象的引用加入到ReferenceQueue，<strong>可以记录被回收对象的引用</strong>。如果在WeakReference的构造器中指定一个ReferenceQueue，那么当该WeakReference(弱引用也包含软引用)指向的对象变为垃圾时，该对象就会被自动加入到所指定ReferenceQueue中，之后就可以通过这个ReferenceQueue来为死引用（Dead Reference）进行清理工作。</p>
<h5 id="java各个分区内存储的内容"><a href="#java各个分区内存储的内容" class="headerlink" title="java各个分区内存储的内容"></a>java各个分区内存储的内容</h5><p>我之前的博客有写可以去看一下<a href="https://blog.51cloud.win/2017/07/27/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/" target="_blank" rel="external">java运行时内存模型</a>，里面大致的讲了一下上面说的那5个区域都存的什么，不过JDK8版本后，把方法区改成了MetaData区（元数据区）一般MetaData和Native都属于非堆内存。堆内存指的是Survivor0，Survivor1，Eden，Old总和。在一点就是Java中不是所有的对象都会分配在堆上的，也有对象被分配到栈上。</p>
<p><strong>逃逸分析</strong></p>
<p>逃逸分析的基本行为就是分析对象动态作用域：当一个对象在方法中被定义后，它可能<strong>被外部方法所引用</strong>，称为方法逃逸。甚至还有可能被外部线程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。（每一个方法都是一个栈帧，如果对象只在这个栈帧内没有被外部的的方法引用，说明他没有逃逸)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EscapeTest</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object obj;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">globalVariableEscape</span><span class="params">()</span> </span>&#123;  <span class="comment">// 给全局变量赋值，发生逃逸</span></div><div class="line">        obj = <span class="keyword">new</span> Object();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">methodEscape</span><span class="params">()</span> </span>&#123;  <span class="comment">// 方法返回值，发生逃逸</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Object();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">instanceEscape</span><span class="params">()</span> </span>&#123;  <span class="comment">// 实例引用发生逃逸</span></div><div class="line">        test(<span class="keyword">this</span>); </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>栈上分配</strong></p>
<p>我们都知道Java中的对象都是在堆上分配的，而垃圾回收机制会回收堆中不再使用的对象，但是筛选可回收对象，回收对象还有整理内存都需要消耗时间。如果能够通过逃逸分析确定某些对象不会逃出方法之外，那就可以让这个对象在栈上分配内存，这样该对象所占用的内存空间就可以随栈帧出栈而销毁，就减轻了垃圾回收的压力。</p>
<p>在一般应用中，如果不会逃逸的局部对象所占的比例很大，如果能使用栈上分配，那大量的对象就会随着方法的结束而自动销毁了。</p>
<p><strong>同步消除</strong></p>
<p>线程同步本身比较耗，如果确定一个对象不会逃逸出线程，无法被其它线程访问到，那该对象的读写就不会存在竞争，对这个变量的同步措施就可以消除掉。单线程中是没有锁竞争。（锁和锁块内的对象不会逃逸出线程就可以把这个同步块取消）</p>
<p><strong>标量替换</strong><br>Java虚拟机中的原始数据类型（int，long等数值类型以及reference类型等）都不能再进一步分解，它们就可以称为标量。相对的，如果一个数据可以继续分解，那它称为聚合量，Java中最典型的聚合量是对象。如果逃逸分析证明一个对象不会被外部访问，并且这个对象是可分解的，那程序真正执行的时候将可能不创建这个对象，而改为直接创建它的若干个被这个方法使用到的成员变量来代替。拆散后的变量便可以被单独分析与优化，可以各自分别在栈帧或寄存器上分配空间，原本的对象就无需整体分配空间了。</p>
<p>不过上面都属于java后期的编译优化，和垃圾回收没什么太多关系，扯远了</p>
<h4 id="垃圾回收涉及到的算法"><a href="#垃圾回收涉及到的算法" class="headerlink" title="垃圾回收涉及到的算法"></a>垃圾回收涉及到的算法</h4><h5 id="什么是垃圾"><a href="#什么是垃圾" class="headerlink" title="什么是垃圾"></a>什么是垃圾</h5><p>垃圾就是不使用的一块内存空间。我们知道现在的计算机是源于冯诺依曼机。把计算机分为五部分，分别为运算器，控制器，存储器，输入设备，输出设备。而内存，硬，高速缓存和寄存器盘都算是存储器（这里面主要说的是内存而不是其他的存储器）。内存主要存储一些从硬盘或这输出输出设备传输过来的临时数据。当这些数据使用完了之后应该被清除，而不是一直占用内存空间，所以<strong>清除内存中不在使用的空间叫做垃圾回收</strong>。</p>
<p>垃圾的确认，上面是说垃圾是一块不在使用的内存，那么什么垃圾我们该如何确认？这里要说两种算法一种是引用计数算法，另一种是可达性分析算法。</p>
<h5 id="垃圾的判定"><a href="#垃圾的判定" class="headerlink" title="垃圾的判定"></a>垃圾的判定</h5><p><strong>引用计数算法</strong>：给对象添加一个引用计数器，每当有一个地方引用它时，计数器加1，当引用失效时就减1；任何时刻计数器为0的对象是不能在使用(也就是没有一个引用可以把堆内中的对象找到，或者是使用，这样这个对象就是一个死对象)。也就是内存中的垃圾。但是主流的JVM中没有使用引用算法来管理内存，主要原因是就是它很难解决<strong>对象之间相互循环引用的问题。</strong></p>
<p><img src="/img/JVM/gc_root.png" alt="引用计数算法"></p>
<p>可达性算法：现在主流的JVM上使用的是可达性分析算法；可达性算法的基本思路就是通过很多“GC_ROOT”的对象作为起点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC_ROOT 没有任何引用链时，就说明对象是不可达的，没有一个引用可以找到这个对象，该对象就是死对象也就是可以被回收。</p>
<p>GC_ROOT的对象可以包括以下几种，1、虚拟机栈(栈帧中的本地变量表)中引用的对象，一般就是一个方法中的对象（一个栈帧就是一个方法,在递归的时候一个方法调用多次，也是多个栈帧）；2、方法区中类静态属性引用的对象(一般静态对象和类信息一起都是存在方法区里)；3、方法区常量引用的对象(存在常量池中，或者和类信息存储一起)；4、本地方法栈JNI(java native interface)引用的对象。</p>
<p>垃圾回收的安全点（stop-the-world，并发收集，几种gc收集器）</p>
<p>上面说道一般会通过可达性算法来判定那些对象是否被回收，那HotSpot 虚拟机通过 <strong>GC Roots 枚举判定</strong>待回收的对象，通过安全点和安全区域确定 GC 的触发点，最后通过各种不同的回收算法完成垃圾回收。</p>
<p><strong>GC Roots 枚举最大的困难点在于：检查范围比较大，并且必须在内存快照中进行，保证一致性，而且时间要求比较敏感。</strong></p>
<p>在生产环境中，即使不考虑其它部分内存，仅仅 Java 堆内存就可达几百兆甚至上G，在此范围内完成 GC Roots 确定是一件很困难的事情；同时，在进行 GC Roots 枚举时，<strong>必须保证一致性</strong>，即所有正在运行的程序必须停顿（这种停顿就是stop-the-world，一般这种停顿会导致jvm性能下降，生成所谓的gc抖动），不能出现正在枚举 GC Roots，而程序还在跑的情况，这会导致 GC Roots 不断变化，产生数据不一致导致统计不准确的情况；最后，由于所有工作线程必须停顿以完成 GC 过程，在大并发高访问量情况下，这个时间必须非常短。（一般GCRoot枚举就是垃圾回收中标记的过程，他会把能用的都对象都存储到相关的OopMap中）</p>
<p>HotSpot 采用了一种 “准确式 GC” 的技术；该技术主要功能就是让虚拟机可以准确的知道内存中某个位置的数据类型是什么；比如某个内存位置到底是一个整型的变量，还是对某个对象的 reference；这样在进行 GC Roots 枚举时，只需要枚举 reference 类型的即可。在能够准确地确定 Java 堆和方法区等 reference 准确位置之后，HotSpot 就能极大地缩短 GC Roots 枚举时间。然后他引用了OopMap这个数据结构。</p>
<p><strong>OopMap</strong>：记录对象引用关系的一个数据结构，它主要是用来查找GC Roots节点的，在 HotSpot 的 JIT 编译过程中，同样会插入相关指令来标明哪些位置存放的是对象引用，或者一些对象被创建和或者移动的时候，就会更新OopMap。这样在 GC 发生时，HotSpot 就可以直接扫描 OopMap 来获取引用对应堆上的信息，进行 GC Roots 枚举。</p>
<p><strong>Safepoint：</strong>有了OopMap之后，如果为每一条指令都生成对应的 OopMap，那么将需要大量的额外空间，这样对导致 GC 成本很高，所以 HotSpot 只在 “特定位置” 记录这些信息，这些位置被称为 <strong>安全点(Safepoint)</strong>。一般进入安全点后就不会产生新的引用和对象。SafePoint保存了线程上下文中的任何东西，包括对象，指向对象或非对象的内部指针。</p>
<p><strong>在JVM处于SafePoint时</strong>，所有在执行代码的<strong>Java线程</strong>将会被暂停。不与JVM交互的运行Native Code的能继续执行（如果需要通过JNI访问Java 对象，调用JAVA方法，从Native回到JAVA的话，则必须等到Safepoint结束。</p>
<p>一般进入SafePoint会在下面几种情况：1、垃圾收集。2、代码优化（JIT优化）。3、刷新代码缓存。4、类的重新定义（热部署）。5、各种调试工作（死锁检查，堆栈跟踪转储 Stack trace dump）</p>
<p>从线程状态的角度看，Waiting/Idle/Blocked/Running native code是处于SafePoint的，Running Java code是处在非SafePoint的状态。处于Safepoint时，Heap不能访问，Java代码不能执行。当全部Java线程都处于SafePoint状态时，JVM处于全局SafePoint,可用于执行：GC, 优化，Stack trace dump,锁偏向，类重定义等。我们的以下行为会导致进入SafePoint: 新生代耗尽，大对象分配导致的老年代耗尽，进入同步块等。</p>
<p><strong>SafeRegion：</strong>安全区是指一段代码之中引用关系不发生变化，在这个区域中任何时候gc都是安全的。也就是在这段代码执行时候，不会产生浮动垃圾。</p>
<h5 id="垃圾回收的几种算法"><a href="#垃圾回收的几种算法" class="headerlink" title="垃圾回收的几种算法"></a>垃圾回收的几种算法</h5><p>一般垃圾回收有三种收集方法，复制算法，标记-整理算法，标记-清除算法。垃圾回收可以防止内存泄漏（也不是绝对的），让程序能有充足的使用和分配对象的空间，避免OOM（out of Memory）异常。</p>
<ul>
<li><p>标记清除算法(Mark-Sweep)：他是最基础收集算法。算法分两个阶段，标记和清除。首先要标记出来要统一回收的对象。也就是上面提到的可达性算法中不可达的对象，然后把这些对象进行标记。这种算法标记和清除的。效率都不高；同时标记清除后会产生大量不连续的内存碎片，空间碎片太多导致<strong>大对象分配内存</strong>时无法分配内存(一段连续的内存)，可能导致触发又一次GC(Garbage collection) 。</p>
<p><img src="/img/JVM/jvm-01.jpg" alt="标记清除算法"></p>
</li>
<li><p>复制算法：它将可用的内存容量划分为大小不等的两块，每次只能使用其中的一块，当这一块内存用完了，就将还存活的对象复制到另外的一块内存，然后再把已经使用过的内存一次性清理掉。这样使得每次都对整个半区进行内存回收，内存分配的时候也不用考虑到内存碎片等复杂情况，只要移动堆顶指针，按照顺序分配内存即可，实现简单，运行高效。这种算法的待见就是将原来使用的内存大小缩小到一般。但是JVM实现Eden的垃圾回收的时候使用了这种算法，比例是8:1:1。Eden是8，survivor1和 survivor0都是1。每次使用的时候是8+1，这样相当于只使用10%的用于复制对象信息，这样既保证的效率又保证了空间的利用率。</p>
<p><img src="/img/JVM/jvm-02.jpg" alt="复制算法"></p>
</li>
<li><p>标记整理算法(Mark-Compact)：复制算法在随着存活对象增加的时候，效率也会变低，更关键的是如果不想浪费50%的空间，就要在内存中所有对象都是100%存活的情况下，分配额外的内存空间，所以老年代是不能使用这种垃圾回收算法，所以有人提出来标记-整理算法，标记过程和标记清除算法一样，但后续的步骤不是对可回收的对象进行清理，而是让所有对象都向一段移动，然后直接对回收对象清理掉端已外的内存。</p>
<p><img src="/img/JVM/jvm-03.jpg" alt="标记整理算法"></p>
</li>
<li><p>内存碎片化：碎片化是一个常常被谈到的问题，那什么是碎片化呢？碎片化是之存储器把好多小的数据或文件不连续的存储在内存或硬盘上，空闲页面趋向于散落在不连续的空间，很难再有足够长的连续物理内存页面分配。导致以后要分配连续的内存空间时却没有足够的空间<strong>，这样会导致内存或硬盘空间明明够大但是却没有连续的一块足够大空闲部分</strong>。</p>
<p><img src="/img/JVM/碎片化.png" alt=""></p>
<p> 效率：复制算法&gt;标记/整理算法&gt;标记/清除算法（此处的效率只是简单的对比时间复杂度，实际情况不一定如此）。</p>
<p>  内存整齐度：复制算法=标记/整理算法&gt;标记/清除算法。</p>
<p>  内存利用率：标记/整理算法=标记/清除算法&gt;复制算法。</p>
</li>
</ul>
<h4 id="垃圾的分代收集"><a href="#垃圾的分代收集" class="headerlink" title="垃圾的分代收集"></a>垃圾的分代收集</h4><p>垃圾回收也是要分类的，不一样额垃圾不一样处理。</p>
<ul>
<li>商业虚拟机一般都是使用分代收集算法。根据对象存活的周期，将Java的堆内存划分为新生代，老年代和持久代（1.8是MetaData Space）这样就可以根据各个年代的特点采用适当的收集算法。在新生代每次垃圾收集时都会发现大批量的对象死亡（不可达，新生代对象一般都是朝生夕死），只有少量存活，那就使用复制算法只需要付出少量存活对象的复制成本就可以完成收集。而老年代的对象存活率比较高，没有额外的空间分配担保，所以必须使用标记清除或者标记整理算法进行垃圾回收。</li>
</ul>
<ul>
<li><p>新生代</p>
<p>1、所用新创建的对象，都首先放在新生代中。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。</p>
<p>2、新生代一般被8:1:1的被分配，Eden是8，survivor1和 survivor0都是1。大部分对象在Eden（伊甸园）生成，回收时将一部分Eden中的存活的对象，放在survivor0区，然后清空Eden区，当这个survivor0被填满的时候，虚拟机会把survivor0和Eden区中的活对象复制到survivor1中，在把survival0和Eden中的数据清空，这时survivor0是空的。虚拟机就是通过这种方式将survivor0和survivor1中的数据进行来回交换，总有一个是survivor是空的。</p>
<p>3、当survival0存放不下survival1和Eden的对象就会存放到老年代区，如果老年代存放不下，那么就触发一次fullGC。一般虚拟级会进行判断，默认在survival中年龄大于16（默认）就会移到老年代，或者是大对象直接进入老年代。</p>
<p>4.新生代发生的GC也叫做Minor GC，MinorGC发生频率比较高(不一定等Eden区满了才触发)</p>
</li>
<li><p>老年代</p>
<p>1、存放一些生命周期比较长的对象，一般都在新生代经过了多次垃圾收集，或者是一个很大的对象。</p>
<p>2、一般老年代发生的GC是major gc也是Full GC，一般这样的情况比较少，一般Full GC也会触发minor GC，一般在Full GC的情况下，JVM的吞吐量会下降。老年代的对象一般生命周期长，标记存活率高，同时老年代的空间也会比新生代要打，一般是1:2左右。 </p>
</li>
<li><p>持久代</p>
<p>一般也成永久代，一般GC很少回收这部分的数据，一般都是方法区。一般存放静态信息，Class信息和方法信息。一般在类加载的时候，会把整个属于这个类的信息，加载到方法区。在这个类使用完之后被GC时，一般会触发这个类的卸载，也就从方法区清除这个类相关信息。</p>
</li>
</ul>
<p><img src="/img/JVM/jvm.png" alt="JVM分代之间的关系"></p>
<ul>
<li><h5 id="minor-gc-、major-gc、full-gc"><a href="#minor-gc-、major-gc、full-gc" class="headerlink" title="minor gc 、major gc、full gc"></a>minor gc 、major gc、full gc</h5><p>肯定有人说，这三个长的这么像都什么意思。这三个gc就是上面分代gc的一种表现形式。老外很聪明把内存分成几部分，(也就是老年代，新生代，持久代)，然后对不同的对象做不一样的处理，也就是分而治之。分别用不同的收集算法去实现，而不是一股脑的把垃圾都回收。上面也都是说了三种收集算法，其实也就是对应这三种不同gc。各有优点，处理不同的分代和不同程度情况下的垃圾回收。</p>
<p>minor gc：就是年轻代gc，也可以说是小型gc，年轻代一般都是朝生夕死的对象（说白了就是活不长的对象，也就是被一次使用，或者几次使用，完成使命就进入垃圾堆了）所以这种垃圾收集比较频繁，要求<strong>内存整齐度</strong>和<strong>效率</strong>比较高，使用的是复制算法，但是有不能一半一半的复制，所以找了survivor0和survivor1交换复制来实现复制算法，提高内存的利用率。 </p>
<p>major gc：就是老年代gc（大型gc），老年代的上的对象生命周期一半都比较长，比如线程池对象，一些单例的对象，或者是大对象。一般都会伴随minor gc，因为jvm一般都是引用可达性算法，所以老年代的对象可能与新生代的对象存在引用关系，但是新生代对象又很多，所以要在新生代先minor gc一次（也不定每次都要minor gc），清除大多数无用对象，这样与下major gc分析引用关系会省一些时间。然后在开始major gc分析引用标记对象，（分析引用与标记对象是一起操作，尽管说此时可能是多线程的并发的，但是在安全区或者安全点中还是一个stop-the-world的状态）一般在老年代，垃圾回收器都会多次标记垃圾。所以老年代的回收时间会比较长，一般是新生代的10倍左右。一般老年代常用的就是CMS（标记清除）和G1（标记整理）</p>
<p>Full gc：full gc是整个jvm的内存空间中所有的垃圾都会被回收掉。也就是老年代，持久代，新生代的垃圾都会被干掉，然后重新分配空间，这里面一般都使用的是标记整理，这个时间就更长，而且full gc停顿的时间也更长。所以一般都避免full gc。</p>
</li>
<li><h5 id="JVM里一个对象是怎么从对象变成垃圾的（垃圾回收的整个过程）"><a href="#JVM里一个对象是怎么从对象变成垃圾的（垃圾回收的整个过程）" class="headerlink" title="JVM里一个对象是怎么从对象变成垃圾的（垃圾回收的整个过程）"></a>JVM里一个对象是怎么从对象变成垃圾的（垃圾回收的整个过程）</h5><p>首先JVM创建对象在新生代，新生代中的对象被使用，当又有大量新对象进入的新代，新生代没有足够空间分配空间开始minor gc，开始标记对象，然后将可用（存活，被标记）的对象复制到survivor0或者survivor1中进行。然后jvm清空所有的新生代空间（Eden），这个时候会有一个判断即如果对象过大，或者在survival区域中待的比较久的对象就直接进入到老年代。也也就是minor gc，一般新生代的垃圾回收器有（g1、ParNew 多线程，Serial单线程，Parallel Scavenge 并行收集器-&gt;吞吐量优先收集器。同时它和CMS无法配合使用）。新生代不停的gc（因为很多对象类加载进来，创建对象被使用，程序要跑下去）。很多长时间对象和大对象就会填满老年代，当老年代没有足够的空间去存放新来的对象，他就把之前存进来的对象，进行分析标记看那些对象已经变成垃圾（可达性算法），由于是可达性算法，所以新生代也会被分析，看有没有对象和老年代关联，所以一般也都会触发minor gc；这种标记然后开始清除没有被标记的对象（垃圾）也就是major gc，major gc的垃圾回收器有（cms 、g1、Parallel old、serial old-&gt;一般当CMS内存不足的时候的备选项）。最后一种情况是full gc，full gc JVM里面没有可用的空间比如说老年代，或者方法区没有足够多内存去分配（比如cms 垃圾回收导致老年代碎片化严重，不能把新生代的对象放进去，或者方法区没有足够多的空间）都会引发full gc 。full gc一般会比较慢，调用的收集算法也是之前的算法。（一般长期存活和比较大的对象会直接进入老年代）</p>
<p>肯定有人会问，既然JVM已经有垃圾回收机制，但是为什么还会有OOM异常，首先JVM只是帮忙处理不用的对象，如果你的在JVM所有的对象都在用，同时有不能回收当然会报OOM了。同样GC也只能在安全区和安全点进行GC，在full gc完发现还是不够用，毕竟谁也不知道这个gc 释放的内存对于下次是否够用。如果你的机器频繁full gc 说明你离OOM已经不远了。</p>
<p><strong>并行（Parallel）：</strong>指多条垃圾收集器并行（一起）工作，但此时用户线程仍然处于等待状态。</p>
<p><strong>并发（Concurrent）：</strong>指用户线程与垃圾收集器线程同时执行，（不一定是并行，也有可能是交替进行</p>
<p>），用户程序继续运行，而垃圾收集程序运行于另一个cup上。</p>
</li>
</ul>
<h4 id="垃圾回收优化的基本原则"><a href="#垃圾回收优化的基本原则" class="headerlink" title="垃圾回收优化的基本原则"></a>垃圾回收优化的基本原则</h4><h5 id="JVM-优化的三个性能指标：吞吐率，内存占用，延迟时间"><a href="#JVM-优化的三个性能指标：吞吐率，内存占用，延迟时间" class="headerlink" title="JVM 优化的三个性能指标：吞吐率，内存占用，延迟时间"></a>JVM 优化的三个性能指标：吞吐率，内存占用，延迟时间</h5><p>吞吐率：是指不考虑垃圾收集引起的停顿时间或内存消耗，垃圾收集器能支撑应用达到的最高性能指标。<br>内存占用：衡量为了高效的运行，垃圾回收器需要的内存大小<br>延迟时间：衡量垃圾回收器最小化甚至消灭由垃圾回收器引起的暂停时间和应用抖动的能力</p>
<p>3进2原则（类似于CAP）<br>一项指标的提升，往往需要牺牲其他一项或者两项指标。换一句话说，一项指标的妥协通常是为了支持提升其他一项或者两项指标。然而，对于大多数应用来说，<br>很少有3项指标都非常重要，通常，一项或者两项比其他的更重要。由于始终需要各种权衡，那么知道哪项指标对应用是最有必要的就显得非常重要。所以一般优化只优化<br>其中的两个指标，而不是三个指标都要优化。</p>
<h5 id="在优化JVM垃圾回收器的时候，有3项基本原则"><a href="#在优化JVM垃圾回收器的时候，有3项基本原则" class="headerlink" title="在优化JVM垃圾回收器的时候，有3项基本原则"></a>在优化JVM垃圾回收器的时候，有3项基本原则</h5><p>1、在minor垃圾回收器中，最大量的对象被回收，这个被称为Minor GC回收原则。秉承这个原则可以减少由应用产生的full垃圾回收数量和频率，Full垃圾回收往往需要更长的时间，以致于应用无法达到延迟和吞吐量的需求。<br>2、更多的内存分配给垃圾回收器，也就是说更大的Java堆空间，垃圾回收器和应用在吞吐量和延迟上会表现得更好，这条原则被称为GC最大内存原则。<br>3、优化JVM垃圾回收器的3个指标中的2个，这个被称为2/3 GC优化原则</p>
<h4 id="常有的几种JVM配置和JVM的指令行（没有监控就，没办法调优，同样不要为调优而调优）"><a href="#常有的几种JVM配置和JVM的指令行（没有监控就，没办法调优，同样不要为调优而调优）" class="headerlink" title="常有的几种JVM配置和JVM的指令行（没有监控就，没办法调优，同样不要为调优而调优）"></a>常有的几种JVM配置和JVM的指令行（没有监控就，没办法调优，同样不要为调优而调优）</h4><h5 id="jps（不是jsp，JVM-Process-Status-Tool）虚拟机进程状态工具"><a href="#jps（不是jsp，JVM-Process-Status-Tool）虚拟机进程状态工具" class="headerlink" title="jps（不是jsp，JVM Process Status Tool）虚拟机进程状态工具"></a>jps（不是jsp，JVM Process Status Tool）虚拟机进程状态工具</h5><p>查看所有的jvm进程，包括进程ID，进程启动的路径等等。</p>
<p><code>jps -l</code> 输出主类的全类名，如果进程是jar包的话，输出jar路径（ElasticSearch的LVMID 4365）</p>
<p><img src="/img/JVM/jps-l.png" alt=""></p>
<p><code>jps-v</code>输出虚拟机进程启动的JVM参数（这个可以看到好多参数,图中能看到jps的参数和ElasticSearch的JVM具体参数）</p>
<p><img src="/img/JVM/jps-v.png" alt=""></p>
<p><code>jps-m</code>输出虚拟机进程启动的时候，传给main函数的参数（图中能看到jps 的参数和ElasticSearch的启动参数-d表示后台启动）</p>
<p>​                                        <img src="/img/JVM/jps-m.png" alt=""></p>
<p><code>jps-q</code>只输出LVMID，不显示其他信息</p>
<p><img src="/img/JVM/jps-q.png" alt=""></p>
<h5 id="jstat（JVM-Statistics-Monitoring-Tools）虚拟机统计信息监控工具"><a href="#jstat（JVM-Statistics-Monitoring-Tools）虚拟机统计信息监控工具" class="headerlink" title="jstat（JVM Statistics Monitoring Tools）虚拟机统计信息监控工具"></a>jstat（JVM Statistics Monitoring Tools）虚拟机统计信息监控工具</h5><p>用于监控虚拟机各种运行时状态信息和命令行工具，他可以显示本地或者远程虚拟机进程中类加载、内垃圾回收、JIT编译等数据。一般都需要获取JVM进程，这一般就使用jps来获取。</p>
<p><code>jstat -gc lvmid</code>监控Java堆状况，包括Eden区，两个survivor、老年代、永久代等容量、已用时间、GC时间合计等信息。</p>
<p><img src="/img/JVM/jstat-gc.png" alt=""></p>
<p>S0C （Survivor0 Capacity）Survivor0总容量； S0U （Survivor0 Use）Survivor0使用量；S1C （Survivor1 Capacity）Survivor1总容量；S1U （Survivor1 Use）Survivor1使用量； EC（Eden Capacity）伊甸园容量；EU（Eden Use）伊甸园使用量； OC（Old Capacity）老年代总容量；OU（Old Use）老年代使用量；MC（MetaData Capacity）MetaData总容量；MU（MetaData Use）；CCSC（Compress Class Space Capacity）压缩类空间大小；</p>
<p>CCSU（Compress Class Space Use）压缩类空间大小使用；YGC（Young GC）新生代GC次数 ；YGCT（Young GC Time）新生代GC时间；FGC（Full GC）Full GC次数；FGCT（Full GC Time）Full GC时间。上面说的这些参数都是单位都是KB。其中Xmx=128M=131072KB；Xms=128M=131072KB。</p>
<p>​ S0总容量4352.0KB；S1总容量4325.0KB。（S0，S1大小一样）</p>
<p>S0使用量 69.1KB；S1使用量0.0KB，S0的使用量1.58%（说明现在S0在被使用，S1属于空闲状态）</p>
<p>Eden区的总容量34944KB，Eden使用量21961.9KB，使用率62.84%（伊甸园大小为34944KB，大约是S0，S1的8倍，占总比26.66%。S0+S1+Eden=新生代占总比33.30%。也就三分之一</p>
<p>Old区的总容量87424.0KB，Old的使用量是65446.2KB，使用率74.86%。总占比66.99%也就是三分之二。</p>
<p>MetaData区总容量54868KB，使用量51210.9KB。使用率93.33%</p>
<p>压缩类空间8080KB，使用量6906.9%；使用率85.48%。</p>
<p>YGC 新生代GC次数 48，总耗时0.723s，FGC FullGC次数6，FullGC时间0.84s。可以看出来YGC一次平均时间</p>
<p>0.0156秒，FullGC平均时间0.14秒，所以可以看出来FullGC时间比Young gc差10倍作用。这里ElasticSearch运行时间不长，但是我们可以看出来GC很频繁，应该是堆分配比较小，所以频繁GC，要扩大堆的大小，提高效率。</p>
<p><code>jstat -gcutil lvmid</code>监视内容与-gc基本相同，但是输出主要是Java堆各个区域使用最大最小空间。只不过他会把各个空间的使用百分比拿出来</p>
<p><img src="/img/JVM/jstat-gcutil.png" alt=""></p>
<p>S0的使用率0.74%,S1没有使用，Eden（E）使用率74.86%和我们上面差不多，Old（O）Old使用率74.86%，MetaData（M）使用率93.33%。CCS使用率85.47%。新生代时间是0.7秒，Full GC次数 6，FullGC花费时间0.117秒，GCT（GC总时间）0.817秒。</p>
<p><code>jstat -gcnew lvmid</code> 监控新生代GC情况。</p>
<p><img src="/img/JVM/jstat-gcnew.png" alt=""></p>
<p>DSS（Desired survivor size）:当前需要survivor（幸存区）的容量 (KB)（Eden区已满）。</p>
<p>TT（Tenuring threshold.）： 持有次数限制（Survivor持有对象的次数）<br>MTT （Max Tenuring threshold.）： 最大持有次数限制。（Survivor持有对象的最大次数）</p>
<p>S0、S1总容量4325KB，S0使用量87.6KB，S1使用0。持有次数和最大持有次数为6，survivor的期望容量2176KB（也就是还有2176KB对象是存活的，需要进入下一次周期），Eden区的总量34944.0KB，使用22414.0KB；GC了34次，消耗时间0.727秒。</p>
<p><code>jstat -gcold lvmid</code>：监控老年代GC情况。</p>
<p><img src="/img/JVM/jstat-gcold.png" alt=""></p>
<p>MetaData总量54032.0KB，使用量50347.5KB，压缩类空间大小8004.0KB，使用6792.0KB，老年代大小87424KB，使用量65475.2KB。新生代GC36次，FullGC 6次时间是0.136秒，GC总时间0.875秒。</p>
<p><code>jstat -class lvmid</code>显示相关进程的类加载情况</p>
<p><img src="/img/JVM/jstat-class.png" alt=""></p>
<p>Loaded：已经加载的类个数；Bytes：已经加载类的大小；Unload：没有加载类的个数；Bytes：没有加载类的大小了；Time：加载这些类所花费的时间。</p>
<p>加载了10386个类，大小是18626.5B；未加载类25个，大小28.3B；耗时11.23秒</p>
<p><code>jstat -gcmetacapacity lvmid</code>查看MetaDataSpace空间详情</p>
<p><img src="/img/JVM/jstat-gcmetacapacity.png" alt=""></p>
<p>MCMN（MetaData Capacity Min）：MetaData空间初始最小空间（KB）;MCMX（MetaData Capacity Max）：MetaData空间最大容量；CCSMN（Compress Class Space Min）：压缩类空间最小为容量；CCSMX（Compress Class Space Max）压缩类空间最大容量；</p>
<p>MetaData空间最小为0KB，最大为1095680.0KB（1070M这一点有点懵逼，估计是通过参数设置，因为我的这个主机最大512M内存）MetaData容量是54032.0KB（52.76M）；压缩类空间最小为容量0KB，最大容量是1048576.0KB（1024M），压缩类空间大小8004.0KB。新生代GC 38次，FullGC 6次，FullGC时间0.136秒，GC总时间0.875秒</p>
<p><code>jstat -gccapacity lvmid</code>与上面监控类似，但是主要输出java堆各个区域使用的最大最小空间</p>
<p><img src="/img/JVM/jstat-gccapacity.png" alt=""></p>
<p>NGCMN（ New Generation Capacity Min）:新生代（Young）最小的容量；NGCMX（ New Generation Capacity Max）:新生代最大的容量；NGC（New Generation Capacity） 新生代容量；OGCMN（Old Generation Capacity Min）：老年代带最小容量；OGCMX （Old Generation Capacity Max）：老年代最大容量；</p>
<p>新生代最小容量43648.0KB，最大容量43648.0KB；新生代容量4352.0KB；S0容量4352.0KB；S1容量4352.0KB；Eden区大小34944.0KB；老年代最小容量87424.0KB，最大容量87424.0KB老年代容量87424.0KB；MetaData最小容量0，最大容量1095680.0KB，MetaData容量54032.0KB；压缩类空间最小为容量0KB，最大容量是1048576.0KB（1024M），压缩类空间大小8004.0KB。新生代GC60次，FullGC 6次。</p>
<p><code>jstat -gccause lvmid</code>与-gcutil 功能一样，但是会额外输出导致上一次GC产生的原因.</p>
<p><img src="/img/JVM/jstat-gccause.png" alt=""></p>
<p>LGCC（Last GC Cause）：上一次GC原因；GCC （GC Cause）：当前GC原因。</p>
<p>S0使用量0.0%，S1使用量106%，Eden区使用量74.04%，老年代使用量74.92%，MetaData使用量93.19%，CSS使用量84.88%，新生代GC次数61，新生代GC时间0.862秒，FullGC次数6，FullGC时间0.136秒，GC总时间0.999秒。上次GC原因 Allocation Failure（分配空间失败），当前没有GC</p>
<p><code>jstat -gc/gcutil/gcold... lvmid 200 10</code> 使用 jstat  -options 每200毫秒，20次。</p>
<p><img src="/img/JVM/jstat-gc-1655-200-10.png" alt=""></p>
<h5 id="jinfo-（Configuration-info-java）显示Java配置信息。"><a href="#jinfo-（Configuration-info-java）显示Java配置信息。" class="headerlink" title="jinfo （Configuration info java）显示Java配置信息。"></a>jinfo （Configuration info java）显示Java配置信息。</h5><p>注意在Linux里使用jinfo查看相关JVM的信息，要切换到启动JVM进程的用户要不然你就会收到（Unable to open socket file: target process not responding or HotSpot VM not loaded）。因为JVM的相关信息是存储在一个文件里，而在linux下面文件是隔离的。虚拟机具体参数表示<code>-XX:+&lt;option&gt; 开启option 参数 例如 -XX:+PrintGCDetails 表示打印详细GC日志开启</code>，相反的<code>-XX:-&lt;option&gt; 关闭option参数 -XX:-UseParallelOldGC</code> 不使用Parallel Old回收老年代和Parallel Scavenger回收新生代，<code>-XX:&lt;option&gt;=&lt;value&gt; 将option参数的值设置为value例如 -XX:GCTimeRatio=99</code> 即GC时间占总时间的比率1%。</p>
<p><code>jinfo -flag PrintGCDetails lvmid</code> 查看打印详细GC日志</p>
<p><img src="/img/JVM/jinfo-flag-printgc.png" alt=""></p>
<p>能看出来这个JVM并没有打印详细GC日志。在一般只有调试的时候打开，默认是关闭的。</p>
<p><code>jinfo -flag UseTLAB lvmid</code>  优先使用本地线程缓存区分配对象，避免分配内存时的锁定过程。这个可以结合JMM，volatile去分析一下。</p>
<p><img src="/img/JVM/jinfo-flag-usetalb.png" alt=""></p>
<p>能看出来这个UserTALB这个参数已经生效</p>
<p><code>jinfo -flag GCTimeRatio  lvmid</code> GC时间占总时间的比率，默认值99，即允许1%的GC时间，仅在Parallel Scavenger 为回收器时生效。</p>
<p><img src="/img/JVM/jinfo-flag-gctime.png" alt=""></p>
<p>可以看出来GCTimeRatio参数的值是99</p>
<p><code>jinfo -flag [+|-]&lt; name &gt;</code>：设置或取消指定java虚拟机参数的布尔值。 </p>
<p><img src="/img/JVM/jinfo-flag+printgc.png" alt=""></p>
<p>开启打印详细GC日志。</p>
<p><img src="/img/JVM/jinfo-flag-print.png" alt=""></p>
<p>关闭打印详细GC日志，当然不是什么参数都可以在这开启或者打开，一般都是要配置到配置文件里，然后让JVM重启才会生效，一般只有一些调试参数可以通过这方式开启。我也试过一些，但是好多都不成功</p>
<p><img src="/img/JVM/fail-jinfo-gctime.png" alt=""></p>
<p>尝试设置GCTimeRatio的值，失败了。</p>
<p><img src="/img/JVM/fail-jinfo.png" alt=""></p>
<p>关闭 UseTLAB失败</p>
<p><code>jinfo -flags lvmid</code>显示这个JVM相关参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[es@host root]$ jinfo -flags 1655</div><div class="line">Attaching to process ID 1655, please wait...</div><div class="line">Debugger attached successfully.</div><div class="line">Server compiler detected.</div><div class="line">JVM version is 25.171-b11</div><div class="line">Non-default VM flags: -XX:+AlwaysPreTouch -XX:CICompilerCount=2 -XX:CMSInitiatingOccupancyFraction=75 -XX:+HeapDumpOnOutOfMemoryError -XX:InitialHeapSize=134217728 -XX:MaxHeapSize=134217728 -XX:MaxNewSize=44695552 -XX:MaxTenuringThreshold=6 -XX:MinHeapDeltaBytes=196608 -XX:NewSize=44695552 -XX:OldPLABSize=16 -XX:OldSize=89522176 -XX:-PrintGCDetails -XX:ThreadStackSize=1024 -XX:+UseCMSInitiatingOccupancyOnly -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:+UseParNewGC </div><div class="line">Command line:  -Xms128m -Xmx128m -XX:+UseConcMarkSweepGC -XX:CMSInitiatingOccupancyFraction=75 -XX:+UseCMSInitiatingOccupancyOnly -XX:+AlwaysPreTouch -Xss1m -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djna.nosys=true -Djdk.io.permissionsUseCanonicalPath=true -Dio.netty.noUnsafe=true -Dio.netty.noKeySetOptimization=true -Dio.netty.recycler.maxCapacityPerThread=0 -Dlog4j.shutdownHookEnabled=false -Dlog4j2.disable.jmx=true -Dlog4j.skipJansi=true -XX:+HeapDumpOnOutOfMemoryError -Des.path.home=/es/elasticsearch-5.5.1</div></pre></td></tr></table></figure>
<p><code>jinfo -sysprops lvmid</code>显示java系统的所欲配置参数，一般都能通过system.getproperty()能获取到的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">es@host root]$ jinfo -sysprops 1655</div><div class="line">Attaching to process ID 1655, please wait...</div><div class="line">Debugger attached successfully.</div><div class="line">Server compiler detected.</div><div class="line">JVM version is 25.171-b11</div><div class="line">jna.platform.library.path = /usr/lib64:/lib64:/usr/lib:/lib:/lib/i686/nosegneg:/usr/lib64/mysql</div><div class="line">java.runtime.name = Java(TM) SE Runtime Environment</div><div class="line">sun.boot.library.path = /java/jdk1.8.0_171/jre/lib/amd64</div><div class="line">java.vm.version = 25.171-b11</div><div class="line">es.path.home = /es/elasticsearch-5.5.1</div><div class="line">log4j.shutdownHookEnabled = false</div><div class="line">java.vm.vendor = Oracle Corporation</div><div class="line">java.vendor.url = http://java.oracle.com/</div><div class="line">path.separator = :</div><div class="line">jna.loaded = true</div><div class="line">file.encoding.pkg = sun.io</div><div class="line">java.vm.name = Java HotSpot(TM) 64-Bit Server VM</div><div class="line">sun.java.launcher = SUN_STANDARD</div><div class="line">user.country = US</div><div class="line">sun.os.patch.level = unknown</div><div class="line">jna.nosys = true</div><div class="line">java.vm.specification.name = Java Virtual Machine Specification</div><div class="line">user.dir = /es/elasticsearch-5.5.1/bin</div><div class="line">java.runtime.version = 1.8.0_171-b11</div><div class="line">java.awt.graphicsenv = sun.awt.X11GraphicsEnvironment</div><div class="line">java.endorsed.dirs = /java/jdk1.8.0_171/jre/lib/endorsed</div><div class="line">os.arch = amd64</div><div class="line">java.io.tmpdir = /tmp</div><div class="line">line.separator = </div><div class="line"></div><div class="line">java.vm.specification.vendor = Oracle Corporation</div><div class="line">os.name = Linux</div><div class="line">jdk.io.permissionsUseCanonicalPath = true</div><div class="line">io.netty.noKeySetOptimization = true</div><div class="line">sun.jnu.encoding = UTF-8</div><div class="line">jnidispatch.path = /tmp/jna-3246/jna4123425316020679580.tmp</div><div class="line">java.library.path = /usr/java/packages/lib/amd64:/usr/lib64:/lib64:/lib:/usr/lib</div><div class="line">sun.nio.ch.bugLevel = </div><div class="line">es.logs.cluster_name = elasticsearch</div><div class="line">java.specification.name = Java Platform API Specification</div><div class="line">java.class.version = 52.0</div><div class="line">sun.management.compiler = HotSpot 64-Bit Tiered Compilers</div><div class="line">os.version = 4.15.7-1.el7.elrepo.x86_64</div><div class="line">user.home = /home/es</div><div class="line">user.timezone = Asia/Shanghai</div><div class="line">java.awt.printerjob = sun.print.PSPrinterJob</div><div class="line">file.encoding = UTF-8</div><div class="line">java.specification.version = 1.8</div><div class="line">es.logger.prefix = </div><div class="line">io.netty.recycler.maxCapacityPerThread = 0</div><div class="line">user.name = es</div><div class="line">es.logs.base_path = /es/elasticsearch-5.5.1/logs</div><div class="line">java.class.path = /es/elasticsearch-5.5.1/lib/elasticsearch-5.5.1.jar:/es/elasticsearch-5.5.1/lib/lucene-highlighter-6.6.0.jar:/es/elasticsearch-5.5.1/lib/snakeyaml-1.15.jar:/es/elasticsearch-5.5.1/lib/jackson-dataformat-smile-2.8.6.jar:/es/elasticsearch-5.5.1/lib/lucene-grouping-6.6.0.jar:/es/elasticsearch-5.5.1/lib/lucene-sandbox-6.6.0.jar:/es/elasticsearch-5.5.1/lib/log4j-1.2-api-2.8.2.jar:/es/elasticsearch-5.5.1/lib/lucene-spatial3d-6.6.0.jar:/es/elasticsearch-5.5.1/lib/lucene-analyzers-common-6.6.0.jar:/es/elasticsearch-5.5.1/lib/lucene-misc-6.6.0.jar:/es/elasticsearch-5.5.1/lib/lucene-backward-codecs-6.6.0.jar:/es/elasticsearch-5.5.1/lib/lucene-queryparser-6.6.0.jar:/es/elasticsearch-5.5.1/lib/jackson-dataformat-cbor-2.8.6.jar:/es/elasticsearch-5.5.1/lib/t-digest-3.0.jar:/es/elasticsearch-5.5.1/lib/lucene-core-6.6.0.jar:/es/elasticsearch-5.5.1/lib/spatial4j-0.6.jar:/es/elasticsearch-5.5.1/lib/lucene-memory-6.6.0.jar:/es/elasticsearch-5.5.1/lib/log4j-core-2.8.2.jar:/es/elasticsearch-5.5.1/lib/hppc-0.7.1.jar:/es/elasticsearch-5.5.1/lib/lucene-suggest-6.6.0.jar:/es/elasticsearch-5.5.1/lib/lucene-spatial-extras-6.6.0.jar:/es/elasticsearch-5.5.1/lib/lucene-join-6.6.0.jar:/es/elasticsearch-5.5.1/lib/java-version-checker-5.5.1.jar:/es/elasticsearch-5.5.1/lib/jackson-dataformat-yaml-2.8.6.jar:/es/elasticsearch-5.5.1/lib/lucene-spatial-6.6.0.jar:/es/elasticsearch-5.5.1/lib/jackson-core-2.8.6.jar:/es/elasticsearch-5.5.1/lib/HdrHistogram-2.1.9.jar:/es/elasticsearch-5.5.1/lib/plugin-cli-5.5.1.jar:/es/elasticsearch-5.5.1/lib/log4j-api-2.8.2.jar:/es/elasticsearch-5.5.1/lib/lucene-queries-6.6.0.jar:/es/elasticsearch-5.5.1/lib/securesm-1.1.jar:/es/elasticsearch-5.5.1/lib/jopt-simple-5.0.2.jar:/es/elasticsearch-5.5.1/lib/jna-4.4.0.jar:/es/elasticsearch-5.5.1/lib/joda-time-2.9.5.jar:/es/elasticsearch-5.5.1/lib/jts-1.13.jar</div><div class="line">es.logs = /es/elasticsearch-5.5.1/logs/elasticsearch</div><div class="line">log4j.skipJansi = true</div><div class="line">java.vm.specification.version = 1.8</div><div class="line">sun.arch.data.model = 64</div><div class="line">java.home = /java/jdk1.8.0_171/jre</div><div class="line">sun.java.command = org.elasticsearch.bootstrap.Elasticsearch -d</div><div class="line">user.language = en</div><div class="line">java.specification.vendor = Oracle Corporation</div><div class="line">io.netty.noUnsafe = true</div><div class="line">awt.toolkit = sun.awt.X11.XToolkit</div><div class="line">java.vm.info = mixed mode</div><div class="line">java.version = 1.8.0_171</div><div class="line">java.ext.dirs = /java/jdk1.8.0_171/jre/lib/ext:/usr/java/packages/lib/ext</div><div class="line">sun.boot.class.path = /java/jdk1.8.0_171/jre/lib/resources.jar:/java/jdk1.8.0_171/jre/lib/rt.jar:/java/jdk1.8.0_171/jre/lib/sunrsasign.jar:/java/jdk1.8.0_171/jre/lib/jsse.jar:/java/jdk1.8.0_171/jre/lib/jce.jar:/java/jdk1.8.0_171/jre/lib/charsets.jar:/java/jdk1.8.0_171/jre/lib/jfr.jar:/java/jdk1.8.0_171/jre/classes</div><div class="line">java.vendor = Oracle Corporation</div><div class="line">java.awt.headless = true</div><div class="line">file.separator = /</div><div class="line">java.vendor.url.bug = http://bugreport.sun.com/bugreport/</div><div class="line">sun.io.unicode.encoding = UnicodeLittle</div><div class="line">sun.cpu.endian = little</div><div class="line">log4j2.disable.jmx = true</div><div class="line">sun.cpu.isalist =</div></pre></td></tr></table></figure>
<h5 id="jmap（Memory-Map-for-Java）命令用于生成堆转存储快照-dump文件-。"><a href="#jmap（Memory-Map-for-Java）命令用于生成堆转存储快照-dump文件-。" class="headerlink" title="jmap（Memory Map for Java）命令用于生成堆转存储快照(dump文件)。"></a>jmap（Memory Map for Java）命令用于生成堆转存储快照(dump文件)。</h5><p>还可以用一些比较暴力的手段，比如通过<code>-XX:+HeapDumpOnOutOfMemoryError</code>参数，可以在虚拟机OOM之后自动生成dump文件，也可以通过<code>-XX:+HeapDumpOnCtrlBreak</code>参数使用Ctrl+Break键让虚拟机生成dump文件。</p>
<ul>
<li><p><code>jmap -heap lvmid</code> 显示java堆的详细信息，如使用那种回收器，参数配置，分代情况等等，只有在linux和solaris平台有效，windows10也可以，别的我没试过。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">[es@host root]$ jmap -heap 1655</div><div class="line">Attaching to process ID 1655, please wait...</div><div class="line">Debugger attached successfully.</div><div class="line">Server compiler detected.</div><div class="line">JVM version is 25.171-b11</div><div class="line"></div><div class="line">using parallel threads in the new generation.</div><div class="line">using thread-local object allocation.</div><div class="line">Concurrent Mark-Sweep GC</div><div class="line"></div><div class="line">Heap Configuration:</div><div class="line">   MinHeapFreeRatio         = 40</div><div class="line">   MaxHeapFreeRatio         = 70</div><div class="line">   MaxHeapSize              = 134217728 (128.0MB)</div><div class="line">   NewSize                  = 44695552 (42.625MB)</div><div class="line">   MaxNewSize               = 44695552 (42.625MB)</div><div class="line">   OldSize                  = 89522176 (85.375MB)</div><div class="line">   NewRatio                 = 2</div><div class="line">   SurvivorRatio            = 8</div><div class="line">   MetaspaceSize            = 21807104 (20.796875MB)</div><div class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)</div><div class="line">   MaxMetaspaceSize         = 17592186044415 MB</div><div class="line">   G1HeapRegionSize         = 0 (0.0MB)</div><div class="line"></div><div class="line">Heap Usage:</div><div class="line">New Generation (Eden + 1 Survivor Space):</div><div class="line">   capacity = 40239104 (38.375MB)</div><div class="line">   used     = 31512760 (30.05290985107422MB)</div><div class="line">   free     = 8726344 (8.322090148925781MB)</div><div class="line">   78.31377159889047% used</div><div class="line">Eden Space:</div><div class="line">   capacity = 35782656 (34.125MB)</div><div class="line">   used     = 31464952 (30.00731658935547MB)</div><div class="line">   free     = 4317704 (4.117683410644531MB)</div><div class="line">   87.93352846697573% used</div><div class="line">From Space:</div><div class="line">   capacity = 4456448 (4.25MB)</div><div class="line">   used     = 47808 (0.04559326171875MB)</div><div class="line">   free     = 4408640 (4.20440673828125MB)</div><div class="line">   1.0727826286764706% used</div><div class="line">To Space:</div><div class="line">   capacity = 4456448 (4.25MB)</div><div class="line">   used     = 0 (0.0MB)</div><div class="line">   free     = 4456448 (4.25MB)</div><div class="line">   0.0% used</div><div class="line">concurrent mark-sweep generation:</div><div class="line">   capacity = 89522176 (85.375MB)</div><div class="line">   used     = 67081200 (63.97361755371094MB)</div><div class="line">   free     = 22440976 (21.401382446289062MB)</div><div class="line">   74.93249493846083% used</div><div class="line"></div><div class="line">15096 interned Strings occupying 2342736 bytes.</div></pre></td></tr></table></figure>
<p>ElasticSearch的JVM的堆参数，这是在Linux上的，JVM的新生代使用Parallel New收集器，老年代Concurrent Mark-Sweep GC收集器和一些其他信息如各个分区的大小和使用情况，这里就不一一列举了。这里的S0和S1变成了fromSpace和toSpace，这里他把新生代划分是S0或者S1+Eden。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">C:\Users\qjq&gt;jmap -heap 18480</div><div class="line">Attaching to process ID 18480, please wait...</div><div class="line">Debugger attached successfully.</div><div class="line">Server compiler detected.</div><div class="line">JVM version is 25.121-b13</div><div class="line"></div><div class="line">using thread-local object allocation.</div><div class="line">Garbage-First (G1) GC with 8 thread(s)</div><div class="line"></div><div class="line">Heap Configuration:</div><div class="line">   MinHeapFreeRatio         = 40</div><div class="line">   MaxHeapFreeRatio         = 70</div><div class="line">   MaxHeapSize              = 1073741824 (1024.0MB)</div><div class="line">   NewSize                  = 1363144 (1.2999954223632812MB)</div><div class="line">   MaxNewSize               = 643825664 (614.0MB)</div><div class="line">   OldSize                  = 5452592 (5.1999969482421875MB)</div><div class="line">   NewRatio                 = 2</div><div class="line">   SurvivorRatio            = 8</div><div class="line">   MetaspaceSize            = 21807104 (20.796875MB)</div><div class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)</div><div class="line">   MaxMetaspaceSize         = 17592186044415 MB</div><div class="line">   G1HeapRegionSize         = 1048576 (1.0MB)</div><div class="line"></div><div class="line">Heap Usage:</div><div class="line">G1 Heap:</div><div class="line">   regions  = 1024</div><div class="line">   capacity = 1073741824 (1024.0MB)</div><div class="line">   used     = 187700456 (179.0051040649414MB)</div><div class="line">   free     = 886041368 (844.9948959350586MB)</div><div class="line">   17.480967193841934% used</div><div class="line">G1 Young Generation:</div><div class="line">Eden Space:</div><div class="line">   regions  = 55</div><div class="line">   capacity = 106954752 (102.0MB)</div><div class="line">   used     = 57671680 (55.0MB)</div><div class="line">   free     = 49283072 (47.0MB)</div><div class="line">   53.92156862745098% used</div><div class="line">Survivor Space:</div><div class="line">   regions  = 7</div><div class="line">   capacity = 7340032 (7.0MB)</div><div class="line">   used     = 7340032 (7.0MB)</div><div class="line">   free     = 0 (0.0MB)</div><div class="line">   100.0% used</div><div class="line">G1 Old Generation:</div><div class="line">   regions  = 118</div><div class="line">   capacity = 154140672 (147.0MB)</div><div class="line">   used     = 121640168 (116.0051040649414MB)</div><div class="line">   free     = 32500504 (30.994895935058594MB)</div><div class="line">   78.91503677887171% used</div><div class="line"></div><div class="line">58394 interned Strings occupying 6157416 bytes.</div></pre></td></tr></table></figure>
<p>这个是window10下面，eclipse的JVM的的堆情况，从这里我们可以看出eclipse使用的是G1垃圾回收器，同样G1的垃圾回收，年轻代和老年代的划分和上面描述的CMS垃圾回收的分区是不一样的，G1使用更小的区域Regions来划分空间；Survivor区，只划分了7个regions是100%使用，而不是S1和S0，eden和Survivor大小大概是8:1。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">C:\Users\qjq&gt;jmap -histo 18480</div><div class="line"></div><div class="line"> num     #instances         #bytes  class name</div><div class="line">----------------------------------------------</div><div class="line">   1:        283121       33384912  [C</div><div class="line">   2:        581380       18604160  java.util.HashMap$Node</div><div class="line">   3:        449913       14397216  org.eclipse.equinox.internal.p2.metadata.OSGiVersion</div><div class="line">   4:        326694       12343296  [Ljava.lang.Object;</div><div class="line">   5:        300441       12017640  java.util.LinkedHashMap$Entry</div><div class="line">   6:         99920       10036696  [Ljava.util.HashMap$Node;</div><div class="line">   7:        201877        8075080  org.eclipse.equinox.internal.p2.metadata.RequiredCapability</div><div class="line">   8:         92849        7621184  [I</div><div class="line">   9:        252250        6054000  java.lang.String</div><div class="line">  10:         80490        5896296  [B</div><div class="line">  ……………………</div><div class="line">  ……………………</div><div class="line">  8003:             1             16  sun.util.locale.provider.AuxLocaleProviderAdapter$NullProvider</div><div class="line">  8004:             1             16  		  sun.util.locale.provider.CalendarDataUtility$CalendarFieldValueNamesMapGetter</div><div class="line">  8005:             1             16  sun.util.locale.provider.CalendarDataUtility$CalendarWeekParameterGetter</div><div class="line">  8006:             1             16  sun.util.locale.provider.CalendarNameProviderImpl$LengthBasedComparator</div><div class="line">  8007:             1             16  sun.util.locale.provider.SPILocaleProviderAdapter</div><div class="line">  8008:             1             16  sun.util.locale.provider.TimeZoneNameUtility$TimeZoneNameGetter</div><div class="line">  8009:             1             16  sun.util.resources.LocaleData</div><div class="line">  8010:             1             16  sun.util.resources.LocaleData$LocaleDataResourceBundleControl</div><div class="line">  Total       4672630      195589424</div></pre></td></tr></table></figure>
<p><code>jmap -histo 18480</code>显示堆中对象统计信息，包括类和实例数量、合计容量；这里面使用的是windows的操作命令，Linux也一样，这个是eclipse的JVM类加载多少个，第一个是序号，第二这个实例的数量，第三个是所占的字节大小，第四个是类的名称，可以看出来最先加载和创建应该是本地库的一些类和实例，然后是HashMap一般HashMap都会作为一些容器类使用，比如spring中的DefaultListableBeanFactory个类中的bean容器使用的是HashMap。最后还有一个汇总也就是有4672630个实例，占用195589424字节大小（186.528M）</p>
<p><code>jmap -finalizerinfo 1655</code>显示在F-Queue中等待Finalizer线程中执行finalizer方法对象。linux，window10都可以。</p>
<p><img src="/img/JVM/jmap-final.png" alt=""></p>
<p><code>jmap -dump [live,] format=b,file=&lt;fileName&gt;</code>生成Java堆转储快照，格式是bin，文件名是<filename>；其中子参数live表示说明是否只输出存活的对象。</filename></p>
<p><img src="/img/JVM/jmap-dump" alt=""></p>
<p>当虚拟机进程对-dump选项没有响应时，可使用这个选项强制生成dump快照。</p>
<h5 id="jhat（JVM-Heap-Analysis-Tool）虚拟机堆转储快照分析工具"><a href="#jhat（JVM-Heap-Analysis-Tool）虚拟机堆转储快照分析工具" class="headerlink" title="jhat（JVM Heap Analysis Tool）虚拟机堆转储快照分析工具"></a>jhat（JVM Heap Analysis Tool）虚拟机堆转储快照分析工具</h5><p>一般经常与jmap一起使用来分析jmap生成的堆转储快照，jhat内置了一个HTTP/HTML的微型服务器可以在浏览器上查看。（一般来说不太会有jhat去分析dump文件，因为比较消耗资源），会使用VisualVM，Eclipse MemoryAnalyzer、IBM HeapAnalyzer等工具。（不过我没用过）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">C:\Users\qjq&gt;jps -l</div><div class="line">18480</div><div class="line">976 sun.tools.jps.Jps</div><div class="line"></div><div class="line">C:\Users\qjq&gt;jmap -dump:format=b,file=eclispse.bin 18480</div><div class="line">Dumping heap to C:\Users\qjq\eclispse.bin ...</div><div class="line">Heap dump file created</div><div class="line"></div><div class="line">C:\Users\qjq&gt;jhat eclispse.bin</div><div class="line">Reading from eclispse.bin...</div><div class="line">Dump file created Mon Jul 16 23:00:41 CST 2018</div><div class="line">Snapshot read, resolving...</div><div class="line">Resolving 2640380 objects...</div><div class="line">Chasing references, expect 528 dotsdiv><div class="line">Eliminating duplicate referencesdiv><div class="line">Snapshot resolved.</div><div class="line">Started HTTP server on port 7000</div><div class="line">Server is ready.</div></pre></td></tr></table></figure>
<p>之后就可以访问<a href="http://127.0.0.1:7000" target="_blank" rel="external">http://127.0.0.1:7000</a> 来查看dump文件</p>
<p><img src="/img/JVM/jhat-brower.png" alt=""></p>
<h5 id="jstack（Stack-Trace-for-Java）用于生成虚拟机当前时刻的线程快照"><a href="#jstack（Stack-Trace-for-Java）用于生成虚拟机当前时刻的线程快照" class="headerlink" title="jstack（Stack Trace  for Java）用于生成虚拟机当前时刻的线程快照"></a>jstack（Stack Trace  for Java）用于生成虚拟机当前时刻的线程快照</h5><p>线程快照就是当前虚拟机内每一条线程在执行的方法堆栈的集合，生成线程快照堆主要目的是定位线程出现长时间停顿的原有，如线程死锁，死循环，请求外部资源时间过长，都是导致线程长时间停顿的原因。注意JVM启动用户与执行jstack同一个用户</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line">[es@host hsperfdata_es]$ jstack -l 1655</div><div class="line">2018-07-16 23:38:48</div><div class="line">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.171-b11 mixed mode):</div><div class="line"></div><div class="line">&quot;elasticsearch[w7p9LOx][http_server_worker][T#2]&quot; #49 daemon prio=5 os_prio=0 tid=0x00007f27e4003000 nid=0x1eee runnable [0x00007f27e067a000]</div><div class="line">   java.lang.Thread.State: RUNNABLE</div><div class="line">	at sun.nio.ch.EPollArrayWrapper.epollWait(Native Method)</div><div class="line">	at sun.nio.ch.EPollArrayWrapper.poll(EPollArrayWrapper.java:269)</div><div class="line">	at sun.nio.ch.EPollSelectorImpl.doSelect(EPollSelectorImpl.java:93)</div><div class="line">	at sun.nio.ch.SelectorImpl.lockAndDoSelect(SelectorImpl.java:86)</div><div class="line">	- locked &lt;0x00000000fde47568&gt; (a sun.nio.ch.Util$3)</div><div class="line">	- locked &lt;0x00000000fde47550&gt; (a java.util.Collections$UnmodifiableSet)</div><div class="line">	- locked &lt;0x00000000fde84a80&gt; (a sun.nio.ch.EPollSelectorImpl)</div><div class="line">	at sun.nio.ch.SelectorImpl.select(SelectorImpl.java:97)</div><div class="line">	at io.netty.channel.nio.NioEventLoop.select(NioEventLoop.java:752)</div><div class="line">	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:408)</div><div class="line">	at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)</div><div class="line">	at java.lang.Thread.run(Thread.java:748)</div><div class="line"></div><div class="line">   Locked ownable synchronizers:</div><div class="line">	- None</div><div class="line"></div><div class="line">&quot;Attach Listener&quot; #48 daemon prio=9 os_prio=0 tid=0x00007f27dc381800 nid=0x14fe waiting on condition [0x0000000000000000]</div><div class="line">   java.lang.Thread.State: RUNNABLE</div><div class="line"></div><div class="line">   Locked ownable synchronizers:</div><div class="line">	- None</div><div class="line"></div><div class="line">&quot;elasticsearch[w7p9LOx][flush][T#1]&quot; #47 daemon prio=5 os_prio=0 tid=0x00007f27f8024800 nid=0x7e1 waiting on condition [0x00007f27da70c000]</div><div class="line">   java.lang.Thread.State: WAITING (parking)</div><div class="line">	at sun.misc.Unsafe.park(Native Method)</div><div class="line">	- parking to wait for  &lt;0x00000000fb480148&gt; (a org.elasticsearch.common.util.concurrent.EsExecutors$ExecutorScalingQueue)</div><div class="line">	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)</div><div class="line">	at java.util.concurrent.LinkedTransferQueue.awaitMatch(LinkedTransferQueue.java:737)</div><div class="line">	at java.util.concurrent.LinkedTransferQueue.xfer(LinkedTransferQueue.java:647)</div><div class="line">	at java.util.concurrent.LinkedTransferQueue.take(LinkedTransferQueue.java:1269)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)</div><div class="line">	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</div><div class="line">	at java.lang.Thread.run(Thread.java:748)</div><div class="line"></div><div class="line">   Locked ownable synchronizers:</div><div class="line">	- None</div><div class="line">	…………………………</div><div class="line">	…………………………</div><div class="line"></div><div class="line">&quot;Finalizer&quot; #3 daemon prio=8 os_prio=0 tid=0x00007f28140af000 nid=0x67e in Object.wait() [0x00007f2804422000]</div><div class="line">   java.lang.Thread.State: WAITING (on object monitor)</div><div class="line">	at java.lang.Object.wait(Native Method)</div><div class="line">	- waiting on &lt;0x00000000facba6f0&gt; (a java.lang.ref.ReferenceQueue$Lock)</div><div class="line">	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:143)</div><div class="line">	- locked &lt;0x00000000facba6f0&gt; (a java.lang.ref.ReferenceQueue$Lock)</div><div class="line">	at java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:164)</div><div class="line">	at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:212)</div><div class="line"></div><div class="line">   Locked ownable synchronizers:</div><div class="line">	- None</div><div class="line"></div><div class="line">&quot;Reference Handler&quot; #2 daemon prio=10 os_prio=0 tid=0x00007f28140aa800 nid=0x67d in Object.wait() [0x00007f2804523000]</div><div class="line">   java.lang.Thread.State: WAITING (on object monitor)</div><div class="line">	at java.lang.Object.wait(Native Method)</div><div class="line">	- waiting on &lt;0x00000000facb4b88&gt; (a java.lang.ref.Reference$Lock)</div><div class="line">	at java.lang.Object.wait(Object.java:502)</div><div class="line">	at java.lang.ref.Reference.tryHandlePending(Reference.java:191)</div><div class="line">	- locked &lt;0x00000000facb4b88&gt; (a java.lang.ref.Reference$Lock)</div><div class="line">	at java.lang.ref.Reference$ReferenceHandler.run(Reference.java:153)</div><div class="line"></div><div class="line">   Locked ownable synchronizers:</div><div class="line">	- None</div><div class="line"></div><div class="line">&quot;VM Thread&quot; os_prio=0 tid=0x00007f28140a3000 nid=0x67c runnable </div><div class="line"></div><div class="line">&quot;Gang worker#0 (Parallel GC Threads)&quot; os_prio=0 tid=0x00007f281401c000 nid=0x67a runnable </div><div class="line"></div><div class="line">&quot;Concurrent Mark-Sweep GC Thread&quot; os_prio=0 tid=0x00007f281403e800 nid=0x67b runnable </div><div class="line"></div><div class="line">&quot;VM Periodic Task Thread&quot; os_prio=0 tid=0x00007f28140f0800 nid=0x684 waiting on condition </div><div class="line"></div><div class="line">JNI global references: 6398</div></pre></td></tr></table></figure>
<p>能看出来现在在堆栈里总共有48个线程，他们都排列顺序，这里我把部分的线程堆栈删除了，要不然太多了，我们能看出来这些线程大多数都是daemon线程，同时也能看出他们的优先级os_prio=0，由于是守护进程，所以系统优先级是0。我们能看出来有些线程是java的线程，有的是JVM线程比如CMS回收的线程（老年代垃圾回收，运行），有Parallel回收线程（年轻代垃圾回收，运行）， VM周期性任务线程（VM Periodic Task Thread，运行），VM线程（运行）。</p>
<p>我们分析具体一个线程，比如#2线程，也就是Reference Handler线程，我们看到线程状态状态是WAITING，它执行的本地方法（object.wait()方法）。os_prio线程系统的优先级。nid是JVM中线程唯一表的标识， tid：线程id，<code>&lt;0x00000000facb4b88&gt;</code>这个地址，是这个线程在这个地址等待，而且锁在这个地址。没有锁定可拥有的同步器：。<code>0x00007f2804523000</code>线程起始地址。JNI总共的引用个数6398个。（我们可以看出来四个JVM系统线程没有prio。思考一下？）</p>
<p>线程的各个状态：</p>
<p><strong>New</strong>: 当线程对象创建时存在的状态，此时线程不可能执行；</p>
<p><strong>Runnable</strong>：当调用thread.start()后，线程变成为Runnable状态。只要得到CPU，就可以执行；</p>
<p><strong>Running</strong>：线程正在执行；</p>
<p><strong>Waiting</strong>：执行thread.join()或在锁对象调用obj.wait()等情况就会进该状态，表明线程正处于等待某个资源或条件发生来唤醒自己；</p>
<p><strong>Timed_Waiting</strong>：执行Thread.sleep(long)、thread.join(long)或obj.wait(long)等就会进该状态，与Waiting的区别在于Timed_Waiting的等待有时间限制；</p>
<p><strong>Blocked</strong>：如果进入同步方法或同步代码块，没有获取到锁，则会进入该状态；</p>
<p><strong>Dead</strong>：线程执行完毕，或者抛出了未捕获的异常之后，会进入dead状态，表示该线程结束其次，对于jstack日志，我们要着重关注如下关键信息；</p>
<p><strong>Deadlock</strong>：表示有死锁；</p>
<p><strong>Waiting on condition</strong>：等待某个资源或条件发生来唤醒自己。具体需要结合jstacktrace来分析，比如线程正在sleep，网络读写繁忙而等待；</p>
<p><strong>Blocked</strong>：阻塞；</p>
<p><strong>Waiting on monitor entry</strong>：在等待获取锁；</p>
</li>
<li><p><code>jstack -m lvmid</code>如果调用本地方法，可以显示C/C++的堆栈，很长而且没看怎么懂就不贴出来了</p>
</li>
<li><p><code>jstack -F lvmid</code> 当正常的请求不被响应时，强制输出堆栈信息。这里面的F（Force）</p>
</li>
</ul>
<h4 id="其他杂项"><a href="#其他杂项" class="headerlink" title="其他杂项"></a>其他杂项</h4><ul>
<li>CCSU的由来</li>
</ul>
<p>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>在Java8以前，有一个选项是UseCompressedOops。所谓OOPS是指“ordinary object pointers“，就是原始指针。Java Runtime可以用这个指针直接访问指针对应的内存，做相应的操作（比如发起GC时做copy and sweep）。64bit的JVM出现后，OOPS的尺寸也变成了64bit，比之前的大了一倍。这会引入性能损耗，占的内存double了，并且同尺寸的CPU Cache要少存一倍的OOPS。于是就有了UseCompressedOops这个选项。打开后，OOPS变成了32bit。但32bit的base是8，所以能引用的空间是32GB——这远大于目前经常给jvm进程内存分配的空间。<strong>一般建议不要给JVM太大的内存，因为堆（Heap）太大，GC停顿实在是太久了。很多开发者喜欢在大内存机器上开多个JVM进程</strong>，每个给最大8G以下的内存。从JDK6_u23开始UseCompressedOops被默认打开了。因此既能享受64bit带来的好处，又避免了64bit带来的性能损耗<strong>。如果你有机会使用超过32G的堆内存，记得把这个选项关了</strong>。到了Java8，永久代被干掉了，由了MetaDataSpace的概念，存储jvm中的元数据，包括byte code，class等信息。Java8在UseCompressedOops之外，额外增加了一个新选项叫做UseCompressedClassPointer。这个选项打开后，class信息中的指针也用32bit的Compressed版本。而这些指针指向的空间被称作Compressed Class Space。默认大小是1G，但可以通过CompressedClassSpaceSize调整。如果你的java程序引用了太多的包，有可能会造成这个空间不够用，于是会看到java.lang.OutOfMemoryError: Compressed class space这时，一般调大CompreseedClassSpaceSize就可以了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;简介Java与JVM&quot;&gt;&lt;a href=&quot;#简介Java与JVM&quot; class=&quot;headerlink&quot; title=&quot;简介Java与JVM&quot;&gt;&lt;/a&gt;简介Java与JVM&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;为什么要有JVM。在程序里，没有一件事情是抽象出来一层解决不了的
    
    </summary>
    
      <category term="JVM" scheme="http://yoursite.com/categories/JVM/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>胡扯</title>
    <link href="http://yoursite.com/2018/05/05/%E8%83%A1%E6%89%AF/"/>
    <id>http://yoursite.com/2018/05/05/胡扯/</id>
    <published>2018-05-05T01:31:19.000Z</published>
    <updated>2018-05-05T02:22:02.780Z</updated>
    
    <content type="html"><![CDATA[<p>​    最近总是看一些网上的文章，发现现在自媒体或者新媒体包括公众号，发现能写出来有质量的东西越来越少，不知道从何时起我看的文章，发现都是千篇一律的套路，一般就是前面的文章的题目很醒人，都是标题党。进入到文章内部发现都是比较干枯，没有什么可以注意的点，好多东西都是平白的描述。没有任何营养，感觉读完之后没有让人产生思考，完全是快餐式的那种阅读，很快的知道内容，但是并没有告诉你内容背后的含义，你写这篇文章要表明什么意思。另外一种就完全相反就是表达意思很明确上来就是很洗脑的东西。一味的去描述好多不现实的东西，让人感觉不真实。</p>
<p>​    读书，读一篇文章，读一个帖子。感觉最重要的是一种交流是读者与作者的一种交流，作者首先要把自己想表达的东西描述的清晰客观，而不是一味的去吹捧或者贬低某些东西，而且让人感觉不真实。同时就是作者要把自己的思想或者情感放进去，不能说每个人理解的都一样，但是至少看了以后不能让我感觉和没看一样。（确实有人会说，看文章一定要学到东西吗，那看文章是不是太功利了）但是我想说的是至少作者要和读者有些许共鸣，让读者能感受到作者是在创作，而不是把很多东西拼凑在一起，让人看着迷茫，不知道作者想说明什么意思，或者意图。语言和文字就是传递一种信息，让人了解或者学习知识，而不是仅仅是为了消遣。如果消遣那就是段子，而不是文章。而现在很多文章或者公众号就是在传递一直消费文章，或者他很强烈的向你推荐一种想法（消费主义）。类似于广告让你感觉没有了这种东西你就缺少什么，或者别人都这样你不这样就会很low，被时代所抛弃。</p>
<p>​    时事热点，每天都在变，但是我大家对热点都没有什么反思或者思考，就是大家都会之前魏则西事件，或者莆田系医院，红黄蓝幼儿园等等热点事件。这种事件出现之后就像一个石头打在一潭死水上，泛起了部分涟漪，之后水还是一潭死水，没有什么本质的变化，本质的变化可能就是我们看不到其他相关报道了。估计因为看不到，所以也就认为没有了，感觉这是种自我欺骗，然后我们就慢慢忘却了，我们每天看到信息，都是被过滤过滤在过滤的信息。通过算法，看到你能看到的信息，而不是你想看到的信息，或者是其他意外的信息。你看到是你应该看到的，而不是你想要看到的。</p>
<p>​    思考，是人类与其他动物区分开来，我们学会的思考，学会了使用工具，然后不断的进步，然后变成现在的人。所以思考是生存的一本能。但是现在整体的氛围，就是不用去思考，就是一种快餐文化。感觉总有一种东西在操控这整个氛围，而这种氛围并不是让我们去积极的思考，而是灌输给我们别人已经做好的环境。然后你渐渐的就被感染，同时也在传播，像病毒一样扩散，大家都懒得思考，渐渐的你我都麻木了。</p>
<p>​    算是最近一段是时间，天天在地铁上看帖子和文章的感受。看的越多发现整个人就越飘，想法越不切合实际。所以还是要脚踏实地的多看看好书，充实自己。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;​    最近总是看一些网上的文章，发现现在自媒体或者新媒体包括公众号，发现能写出来有质量的东西越来越少，不知道从何时起我看的文章，发现都是千篇一律的套路，一般就是前面的文章的题目很醒人，都是标题党。进入到文章内部发现都是比较干枯，没有什么可以注意的点，好多东西都是平白的描
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>浅析Java ArrayList源码</title>
    <link href="http://yoursite.com/2018/03/20/%E6%B5%85%E6%9E%90Java%20ArrayList%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2018/03/20/浅析Java ArrayList源码/</id>
    <published>2018-03-20T01:21:08.000Z</published>
    <updated>2018-03-23T11:43:23.061Z</updated>
    
    <content type="html"><![CDATA[<h5 id="什么是ArrayList"><a href="#什么是ArrayList" class="headerlink" title="什么是ArrayList"></a>什么是ArrayList</h5><p>Array是数组，List是线性表两个合起来就是一个数组化的线性表。也就是ArrayList是一个数组实现的列表。所以它有List的很多方法，可以实现List的功能，区别与数组ArrayList是可以自动扩容的。ArrayList的默认大小是10。（这个我也很好奇，为什么不是2的n次方的这种形式，后面有一个解释），每次扩容的时候是1.5倍，也不是两倍。同样ArrayList也是线程不安全的，也是用fast-fail机制。如果使用线程安全的类使用Vector，它使用了锁的同步机制实现了线程安全。但是效率比较低。</p>
<ul>
<li>ArrayList的继承关系图</li>
</ul>
<p><img src="/img/ArrayList-01.png" alt=""></p>
<h5 id="ArrayList是如何实现的"><a href="#ArrayList是如何实现的" class="headerlink" title="ArrayList是如何实现的"></a>ArrayList是如何实现的</h5><p>先看一波ArrayList的定义的变量，从定义的变量中我们能看到，ArrayList的底层是基于一个数组实现的，它的默认大小是10，同时她存放数据的对象是不支持序列化的。</p>
<h5 id="常用的参数变量"><a href="#常用的参数变量" class="headerlink" title="常用的参数变量"></a>常用的参数变量</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">   </div><div class="line"><span class="comment">//ArrayList实现了序列化的Serializable接口，这个是用于序列化的版本号。</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;</div><div class="line"></div><div class="line">   <span class="comment">//默认的初始化大小</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</div><div class="line"></div><div class="line">   <span class="comment">//用于空实例的共享空数组实例</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line"></div><div class="line">   <span class="comment">//用于默认大小空实例的共享空数组实例。 我们将此与EMPTY_ELEMENTDATA区分开来，以了解什么时候第一个元素被添加</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</div><div class="line"></div><div class="line">   <span class="comment">//用于存储ArryList元素的数组。ArrayList的容量就是数组的大小(这里不像HashMap有负载因子)， 任何用</span></div><div class="line"><span class="comment">//elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA清空ArrayList在添加第一个元素时将扩展为DEFAULT_CAPACITY。</span></div><div class="line">   <span class="keyword">transient</span> Object[] elementData; <span class="comment">// 这个对象不私有化是为了简化内部类的访问（而且在HashMap中这中容器也不是私有的）</span></div><div class="line"><span class="comment">//数组的最大数量</span></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="comment">//ArrayList的大小，也就是有多少个元素</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> size;</div></pre></td></tr></table></figure>
<h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//指定ArrayList的大小的构造函数。  </span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;<span class="comment">//如果参数大于0，创建initialCapacity大小的数组</span></div><div class="line">            <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;<span class="comment">//initialCapacity为0创建一个默认空数组</span></div><div class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果initialCapacity&lt;0抛出异常，非法参数</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</div><div class="line">                                               initialCapacity);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">//构造一个初始容量为10的空列表。</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;<span class="comment">//默认的一个空列表</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="comment">//根据一个集合类对象，构造一个线性表</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</div><div class="line">        elementData = c.toArray();<span class="comment">//把集合类对象转为数组，存放发到elementData数组中</span></div><div class="line">        <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;<span class="comment">//如果原来集合对象长度不为0</span></div><div class="line">           </div><div class="line">            <span class="keyword">if</span> (elementData.getClass() != Object[].class)<span class="comment">//如果elementData的类型和要加入的数据类型不一致，返回不正确的object数组，重新拷贝一份。</span></div><div class="line">                elementData = Arrays.copyOf(elementData, size, Object[].class);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果原来的对象为空，使用空的数组代替</span></div><div class="line">            <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>ArrayList的常用方法，通过这方法，实现了对线性表的最小维护。</p>
<h5 id="添加方法"><a href="#添加方法" class="headerlink" title="添加方法"></a>添加方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line"></div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!! 增加操作的记录数</span></div><div class="line"></div><div class="line">        elementData[size++] = e;<span class="comment">//给数组赋值，使用新add的对象</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//返回结果为true</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="comment">//向指定位置添加元素</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line"></div><div class="line">        rangeCheckForAdd(index);<span class="comment">//判断添加是否数组越界</span></div><div class="line"></div><div class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!增加操作的记录数</span></div><div class="line"></div><div class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</div><div class="line">                         size - index);<span class="comment">//数组copy一下，原来的对象到+1的位置</span></div><div class="line">        elementData[index] = element;<span class="comment">//赋值</span></div><div class="line"></div><div class="line">        size++;<span class="comment">//大小+1</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//私有方法，用于判断minCapacity是否是最小的容量，minCapacity是最小需要的容量</span></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line"></div><div class="line">   		<span class="comment">//如果elementData是默认的数组，就从默认值和最小容量选一个最小值</span></div><div class="line">        <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</div><div class="line">            minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</div><div class="line">        &#125;</div><div class="line">		<span class="comment">//调用确保容量扩容的方法</span></div><div class="line">        ensureExplicitCapacity(minCapacity);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//私有方法，判断是否需要扩容</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line">        modCount++;<span class="comment">//操作记录变量+1</span></div><div class="line">        <span class="comment">// overflow-conscious code 可能会溢出的代码</span></div><div class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)<span class="comment">//如果最小容量大于现在数组容量，那么扩容，否则什么都不做。</span></div><div class="line"></div><div class="line">            grow(minCapacity);<span class="comment">//调用扩容方法。</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"> </div><div class="line"></div><div class="line">  <span class="comment">//判断数组大小是否越界	</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (index &gt;= size)<span class="comment">//如果越界抛出异常</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="comment">//设置指定位置的对象，并返回原来位置的对象</span></div><div class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</div><div class="line"></div><div class="line">        rangeCheck(index);<span class="comment">//判断是否越界</span></div><div class="line"></div><div class="line">        E oldValue = elementData(index);<span class="comment">//获取之前的值</span></div><div class="line"></div><div class="line">        elementData[index] = element;<span class="comment">//设置新的值</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> oldValue;<span class="comment">//返回旧的值</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">//添加时候的越界检验</span></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheckForAdd</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)<span class="comment">//如果指定位置大于数组大小，或者指定位置小于0                         </span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));<span class="comment">//抛出异常</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//根绝当前线性表的容量，去修剪数组（列表）的大小.一个应用可以使用这个操作最小化存储</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        modCount++;<span class="comment">//fail-fast的标志，表示修改次数。这变量继承自AbstractList类</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (size &lt; elementData.length) &#123;<span class="comment">//如果当前容量大于当前数组（列表）的大小，进行修减，否则什么都不做</span></div><div class="line"></div><div class="line">            elementData = (size == <span class="number">0</span>)<span class="comment">//如果等于0，赋值空数组</span></div><div class="line"></div><div class="line">            ? EMPTY_ELEMENTDATA: Arrays.copyOf(elementData, size);<span class="comment">//重新copy一份新的</span></div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="扩容方法"><a href="#扩容方法" class="headerlink" title="扩容方法"></a>扩容方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//扩容方法。参数最小容量</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="comment">// overflow-conscious code可能会溢出的代码</span></div><div class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;<span class="comment">//获取之前为未扩容的的数组大小</span></div><div class="line"></div><div class="line">   <span class="comment">//根据未扩容的，计算新的大小，大小是原来的1.5倍。oldCapacity+0.5*oldCapacity，通过右移一位的方式除2</span></div><div class="line">  		<span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</div><div class="line"></div><div class="line">  	   <span class="comment">//如果新容量大于最最小容量，把新容量赋值给minCapacity</span></div><div class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</div><div class="line">           newCapacity = minCapacity;</div><div class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)<span class="comment">//如果新的容量大于最大数组大小</span></div><div class="line">           newCapacity = hugeCapacity(minCapacity);<span class="comment">//如果超出了调用方法来处理。</span></div><div class="line">       <span class="comment">// 根据新的容量和数组的大小，重新进行拷贝</span></div><div class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</div><div class="line"></div><div class="line">   &#125;</div><div class="line"></div><div class="line"> <span class="comment">//对超出容量进行处理。如果minCapacity&lt;0说明溢出了，如果最小值大于最大容量，返回最大容量</span></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></div><div class="line"></div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</div><div class="line">       <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</div><div class="line">           Integer.MAX_VALUE : MAX_ARRAY_SIZE;</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h5 id="get方法和其他获取元素的方法"><a href="#get方法和其他获取元素的方法" class="headerlink" title="get方法和其他获取元素的方法"></a>get方法和其他获取元素的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//根据对象在线性表的位置获取对象</span></div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line"></div><div class="line">        rangeCheck(index);<span class="comment">//判断是否越界</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> elementData(index);<span class="comment">//返回数组中的对象</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"><span class="comment">//获取数组对象的位置，从前往后找</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;<span class="comment">//如果对象为null那么查找为null的值</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;<span class="comment">//返回结果</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//for循环去找到位置</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//返回-1没有找到</span></div><div class="line">    &#125;</div><div class="line"><span class="comment">//获取数组对象的位置，从后往前找</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//for循环去找到位置</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))</div><div class="line">                    <span class="keyword">return</span> i;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//返回-1没有找到</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="remove相关方法"><a href="#remove相关方法" class="headerlink" title="remove相关方法"></a>remove相关方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//删除节点，返回节之前节点的对象</span></div><div class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line"></div><div class="line">        rangeCheck(index);<span class="comment">//越界查询</span></div><div class="line"></div><div class="line">        modCount++;<span class="comment">//修改操作+1</span></div><div class="line"></div><div class="line">        E oldValue = elementData(index);<span class="comment">//获取之前节点的值</span></div><div class="line"></div><div class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;<span class="comment">//获取删除节点到数组末尾的距离</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)<span class="comment">//如果大于0说明是在最后一个元素前面，进行数组copy</span></div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                             numMoved);</div><div class="line"></div><div class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work，否则删除最后一个节点</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> oldValue;<span class="comment">//返回之前的对象</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"> <span class="comment">//移除指定对象</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;<span class="comment">//如果对象为null，循环找到对象，删除后返回true</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">                <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">                    fastRemove(index);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">//如果不为null，循环找出对象，删除返回true。</span></div><div class="line"></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</div><div class="line">                <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</div><div class="line">                    fastRemove(index);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">        &#125;<span class="comment">//如果上面都没走到，返回false</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//私有方法，跳过了边界检查，不会返回被移除的值</span></div><div class="line">     <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">        modCount++;<span class="comment">//修改次数+1</span></div><div class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;<span class="comment">//获取要移动的位置</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)<span class="comment">//注释同上</span></div><div class="line"></div><div class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</div><div class="line">                             numMoved);</div><div class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//清除数组里的所有信息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        modCount++;<span class="comment">//修改次数+1</span></div><div class="line">        <span class="comment">// clear to let GC do its work，清空整个数组，让GC工作</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</div><div class="line"></div><div class="line">            elementData[i] = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">		<span class="comment">//修改size大小</span></div><div class="line">        size = <span class="number">0</span>;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">//移除集合中所有的对象</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</div><div class="line">        Objects.requireNonNull(c);<span class="comment">//判断是否为空，如果为空抛出异常</span></div><div class="line">        <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);<span class="comment">//调用批量移除方法。</span></div><div class="line">    &#125;</div><div class="line"><span class="comment">//批量的删除collection里面的元素。</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;<span class="comment">//获取当前线性表的元素</span></div><div class="line">        <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;</div><div class="line">        <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (; r &lt; size; r++)<span class="comment">//循环列表中的所有数据进行比较，如果complement为true，将集合c中的元素，存放到数组的前面。W是从0开始</span></div><div class="line">                <span class="keyword">if</span> (c.contains(elementData[r]) == complement)</div><div class="line">                    elementData[w++] = elementData[r];</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></div><div class="line">            <span class="comment">// even if c.contains() throws.</span></div><div class="line">            <span class="keyword">if</span> (r != size) &#123;<span class="comment">//如果r不等于size，对数组进行copy，复制r后面的元素</span></div><div class="line">                System.arraycopy(elementData, r,</div><div class="line">                                 elementData, w,</div><div class="line">                                 size - r);</div><div class="line">                w += size - r;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (w != size) &#123;<span class="comment">//如果w不等于size，循环删除下标w后的元素</span></div><div class="line">                <span class="comment">// clear to let GC do its work</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</div><div class="line">                    elementData[i] = <span class="keyword">null</span>;</div><div class="line">                modCount += size - w;</div><div class="line">                size = w;</div><div class="line">                modified = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> modified;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="System中的copy方法"><a href="#System中的copy方法" class="headerlink" title="System中的copy方法"></a>System中的copy方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//会经常用到System的arraycopy的native方法，了解arraycopy方法。参数src是源数组，srcPos是源数组的位置。dest是目标数组，destPos是目标数组的位置，从源数组到目标数组length是要复制的数组的长度。</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos,</span></span></div><div class="line">                                        Object dest, <span class="keyword">int</span> destPos,</div><div class="line">                                        <span class="keyword">int</span> length);</div></pre></td></tr></table></figure>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>ArrayList是一种常用集合类，是Java对数组的一种封装，同时它的泛型只支持包装类不支持基本类型。它不会像HashMap一样会有一个负载因子（比如0.75）。如果有的话也就1。也就是在ArrayList在被填满后自动扩容，而且它的扩容是1.5倍，不是2倍应该是基于一个空间上的考虑，毕竟一块连续的一块空间，尽量在使用的到的时候扩容，不能一次就扩容很大，对内存造成了浪费。</p>
<p>ArrayList和其他数组结构一样，都是查找的速度比较快O(1),但是插入和删除的速度，比较慢，要通过arraycopy效率相对比较低是O(n)，而链表恰恰相反，所以还要一种是LinkedList查找比较慢，但是插入和删除比较快但是查找比较慢。所以HashMap是一种比较好的设计，她结合了两者的有点。查找速度和删除速度都还不错，不过在空间消耗是要比List要好，所以总结一下还是<strong>空间换时间</strong>。所以在计算机中经常会有这种问题，好多数据结构一般都是比较浪费空间，来获取比较的时间，以上都是自己的拙见。</p>
<p>ArrayList这个源码也不是特别完整，包含她SubList的内部类没有介绍，和subList方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;什么是ArrayList&quot;&gt;&lt;a href=&quot;#什么是ArrayList&quot; class=&quot;headerlink&quot; title=&quot;什么是ArrayList&quot;&gt;&lt;/a&gt;什么是ArrayList&lt;/h5&gt;&lt;p&gt;Array是数组，List是线性表两个合起来就是一个数组化的
    
    </summary>
    
      <category term="源代码" scheme="http://yoursite.com/categories/%E6%BA%90%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="ArrayList" scheme="http://yoursite.com/tags/ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>浅析Java HashMap源码</title>
    <link href="http://yoursite.com/2018/03/05/%E6%B5%85%E6%9E%90JavaHashMap%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2018/03/05/浅析JavaHashMap源码/</id>
    <published>2018-03-05T01:21:08.000Z</published>
    <updated>2018-03-05T08:24:51.362Z</updated>
    
    <content type="html"><![CDATA[<h5 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h5><ul>
<li><p>之前写过一篇关于<a href="https://blog.51cloud.win/2017/05/14/HashMap/#more" target="_blank" rel="external">HashMap的文章</a>，里面介绍了关于HashMap的基本概念，和简单的数据结构，但是并没有对HashMap的源码进行系统的分析。</p>
</li>
<li><p>HashMap主要结构是一个数组，数组的下标是hash值取余之后数，存储key和value的信息。允许key和value是null。HashMap的数组的使用率小于0.75（默认的0.75,也可以设置）。一般默认情况下数组的大小是16，随着数据的添加当HashMap的容量达到threshold（16*0.75=12）时候会扩容（resize），扩容是将原来的数组扩大两倍（HashMap的数组大小一定是2的n次方）。同时HashMap也不是线程安全的，在并发情况下resize可能会出现死锁。</p>
</li>
<li><p>HashMap除了数组之外还有一个是链表，链表是解决解决HashMap的中hashcode取模以后的碰撞问题，正常的hashcode的范围很大，碰撞的几率很小但数组没有那么大的空间，对内存占用太大；要在为hashcode取模，由于取余会导致hashcode碰撞，为避免之前数组的数据被覆盖。HashMap在数组后面添加了列表，来解决这个问题。在JDK8以后当链表长度超过8以后就会被替换成一个红黑树，这样可以提高查找和插入效率。</p>
<p> <img src="/img/hashMap/hashMap-01.png" alt=""></p>
</li>
</ul>
<h5 id="HashMap是如何设计的"><a href="#HashMap是如何设计的" class="headerlink" title="HashMap是如何设计的"></a>HashMap是如何设计的</h5><p>HashMap是实现了Map接口、允许null键/值、非同步、不保证有序(比如插入的顺序)、也不保证序不随时间变化。在HashMap中有两个很重要的参数，容量(Capacity)和负载因子(Load factor)。Capacity就是buckets的数目，loadFactor就是哈希桶(就是数组)填满程度的最大比例。如果对迭代性能要求很高的话不要把Capacity设置过大，也不要把loadFactor设置过小。当哈希桶填充的数目（即HashMap中元素的个数）大于Capacity*loadFactor时就需要调整哈希桶的数目为当前的2倍也就是扩容，可能和上面的有些重复。</p>
<p>计算Hash值，根据Hash值计算哈希桶中数组的位置。由于HashMap使用数组+链表的方式实现，所以能否快速计算Hash值和根据Hash值找到元素的位置很重要。下面就是Hash值是如何计算的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//方法一,JDK1.7和1.8</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;   </div><div class="line">     <span class="keyword">int</span> h;</div><div class="line">     <span class="comment">//第一步 取hashCode值 h = key.hashCode() </span></div><div class="line">     <span class="comment">//第二步 高位参与运算 h ^ (h &gt;&gt;&gt; 16) ，减少hashCode的大小，计算hash值</span></div><div class="line">     <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//方法二：jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的。没有单独抽出来</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;  </div><div class="line">     <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);  <span class="comment">//第三步 取模运算，获取数组下标</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的Hash算法本质上就是三步：取key的hashCode值、高位运算、取模运算。</p>
<p>对于任意给定的对象，只要它的hashCode()返回值相同，那么程序调用方法一所计算得到的Hash码值总是相同的。我们首先想到的就是把hash值对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，模运算的消耗还是比较大的，在HashMap中是这样做的：调用方法二来计算该对象应该保存在table数组的哪个索引处。</p>
<p>这个方法非常巧妙，它通过h &amp; (table.length -1)来得到该对象的保存位（数组的下标），而HashMap底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当length总是2的n次方时，<strong>h&amp; (length-1)运算等价于对length取模，也就是h%length，但是&amp;比%具有更高的效率</strong>。但是hash值也就与数组的大小相关，所以每次resize的时候要重新进行Hash。所以链表和树都会被改变，resize是一个不小的开销（for循环套do-while循环），而且多线程下会出现并发问题。</p>
<p>在JDK1.8的实现中，优化了高位运算的算法，通过<strong>hashCode()的高16位异或低16位</strong>实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。</p>
<p><img src="/img/hashMap/hashMap哈希算法例图.png" alt=""></p>
<h5 id="HashMap是如何实现的"><a href="#HashMap是如何实现的" class="headerlink" title="HashMap是如何实现的"></a>HashMap是如何实现的</h5><p>首先看一下HashMap中的变量和他们的用途。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//HashMap默认初始化大小，大小为16。它一定的2的倍数，这里使用位运算实现的，1左移4位</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></div><div class="line"></div><div class="line"> </div><div class="line"><span class="comment">//HashMap容量的最大值2的30次方。如果想指定更高的值可以通过构造函数指定。容量是2的背时</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</div><div class="line"></div><div class="line"> </div><div class="line"><span class="comment">//默认的负载因子，如果不在构造函数中指定，为了防止HashMap冲突，数组内不是全部使用，而是使用一部分。</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</div><div class="line"></div><div class="line"><span class="comment">//从链表转换成红黑数的阈值，当链表长度长度为8同时MIN_TREEIFY_CAPACITY大于64时，就会将冲突的链表升级红黑树。</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</div><div class="line"></div><div class="line"><span class="comment">//将红黑树转化成链表的阈值。同时hashMap的容量应该小于TREEIFY_THRESHOLD（64）。</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>;</div><div class="line"></div><div class="line"> 	<span class="comment">// 树化的最小容量64，也就是当HashMap的容量小于64时不进行树化（将链表转换成红树）</span></div><div class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_TREEIFY_CAPACITY = <span class="number">64</span>;</div><div class="line"></div><div class="line"><span class="comment">//哈希桶（Node的数组），用于存放链表。它会随着数据量的增加去扩容。它的大小一般是2的n次方，同时不参与序列化   （transient，表示不被序列化）</span></div><div class="line">   <span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</div><div class="line"></div><div class="line"><span class="comment">//entry是存放key和Value的基本对象，这个一个set，一般会在遍历时候用到。根据它获取keySet和values</span></div><div class="line">   <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</div><div class="line"></div><div class="line">   <span class="comment">//哈希表中的大小，存放了多少数据</span></div><div class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> size;</div><div class="line"></div><div class="line"><span class="comment">//这个HashMap被结构化修改的次数。结构化修改例如resize。这个参数一般是来用于实现HashMap 迭代器的fail-fast机制的，一般和并发相关。例如HashMap不能循环读取的时候插入数据。会抛出ConcurrentModificationException</span></div><div class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</div><div class="line"></div><div class="line">   <span class="comment">//哈希表内元素数量的阈值，当哈希表内元素数量超过阈值时，会发生扩容resize()。threshold=</span></div><div class="line">   <span class="keyword">int</span> threshold;</div></pre></td></tr></table></figure>
<p>HashMap的基本构造函数，根据HashMap的参数来构造hashMap。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">  <span class="comment">// HashMap的构造函数，initialCapacity用于指定初始化容量，loadFactor用于指定负载因子，也就是数组的最大使用率</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">    	<span class="comment">//如果初始化大小小于0，抛出非法参数异常异常（边界处理）</span></div><div class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</div><div class="line">                                               initialCapacity);</div><div class="line">    	<span class="comment">//如果最初始化的容量比默认的最大容量大，那就指定最大容量为初始化容量。否则最大容量是默认最大容量</span></div><div class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</div><div class="line">            initialCapacity = MAXIMUM_CAPACITY;</div><div class="line">    	<span class="comment">// 判断负载因子是大于0，是小数（浮点数）	</span></div><div class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</div><div class="line">                                               loadFactor);</div><div class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;<span class="comment">//通过上面的判断后赋值</span></div><div class="line">        <span class="keyword">this</span>.threshold = tableSizeFor(initialCapacity);<span class="comment">//根据初始化容量获取阈值，HashMap的数组大小。数组大小一定是2的倍数。</span></div><div class="line">    &#125;</div><div class="line">  <span class="comment">//指定初始化容量，使用默认的负载因子也就是0.75f</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</div><div class="line">    &#125;</div><div class="line"> <span class="comment">//使用默认的初始化容量16。和默认的负载因子0.75f</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></div><div class="line">    &#125;</div><div class="line"><span class="comment">//通过一个Map，生成一个Hashmap,使用默认的负载因子0.75f</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</div><div class="line">        putMapEntries(m, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line"> <span class="comment">//根据期望容量cap，返回2的n次方形式的 哈希桶的实际容量 length。 返回值一般会&gt;=cap </span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tableSizeFor</span><span class="params">(<span class="keyword">int</span> cap)</span> </span>&#123;</div><div class="line">      	<span class="comment">//经过下面的 或 和位移 运算， n最终各位都是1。</span></div><div class="line">        <span class="keyword">int</span> n = cap - <span class="number">1</span>;</div><div class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</div><div class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</div><div class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</div><div class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</div><div class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</div><div class="line">      	<span class="comment">//查看是否越界，例如把11111 + 1 变成 100000 。返回哈希桶的阈值</span></div><div class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//Map加入表中。参数m是要加入的Map，参数evict.一般会在resize和构造HashMap的时候用到</span></div><div class="line"> <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="keyword">boolean</span> evict)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> s = m.size();<span class="comment">//获取m的大小</span></div><div class="line">        <span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123; <span class="comment">//如果s&lt;0就不用操作了</span></div><div class="line">            <span class="keyword">if</span> (table == <span class="keyword">null</span>) &#123; <span class="comment">// pre-size</span></div><div class="line">                <span class="keyword">float</span> ft = ((<span class="keyword">float</span>)s / loadFactor) + <span class="number">1.0F</span>;<span class="comment">//根据m的元素数量和当前表的加载因子，计算出阈值。就是threshold. s除以loadFactor就是，哈希表的新容量。</span></div><div class="line">                <span class="comment">//如果新容量小于最大容量，就是新容量，否则就是最大容量。</span></div><div class="line">                <span class="keyword">int</span> t = ((ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY) ?</div><div class="line">                         (<span class="keyword">int</span>)ft : MAXIMUM_CAPACITY);</div><div class="line">                <span class="keyword">if</span> (t &gt; threshold)<span class="comment">//t相当于initialCapacity</span></div><div class="line">                    threshold = tableSizeFor(t);<span class="comment">//根据t获取获取阈值</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)<span class="comment">//如果map的size大于生成的阈值，扩容</span></div><div class="line">                resize(); </div><div class="line">          	<span class="comment">//循环把Map中的Key和Value放到HashMap中去</span></div><div class="line">            <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) &#123;</div><div class="line">                K key = e.getKey();</div><div class="line">                V value = e.getValue();</div><div class="line">                putVal(hash(key), key, value, <span class="keyword">false</span>, evict);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>HashMap中常用的内部类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//这个类是HashMap中的基本类。实现了Map的Entry，下面还有TreeNode类。Hash表（哈希桶）指定就是Node的数组，里面是一个单向链表。从Node的数据结构也能看出来。</span></div><div class="line">   <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">int</span> hash;<span class="comment">//存放hashcode</span></div><div class="line">       <span class="keyword">final</span> K key; <span class="comment">//存放Key值</span></div><div class="line">       V value; <span class="comment">//c存放Value值</span></div><div class="line">       Node&lt;K,V&gt; next; <span class="comment">//存放冲突后下一个node节点的地址。（这是个链表）</span></div><div class="line">	<span class="comment">//Node的构造函数</span></div><div class="line">       Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class="line">           <span class="keyword">this</span>.hash = hash;</div><div class="line">           <span class="keyword">this</span>.key = key;</div><div class="line">           <span class="keyword">this</span>.value = value;</div><div class="line">           <span class="keyword">this</span>.next = next;</div><div class="line">       &#125;</div><div class="line">	<span class="comment">//重写set方法，get方法，equals方法，hashCode方法。</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span>        </span>&#123; <span class="keyword">return</span> key; &#125;</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span>      </span>&#123; <span class="keyword">return</span> value; &#125;</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> key + <span class="string">"="</span> + value; &#125;</div><div class="line">	<span class="comment">//获取hashcode，是根据Key和Value的hashcode值</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);</div><div class="line">       &#125;</div><div class="line">	<span class="comment">//这个set方法是有返回值的，把之前的值返回出来了，而不是直接覆盖掉</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;</div><div class="line">           V oldValue = value;</div><div class="line">           value = newValue;</div><div class="line">           <span class="keyword">return</span> oldValue;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">           <span class="keyword">if</span> (o == <span class="keyword">this</span>)</div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">           <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Map.Entry) &#123;</div><div class="line">               Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;</div><div class="line">               <span class="keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;</div><div class="line">                   Objects.equals(value, e.getValue()))</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>HashMap中比较关键的方法</p>
<ul>
<li>resize方法是初始化哈希桶或者扩容哈希桶的大小，扩容一般就是加倍（doubles table size），如果是当前哈希桶是null,分配符合当前阈值的初始容量目标。否则，因为我们扩容成以前的两倍。同时把冲突的在链表或者树上的值取出来重新在放到哈希桶里index为原来位置+oldCap，这个过程叫rehash。 元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</li>
</ul>
<p><img src="/img/hashMap/hashMap 1.8 哈希算法例图2.png" alt=""></p>
<ul>
<li>图（a）表示扩容前的key1和key2两种key确定索引位置的示例，图（b）表示扩容后key1和key2两种key确定索引位置的示例，其中hash1是key1对应的哈希与高位运算结果。n为hash表的长度</li>
</ul>
<p><img src="/img/hashMap/hashMap 1.8 哈希算法例图1.png" alt=""></p>
<ul>
<li>Hash表的扩容的具体过程。</li>
</ul>
<p><img src="/img/hashMap/jdk1.8 hashMap扩容例图.png" alt=""></p>
<p>因此，我们在扩充HashMap的时候，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的哈希桶。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//返回对象是一个Node数组，也就是个哈希桶；</span></div><div class="line">   <span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</div><div class="line">     	<span class="comment">//把当前哈希桶设置成旧哈希桶。</span></div><div class="line">       Node&lt;K,V&gt;[] oldTab = table;</div><div class="line">     	<span class="comment">//如果旧哈希桶（也就是当前的哈希桶）是null，长度为0，否则获取旧哈希桶的长度，也就是容量。</span></div><div class="line">       <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</div><div class="line">       <span class="keyword">int</span> oldThr = threshold;<span class="comment">//获取旧哈希桶的阈值。也就是当前的哈希桶的阈值</span></div><div class="line">       <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;<span class="comment">//设置新哈希桶的阈值和容量为0。</span></div><div class="line">       <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;<span class="comment">//如果旧哈希桶的容量大于0说明是扩容，否则是创建哈希桶</span></div><div class="line">           <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;<span class="comment">//如果旧哈希桶的容量大于等于最大容量()</span></div><div class="line">               threshold = Integer.MAX_VALUE; <span class="comment">//把阈值设置成integer最大值</span></div><div class="line">               <span class="keyword">return</span> oldTab;<span class="comment">//直接返回旧哈希桶，说明不能在扩容。已经到了最大限度</span></div><div class="line">           &#125;</div><div class="line">         	<span class="comment">//1、新哈希桶的容量等于旧哈希桶容量的2倍，因为是左移1为2进制。</span></div><div class="line">         	<span class="comment">//2、扩容后新哈希桶的容量是否小于最大的容量同时旧哈希的容量大于等于默认容量16。</span></div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</div><div class="line">                    oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</div><div class="line">               newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// 阈值也要double。</span></div><div class="line">       &#125;</div><div class="line">     	<span class="comment">//如果当前表是空的，但是有阈值。代表是初始化时指定了容量、阈值的情况</span></div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// initial capacity was placed in threshold</span></div><div class="line">           newCap = oldThr;<span class="comment">//那么新表的容量就等于旧的阈值</span></div><div class="line">       <span class="keyword">else</span> &#123;               <span class="comment">// zero initial threshold signifies using defaults</span></div><div class="line">        	<span class="comment">// 如果当前表是空的,默认初始化Hash表(新建的hashMap)。使用默认的16个和0.75f的负载因子</span></div><div class="line">           newCap = DEFAULT_INITIAL_CAPACITY; </div><div class="line">           newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;<span class="comment">//如果新的阈值是0，对应的是当前表是空的，但是有阈值的情况</span></div><div class="line">           <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;<span class="comment">//根据新表容量 和 加载因子 求出新的阈值</span></div><div class="line">           newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</div><div class="line">                     (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);  <span class="comment">//进行越界修复</span></div><div class="line">       &#125;</div><div class="line">       threshold = newThr;<span class="comment">//把新哈希桶阈值值给当前阈值</span></div><div class="line">       <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</div><div class="line">           Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap]; <span class="comment">//根据新hash表的变量，创建一个新哈希桶</span></div><div class="line">       table = newTab;  <span class="comment">//当前哈希桶等于新哈希桶</span></div><div class="line">     	<span class="comment">//从旧的哈希桶里面迁移数据。</span></div><div class="line">       <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;<span class="comment">//如果旧的hash表不为空，迁移数据</span></div><div class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123; <span class="comment">//根据旧哈希桶的容量去循环。rehash操做</span></div><div class="line">               Node&lt;K,V&gt; e; <span class="comment">//临时获取数组中对象</span></div><div class="line">               <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123; <span class="comment">//如果桶中的对象不为空，把对象赋值给e</span></div><div class="line">                   oldTab[j] = <span class="keyword">null</span>;<span class="comment">//清空这个对象，等待GC</span></div><div class="line">                   <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)<span class="comment">//如果当前对象没有next说明后面没有冲突的链表</span></div><div class="line">                      <span class="comment">//根据e之前的哈希值和新容量，来获取数组下标的值，并把e放进去</span></div><div class="line">                       newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</div><div class="line">                   <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode) </div><div class="line">                       <span class="comment">//如果e的类是TreeNode的话，将e强转成TreeNode然后把值插入进去</span></div><div class="line">                       ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</div><div class="line">               <span class="comment">//如果发生过哈希碰撞，节点数小于8个。则要根据链表上每个节点的哈希值，依次放入新哈希桶对应下标置。</span></div><div class="line">                   <span class="keyword">else</span> &#123; <span class="comment">// preserve order</span></div><div class="line">                     	<span class="comment">//原索引 Node链表的头和尾。</span></div><div class="line">                       Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</div><div class="line">                     	<span class="comment">//原索引+oldCap Node链表的头和尾。</span></div><div class="line">                       Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</div><div class="line">                       Node&lt;K,V&gt; next; <span class="comment">//用于获取链表下一个对象的临时变量。与while循环中的e=next实现循环链表</span></div><div class="line">                       <span class="keyword">do</span> &#123; <span class="comment">//for循环里面+do while循环效率很低</span></div><div class="line">                           next = e.next; <span class="comment">//链表的从头上面获取</span></div><div class="line">                           <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;<span class="comment">//原索引</span></div><div class="line">                               <span class="keyword">if</span> (loTail == <span class="keyword">null</span>) <span class="comment">//如果没有到链表的尾部，那么设置链表头和尾是一个</span></div><div class="line">                                   loHead = e; <span class="comment">//那么e就是链表的头</span></div><div class="line">                               <span class="keyword">else</span></div><div class="line">                                   loTail.next = e;<span class="comment">//在链表的尾部添加e。</span></div><div class="line">                               loTail = e;<span class="comment">//链表的尾部也设置成e，也就是最新加进来的e</span></div><div class="line">                           &#125; </div><div class="line">                           <span class="keyword">else</span> &#123; <span class="comment">//原索引+oldCap</span></div><div class="line">                               <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</div><div class="line">                                   hiHead = e;</div><div class="line">                               <span class="keyword">else</span></div><div class="line">                                   hiTail.next = e;</div><div class="line">                               hiTail = e;</div><div class="line">                           &#125;</div><div class="line">                       &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);<span class="comment">//e的next为null，链表只有一个值</span></div><div class="line">                     	<span class="comment">//如果原索引不为空，写到新哈希桶中原来的位置</span></div><div class="line">                       <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;</div><div class="line">                           loTail.next = <span class="keyword">null</span>;</div><div class="line">                           newTab[j] = loHead;</div><div class="line">                       &#125;</div><div class="line">                     	<span class="comment">//如果原索引+oldCap不为空，新哈希桶中原来的位置+oldCap</span></div><div class="line">                       <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;</div><div class="line">                           hiTail.next = <span class="keyword">null</span>;</div><div class="line">                           newTab[j + oldCap] = hiHead;</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">     	<span class="comment">//返回新的哈希表</span></div><div class="line">       <span class="keyword">return</span> newTab;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>putVal方法，向hash表里插入值。如果参数onlyIfAbsent是true，那么不会覆盖相同key的值value，evict用于LinkedHashMap，下面是putVal方法的执行流程图。</li>
</ul>
<p><img src="/img/hashMap/hashMap put方法执行流程图.png" alt=""></p>
<p>可以结合上面的图看一下对应的源码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//put方法向hash桶放入key和value</span></div><div class="line"> <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</div><div class="line">   	<span class="comment">//调用putVal方法，这里会覆盖key相同的值</span></div><div class="line">       <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line"> <span class="comment">// 参数hash是索引，key就是Map的key，Value是Map的value，onlyIfAbsent是否覆盖。evict用于LinkedHashMap</span></div><div class="line"> <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></div><div class="line">                  <span class="keyword">boolean</span> evict) &#123;</div><div class="line">   	<span class="comment">//tab Hash桶，p临时链表的节点，n为hash表的长度（数组长度），i临时的索引变量</span></div><div class="line">       Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</div><div class="line">       <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)<span class="comment">//如果hash表是空，或者hash桶的长度为0。</span></div><div class="line">           n = (tab = resize()).length;<span class="comment">//通过resize()方法创建一个hash桶，并获取桶的长度赋值给n</span></div><div class="line">       <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)<span class="comment">//计算index，也就是数组的值。如果没有值，则没发生冲突,同时获取原来tab数组对应节点上的Node对象</span></div><div class="line">           tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);<span class="comment">//直接插入数组中（哈希桶）</span></div><div class="line">       <span class="keyword">else</span> &#123;<span class="comment">//发生了冲突，即要插入数组下标位置已经有一个Node对象</span></div><div class="line">           Node&lt;K,V&gt; e; K k;<span class="comment">//临时Node对象和key值。同时用于循环链表</span></div><div class="line">         	<span class="comment">//p是原来节点对象，判断新增对象和原来对象是否一样，hash值是否相等，key值是否相等</span></div><div class="line">           <span class="keyword">if</span> (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">               e = p;<span class="comment">// 如果相等,表明该key为当前节点的第一个,将原值设置为当前 e 对象</span></div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode) <span class="comment">//如果p节点是tree节点，用红黑树的方式。</span></div><div class="line">               e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);<span class="comment">//把值放入到树里面</span></div><div class="line">           <span class="keyword">else</span> &#123;<span class="comment">//如果是链表，为链表处理的方式，binCount指的是这个链表的长度</span></div><div class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;<span class="comment">//这是个死循环，没有结束条件，只有下面的break跳出</span></div><div class="line">                   <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;<span class="comment">//判断p节点后面有没有其他节点，即第一个冲突的。同时e被赋值next对象</span></div><div class="line">                       p.next = newNode(hash, key, value, <span class="keyword">null</span>);<span class="comment">//如果没有直插入新节点</span></div><div class="line">                       <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// 判断hash列表是否需要树化，如果大于7也就是8个，从0开始算</span></div><div class="line">                           treeifyBin(tab, hash);<span class="comment">//将在tab中，同样hash值的对象树化。for循环套do-while循环</span></div><div class="line">                       <span class="keyword">break</span>;<span class="comment">//跳出循环</span></div><div class="line">                   &#125;</div><div class="line">                  <span class="comment">// 如果链表中存在该 key（key插入成功了）,因为已经将该节点赋值给 e,所以直接结束循环。等待下面的方法对值进行更新</span></div><div class="line">                   <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                       <span class="keyword">break</span>;</div><div class="line">                 	<span class="comment">//循环链表</span></div><div class="line">                   p = e;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">         	<span class="comment">//如果e不等null</span></div><div class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></div><div class="line">               V oldValue = e.value;<span class="comment">//把老的值取出来。</span></div><div class="line">               <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)<span class="comment">//onlyIfAbsent为false，覆盖相桶的key的value</span></div><div class="line">                   e.value = value;<span class="comment">//覆盖value</span></div><div class="line">               afterNodeAccess(e);<span class="comment">//在访问之后的hook函数，在LinkedHashMap中会用到。</span></div><div class="line">               <span class="keyword">return</span> oldValue; <span class="comment">//返回旧的值</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">       ++modCount;<span class="comment">//修改的次数加1。</span></div><div class="line">       <span class="keyword">if</span> (++size &gt; threshold)</div><div class="line">           resize();<span class="comment">//把size与阈值对比，如果大于resize扩容；</span></div><div class="line">       afterNodeInsertion(evict);<span class="comment">//用于LikedHashMap的hook函数。</span></div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">	<span class="comment">//创建一个非树结构的节点</span></div><div class="line">   <span class="function">Node&lt;K,V&gt; <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Node&lt;&gt;(hash, key, value, next);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">  <span class="comment">//树化哈希桶里面的节点，根据hash值</span></div><div class="line">  <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> hash)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> n, index; Node&lt;K,V&gt; e;<span class="comment">//是hash桶大小，index是数组下标，e是临时节点</span></div><div class="line">    	<span class="comment">//如果hash表是null（初始化哈希桶）或者tab的长度，小于最小树化的长度，就将扩容</span></div><div class="line">       <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</div><div class="line">           resize();<span class="comment">//只是扩容，什么都不做</span></div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;<span class="comment">//根据hash值，来获取链表的头节点。</span></div><div class="line">           TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>; <span class="comment">//创建红黑树节点</span></div><div class="line">           <span class="keyword">do</span> &#123;</div><div class="line">             	<span class="comment">//将Node节点替换成TreeNode的节点，即红黑树的属性</span></div><div class="line">               TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="keyword">null</span>);</div><div class="line">               <span class="keyword">if</span> (tl == <span class="keyword">null</span>) <span class="comment">//如果尾部是null</span></div><div class="line">                   hd = p;<span class="comment">//头就是p（hd==head）</span></div><div class="line">               <span class="keyword">else</span> &#123;</div><div class="line">                   p.prev = tl;<span class="comment">//设置设计p节点的前驱为之前的tail。treeNode节点继承LinkedHashMap.Entry。是双向的</span></div><div class="line">                   tl.next = p;<span class="comment">//尾部的next为p，也就是p是尾部。</span></div><div class="line">               &#125;</div><div class="line">               tl = p;<span class="comment">//设置尾部为p（tl==tail）</span></div><div class="line">           &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>); <span class="comment">//直到链表的next为空。同时把next值赋给e</span></div><div class="line">           <span class="keyword">if</span> ((tab[index] = hd) != <span class="keyword">null</span>)<span class="comment">//如果hash表中第一个元素不为空</span></div><div class="line">               hd.treeify(tab);<span class="comment">//把tab树化</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">//根据Node节点创建一个TreeNode节点。</span></div><div class="line">   <span class="function">TreeNode&lt;K,V&gt; <span class="title">replacementTreeNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">new</span> TreeNode&lt;&gt;(p.hash, p.key, p.value, next);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ul>
<li>getNode方法。根据key的hash值和key来获取元素（对象）。在HashMap中通过hash值可以快速定位到元素所在的位置，然后根据key(key是唯一的)来找出元素所在的链表位置（或者树的位置）。所以从某个角度讲HashMap也是一个空间换时间的一种数据结构。他通过存储key和key的Hash值来快速定位元素。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//根绝Key获取value</span></div><div class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; e;</div><div class="line">    	<span class="comment">//如果是null。返回null，如果有值返回值</span></div><div class="line">        <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//根据hash值和key获取存放数据的节点</span></div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;<span class="comment">//tab哈希桶，first 第一节点，n哈希桶的长度，k是key值</span></div><div class="line">  		<span class="comment">//哈希桶不等于空，哈希痛的长度大于0，隔绝hash值获取的第一个节点不为空 </span></div><div class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">            (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">          	<span class="comment">//如果第一个key和哈希值就给定的相配，直接返回</span></div><div class="line">            <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></div><div class="line">                ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                <span class="keyword">return</span> first;</div><div class="line">          	<span class="comment">//如果第一个对象，后面有值。</span></div><div class="line">            <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</div><div class="line">              	<span class="comment">//如果是红黑树节点，使用红黑树的获取办法</span></div><div class="line">                <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</div><div class="line">                    <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</div><div class="line">                <span class="keyword">do</span> &#123;<span class="comment">//不是的话，就循环链表来取出值，这里面用的do-while循环</span></div><div class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                        ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) <span class="comment">//如果hash值和key值都相等返回Node节点</span></div><div class="line">                        <span class="keyword">return</span> e;</div><div class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);<span class="comment">//循环直到e的next节点为null</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">  		<span class="comment">//否则返回null</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>removeNode，删除哈希桶里面的值。同时要判断是否要使用值匹配。但是默认的都是不匹配的，如果使用匹配找到key和value相同的才会删除，否则返回null；</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//删除一个元素节点，根据key值,返回元素节点的值</span></div><div class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; e;</div><div class="line">    	<span class="comment">//调用移除节点方法</span></div><div class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</div><div class="line">            <span class="keyword">null</span> : e.value;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//，根据Hash值，key，value，matchValue是否要匹配value值否则忽略，在删除节点后是否移动，如果不移动为false。</span></div><div class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></div><div class="line">                               <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable) &#123;</div><div class="line">  		<span class="comment">//声明使用的变量，如临时节点p，p节点一般都是哈希桶里的第一节点，哈希表的总长度n和下标index</span></div><div class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</div><div class="line">  		<span class="comment">//哈希桶不为空，长度大于0，根绝hash值获取节点不为空</span></div><div class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</div><div class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</div><div class="line">            Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;<span class="comment">//节点node和e，key和value</span></div><div class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</div><div class="line">                ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</div><div class="line">                node = p; <span class="comment">//如果key值和hash值相等不为null，就把赋值node</span></div><div class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;<span class="comment">//否者循环链表,或者是红黑树</span></div><div class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)<span class="comment">//获取树里面的节点</span></div><div class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">do</span> &#123;<span class="comment">//获取链表里的节点</span></div><div class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</div><div class="line">                            ((k = e.key) == key ||</div><div class="line">                             (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</div><div class="line">                            node = e;</div><div class="line">                            <span class="keyword">break</span>;</div><div class="line">                        &#125;</div><div class="line">                        p = e;</div><div class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">          	<span class="comment">//找到元素后删除，和链表和树的移动。1首先node节点不为null，同时判断value节点值问题。</span></div><div class="line">            <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</div><div class="line">                                 (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</div><div class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)<span class="comment">//如果是Tree节点，那么使用tree的操作,移除节点</span></div><div class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</div><div class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)<span class="comment">//如果是第一个节点。直接替换。</span></div><div class="line">                    tab[index] = node.next;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    p.next = node.next;<span class="comment">//设置node的next节点</span></div><div class="line">                ++modCount;<span class="comment">//操作数+1</span></div><div class="line">                --size;<span class="comment">//大小-1</span></div><div class="line">                afterNodeRemoval(node);<span class="comment">//hook 方法</span></div><div class="line">                <span class="keyword">return</span> node;<span class="comment">//返回node节点</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//清空HashMap里面的值</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt;[] tab;</div><div class="line">        modCount++; <span class="comment">//操作数+1</span></div><div class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123; <span class="comment">//如果哈希表不为空，循环取出哈希表里面的值</span></div><div class="line">            size = <span class="number">0</span>;<span class="comment">//设置HashMap大小为0</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; ++i)</div><div class="line">                tab[i] = <span class="keyword">null</span>;<span class="comment">//清空哈希桶里的数据，也就是清空数组</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="HashMap中线程安全问题"><a href="#HashMap中线程安全问题" class="headerlink" title="HashMap中线程安全问题"></a>HashMap中线程安全问题</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//hashMap中通过迭代器来获取，Map中的数据。通过迭代器前modCount与循环后modCount对比，如果不一样，抛出</span></div><div class="line"><span class="comment">//ConcurrentModificationException异常。来实现fast-fail机制</span></div><div class="line"><span class="comment">//迭代器，用于循环取出HashMap中的数据</span></div><div class="line">   <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span> </span>&#123;</div><div class="line">       Node&lt;K,V&gt; next;        <span class="comment">// next entry to return ，下一个entry</span></div><div class="line">       Node&lt;K,V&gt; current;     <span class="comment">// current entry，当前entry</span></div><div class="line">       <span class="keyword">int</span> expectedModCount;  <span class="comment">// for fast-fail，用于fast-fail的变量</span></div><div class="line">       <span class="keyword">int</span> index;             <span class="comment">// current slot，当前所在哈希桶的位置（数组下标）</span></div><div class="line">	</div><div class="line">     	<span class="comment">//默认的构造函数，构造HashMap的迭代器</span></div><div class="line">       HashIterator() &#123;</div><div class="line">           expectedModCount = modCount;<span class="comment">//期待的修改次数，使用当前hashMap的修改次数</span></div><div class="line">           Node&lt;K,V&gt;[] t = table;<span class="comment">//哈希桶</span></div><div class="line">           current = next = <span class="keyword">null</span>;<span class="comment">//初始化当前节点和next节点</span></div><div class="line">           index = <span class="number">0</span>;<span class="comment">//数组下标从0开始</span></div><div class="line">           <span class="keyword">if</span> (t != <span class="keyword">null</span> &amp;&amp; size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry,如果哈希桶不为空，size大于0</span></div><div class="line">             	<span class="comment">//找到第一个entry，如果next不为空，跳出循环。并把元素赋值给next，等于null继续找</span></div><div class="line">               <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">	<span class="comment">//时候还存在next</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span> next != <span class="keyword">null</span>;</div><div class="line">       &#125;</div><div class="line">	<span class="comment">//获取下一个Next节点</span></div><div class="line">       <span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">nextNode</span><span class="params">()</span> </span>&#123;</div><div class="line">           Node&lt;K,V&gt;[] t;</div><div class="line">           Node&lt;K,V&gt; e = next;</div><div class="line">           <span class="keyword">if</span> (modCount != expectedModCount)<span class="comment">//如果当前的修改次数不等于之前修改。也就是在这个过程HashMap发生修改。这里实现了fast-fail</span></div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();<span class="comment">//抛出异常</span></div><div class="line">           <span class="keyword">if</span> (e == <span class="keyword">null</span>)<span class="comment">//如果next节点为null，抛出没回这样元素的异常，一般在做循环的时候都会做判断</span></div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</div><div class="line">         		<span class="comment">//这里赋值e，同时把next也赋值。</span></div><div class="line">           <span class="keyword">if</span> ((next = (current = e).next) == <span class="keyword">null</span> &amp;&amp; (t = table) != <span class="keyword">null</span>) &#123;</div><div class="line">             	<span class="comment">//循环找到下一个元素</span></div><div class="line">               <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>);</div><div class="line">           &#125;</div><div class="line">         	<span class="comment">//返回当前节点</span></div><div class="line">           <span class="keyword">return</span> e;</div><div class="line">       &#125;</div><div class="line">	<span class="comment">//移除当前节点</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</div><div class="line">           Node&lt;K,V&gt; p = current;</div><div class="line">           <span class="keyword">if</span> (p == <span class="keyword">null</span>)<span class="comment">//如果当前节点是null抛出异常</span></div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</div><div class="line">           <span class="keyword">if</span> (modCount != expectedModCount)<span class="comment">//fast-fail机制</span></div><div class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</div><div class="line">           current = <span class="keyword">null</span>;</div><div class="line">         	<span class="comment">//根据key删除节点</span></div><div class="line">           K key = p.key;</div><div class="line">           removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</div><div class="line">           expectedModCount = modCount;<span class="comment">//同时更新操作次数</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>在多线程使用场景中，应该尽量避免使用线程不安全的HashMap，而使用线程安全的ConcurrentHashMap。那么为什么说HashMap是线程不安全的，因为在数据增加的时候会导致resize(扩容)，会导致链表上数据发生变化，容易在多线程情况下是很容易造成链表回路。在get的情况下造成死循环。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//死循环的例子</div><div class="line">public class HashMapInfiniteLoop &#123;  //基于jdk1.7</div><div class="line"></div><div class="line">    private static HashMap&lt;Integer,String&gt; map = new HashMap&lt;Integer,String&gt;(2，0.75f);  </div><div class="line">    public static void main(String[] args) &#123;  </div><div class="line">        map.put(5， "C");  </div><div class="line"></div><div class="line">        new Thread("Thread1") &#123;  </div><div class="line">            public void run() &#123;  </div><div class="line">                map.put(7, "B");  </div><div class="line">                System.out.println(map);  </div><div class="line">            &#125;;  </div><div class="line">        &#125;.start();  </div><div class="line">        new Thread("Thread2") &#123;  </div><div class="line">            public void run() &#123;  </div><div class="line">                map.put(3, "A);  </div><div class="line">                System.out.println(map);  </div><div class="line">            &#125;;  </div><div class="line">        &#125;.start();</div></pre></td></tr></table></figure>
<p>map初始化为一个长度为2的数组，loadFactor=0.75，threshold=2*0.75=1，也就是说当put第二个key的时候，map就需要进行resize。通过设置断点让线程1和线程2同时debug到transfer方法的首行。注意此时两个线程已经成功添加数据。放开thread1的断点至transfer方法的“Entry next = e.next;” 这一行；然后放开线程2的的断点，让线程2进行resize。结果如下图</p>
<p><img src="/img/hashMap/jdk1.7 hashMap死循环例图1.png" alt=""></p>
<p>注意，Thread1的 e 指向了key(3)，而next指向了key(7)，其在线程二rehash后，指向了线程二重组后的链表。线程一被调度回来执行，先是执行 newTalbe[i] = e， 然后是e = next，导致了e指向了key(7)，而下一次循环的next = e.next导致了next指向了key(3)。</p>
<p><img src="/img/hashMap/jdk1.7 hashMap死循环例图2.png" alt=""></p>
<p>e.next = newTable[i] 导致 key(3).next 指向了 key(7)。注意：此时的key(7).next 已经指向了key(3)， 环形链表就这样出现了</p>
<p><img src="/img/hashMap/jdk1.7 hashMap死循环例图4.png" alt=""></p>
<p>于是，当我们用线程一调用map.get(11)时，悲剧就出现了——Infinite Loop(无限循环)。</p>
<h5 id="HashMap与HashTable-的区别"><a href="#HashMap与HashTable-的区别" class="headerlink" title="HashMap与HashTable 的区别"></a>HashMap与HashTable 的区别</h5><p>HashTable是线程安全的，且不允许key、value是null。HashTable默认容量是11。</p>
<p>HashTable是直接使用key的hashCode(key.hashCode())作为hash值，不像HashMap内部使用static final int hash(Object key)获取hash值。</p>
<p>HashTable取哈希桶下标是直接用模运算%.（因为其默认容量也不是2的n次方。所以也无法用位运算替代模运算）</p>
<p>扩容时，新容量是原来的2倍+1。int newCapacity = (oldCapacity &lt;&lt; 1) + 1;</p>
<p>Hashtable是Dictionary的子类同时也实现了Map接口，HashMap是Map接口的一个实现类；</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="http://blog.csdn.net/zxt0601/article/details/77413921" target="_blank" rel="external">HashMap源码解析（JDK8）</a></p>
<p><a href="https://tech.meituan.com/java-hashmap.html" target="_blank" rel="external">Java 8系列之重新认识HashMap</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;回顾&quot;&gt;&lt;a href=&quot;#回顾&quot; class=&quot;headerlink&quot; title=&quot;回顾&quot;&gt;&lt;/a&gt;回顾&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;之前写过一篇关于&lt;a href=&quot;https://blog.51cloud.win/2017/05/14/HashMap/
    
    </summary>
    
      <category term="源代码" scheme="http://yoursite.com/categories/%E6%BA%90%E4%BB%A3%E7%A0%81/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="HashMap" scheme="http://yoursite.com/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>浅析Java线程池源码</title>
    <link href="http://yoursite.com/2018/02/26/%E6%B5%85%E6%9E%90Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2018/02/26/浅析Java线程池源码/</id>
    <published>2018-02-26T01:21:08.000Z</published>
    <updated>2018-02-28T12:06:06.371Z</updated>
    
    <content type="html"><![CDATA[<h5 id="什么是线程池"><a href="#什么是线程池" class="headerlink" title="什么是线程池"></a>什么是线程池</h5><p>线程池顾名思义，就是有很多线程的一个池子，这里面有多少线程，是要根据你要业务需求来确定；它方便你线程的创建和使用，不需要频繁的创建线程资源使得，线程资源充分的得到利用。所以和数据库链接池类似，线程池的作用就是<strong>充分利用资源，提高相应速度，增加系统的吞吐率同时方便管理和监控线程池中线程使用情况，实现对程序的优化</strong>。当添加的到线程池中的任务超过它的容量时，会有一部分任务阻塞等待。当等待任务超过阻塞队列大小，线程池会通过相应的调度策略和拒绝策略，对添加到线程池中的线程进行管理。</p>
<h5 id="线程池解决什么问题"><a href="#线程池解决什么问题" class="headerlink" title="线程池解决什么问题"></a>线程池解决什么问题</h5><p>多线程技术主要解决处理器单元内多个线程执行的问题，它可以显著减少处理器单元的闲置时间，增加处理器单元的吞吐能力。    </p>
<p>假设一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间。</p>
<p> 如果：T1 + T3 远大于 T2，则可以采用线程池，以提高服务器性能。</p>
<p>一个线程池包括以下<strong>四个基本组成部分</strong>：</p>
<p>1、<strong>线程池管理器</strong>（ThreadPool）：用于创建并管理线程池，包括 创建线程池，销毁线程池，添加新任务；</p>
<p>2、<strong>工作线程</strong>（PoolWorker）：线程池中线程，在没有任务时处于等待状态，可以循环的执行任务；</p>
<p>3、<strong>任务接口</strong>（Task）：每个任务必须实现的接口，以供工作线程调度任务的执行，它主要规定了任务的入口，任务执行完后的收尾工作，任务的执行状态等；  </p>
<p>4、<strong>任务队列</strong>（taskQueue）：用于存放没有处理的任务。提供一种缓冲机制。</p>
<p> <strong>线程池技术正是关注如何缩短或调整T1,T3时间的技术，从而提高服务器程序性能的。它把T1，T3分别安排在服务器程序的启动和结束的时间段或者一些空闲的时间段，这样在服务器程序处理客户请求时，不会有T1，T3的开销了。</strong></p>
<p>线程池不仅调整T1,T3产生的时间段，而且它还显著减少了创建线程的数目，看一个例子：<br>假设一个服务器一天要处理50000个请求，并且每个请求需要一个单独的线程完成。在线程池中，线程数一般是固定的，所以产生线程总数不会超过线程池中线程的数目，而如果服务器不利用线程池来处理这些请求则线程总数为50000。一般线程池大小是远小于50000。所以利用线程池的服务器程序不会为了创建50000而在处理请求时浪费时间，从而提高效率。</p>
<h5 id="线程池如何设计的"><a href="#线程池如何设计的" class="headerlink" title="线程池如何设计的"></a>线程池如何设计的</h5><ul>
<li><p><strong>Core and maximum pool sizes</strong> （ThreadPoolExecutor会根据corePoolSize以及maximumPoolSize的边界自动的调整线程池的大小。）</p>
<p>1、当通过execute(Runnable)提交任务时，而且<strong>正在运行的线程数少于corePoolSize</strong>，即使其他线程处于空闲状态，也会创建一个新的线程执行这个任务；</p>
<p>2、如果有<strong>大于corePoolSize但是小于maximumPoolSize</strong>数量的线程正在运行，则新提交的任务会放进workQueue进行任务缓存，但是<strong>如果workQueue已满</strong>，则会<strong>直接创建线程执行</strong>，但是如果<strong>创建的线程数大于maximum pool sizes的时候将拒绝任务</strong>。<br>3、<strong>当corePoolSize和maximumPoolSize </strong>相等时则会创建固定数量的线程池</p>
<p>4、<strong>将maximumPoolSize 设置为无边界的</strong>，比如整数的最大值，则意味着线程数和任务数量一致，也就没有等待的任务<br>5、corePoolSize、maximumPoolSize可以根据实际需求通过构造器设置，也可以动态的在运行时设置。</p>
</li>
<li><p><strong>On-demand construction</strong> （按照需求构造线程）<br>1、默认情况下，每一个核心线程只有当有新任务到来时才会初始化创建，并执行<br>2、但是可以在运行时可以通过prestartCoreThread(一个coreThread)或者prestartAllCoreThreads(全部coreThread)来提前创建并运行指定的核心线程，这种需求适用于初始化线程池时，任务队列初始不为空的情况下。</p>
</li>
<li><p><strong>Creating new threads</strong> （创建一个新的线程）</p>
<p>1、创建线程是通过<strong>ThreadFactory</strong>。除非特别的设定，否则默认使用Executors.defaultThreadFactory作为线程池，这个线程池创建的所有线程都有相同的线程组，线程优先级，非守护线程的标志<br>2、通过应用不同的线程池，可以更改线程的名字，线程组，优先级，守护标志等等<br>3、当通过<strong>newThread()</strong>调用线程池创建线程池失败时，返回null，此时执行器会继续运行，但是可能处理不了任何任务</p>
<p>4、线程需要处理”modifyThread” RuntimePermission，对线程修改进行运行时权限检查。如果使用这个线程池的工作线程或者其他线程没有处理这个认证”permission”则会使服务降级：对于线程池的所有设置都不会及时的生效，一个已经关闭的线程池可能还会处于一种线程池终止没有完成的状态</p>
</li>
<li><p><strong>Keep-alive times</strong> (空闲的线程存活时间)</p>
<p>1、当这个线程池此时含有多余corePoolSize的线程存在，则多余的线程在空闲了超过keepAliveTime的时间将会被终止<br>2、这提供了一种减少空闲线程从而降低系统线程资源损耗的方法，还可以通过setKeepAliveTime进行动态设置<br>3、<strong>默认情况下，keep-alive policy只对超出corePoolSize的线程起作用</strong>，但是可以通过方法<strong>allowCoreThreadTimeOut(boolean)</strong>将空闲超时策略同样应用于coreThread，但是要保证超时时间不为0值。</p>
</li>
<li><p><strong>Queue</strong> （阻塞队列，任何BlockingQueue都可以被用来容纳和传递提交的任务）</p>
<p>1、如果正在运行的线程小于corePoolSize，则executor会新增一个线程而不是将任务入队<br>2、如果正在运行的线程大于corePoolSize但是小于maximumPoolSize，executor则会将任务入队，而不是创建一个线程<br>3、如果任务不能入队（队列已满），则在没有超出maximumPoolSize的情况下创建一个新的线程，否则某种拒绝策略拒绝这个任务。</p>
</li>
<li><p><strong>three general strategies for queuing</strong>  （三种入队策略）<br>1、<strong>Direct handoffs：直接传递</strong>。比如 <strong>synchronousQueue</strong>，这个队列比较特殊，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。<br>2、<strong>Unbounded queues：无界队列。</strong>比如 没有指定容量的<strong>LinkedBlockingQueue</strong>，这将会使coreThread一直工作，而且由于任务总能入队，所以也不会创建其他超过corePoolSize的线程。用于所有任务完全独立，不相关，比如平滑瞬间高并发web页面的请求等，其实相当于异步框架了<br>3、<strong>Bounded queues：有界队列。</strong> 比如<strong>ArrayBlockingQueue</strong>，有助于在设置有限大的maximumPoolSizes时，阻止造成系统资源的枯竭。队列大小和最大池大小可能需要相互折衷：使用<strong>大队列和小池最大限度地减少CPU的使用，操作系统资源，和上下文切换开销，但可能会导致人为的低吞吐量</strong>。<strong>如果任务经常被阻塞（例如，如果它们是I/O绑定），系统可能比你允许的时间安排更多线程的时间</strong>。使用<strong>小队列通常需要更大的池大小，这使得CPU繁忙，但可能会遇到不可接受的调度开销，这也降低吞吐量  </strong></p>
</li>
<li><p><strong>Rejected tasks</strong> （拒绝任务）</p>
<p>当提交一个新任务时，如果Executor已经关闭或者有限的workQueue，maximumPoolSizes，并且他们已经饱和了，只要出现其中一种情况都会被拒绝。有四种已经定义的处理策略。也可以继承RejectedExecutionHandler自定义实现</p>
</li>
<li><p><strong>Hook methods</strong> （钩子方法，提供在每个任务执行时不同阶段执行不同的处理函数）</p>
<p>1、<strong>protected void beforeExecute(Thread t, Runnable r)：</strong>优先使用指定的线程处理给定的任务，并在任务执行前做一些处理（如设置ThreadLocal变量或者记录一些日志等），t为执行r任务的线程，r为提交的任务。</p>
<p>2、<strong>protected void afterExecute(Runnable r, Throwable t)：</strong>任务执行完成时处理。r为执行完的任务，t为指定的造成任务终止的异常，如果设置为null则执行会正常完成，不会抛出异常</p>
<p>3、<strong>protected void terminated()</strong>当Executor终止时，被调用一次</p>
<p><strong>以上三个方法都为空方法</strong>，使用者自行实现。在进行多层嵌套时都要显示调用 <strong>super.method()</strong> 完成上层的处理函数。如果在调用方法时发生异常，则内部的工作线程可能会依次失败，突然终止。</p>
<p>可以继承ThreadPoolExecute，并实现上述几个Hook方法来检测线程池的状态，自定义自己的线程池，如监控任务的平均、最大、最小执行时间，来发现有没有一致阻塞的线程任务。</p>
</li>
</ul>
<h5 id="线程池是如何实现的"><a href="#线程池是如何实现的" class="headerlink" title="线程池是如何实现的"></a>线程池是如何实现的</h5><p>在Java中线程池使用ThreadPoolExecutor这类去实现了，它里面封装了线程池的相关属性和创建线程池的基本方法。下面我们就来简单看一下源代码，简答的分析一波</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">   <span class="comment">/* 这些是Java线程池中阶一些基本变量和简单方法*/</span></div><div class="line"><span class="comment">//用来存储工作线程数和工作状态，初始化状态和数量，状态为RUNNING，线程数为0</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</div><div class="line"><span class="comment">//用来计数工作线程数。workerCount的最大为2^29 -1。这里Java中Integer是32位</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</div><div class="line"><span class="comment">//这里取得后29位，也就是线程池的容量</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</div><div class="line"></div><div class="line">   <span class="comment">// runState is stored in the high-order bits(线程池的运行状态是存储在高3位)</span></div><div class="line">   <span class="comment">//可以接受新的任务，也可以处理阻塞队列里的任务</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</div><div class="line"><span class="comment">//b不可以接受新的任务，可以处理阻塞队列里的任务</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</div><div class="line"><span class="comment">//不接受新的任务，不处理阻塞队列里的任务，中断正在处理的任务</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</div><div class="line"><span class="comment">//过渡状态，也就是说所有的任务都执行完了，当前线程池已经没有有效的线程，这个时候线程池的状态将会TIDYING，并且将要调用terminated方法</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</div><div class="line"><span class="comment">//终止状态。terminated方法调用完成以后的状态</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</div><div class="line"></div><div class="line">   <span class="comment">// Packing and unpacking ctl (打包和拆包ctl变量，也就是获取存储工作线程数和工作状态的变量和把工作状态和线程数转化成ctl)这里都是通过位运算实现的。</span></div><div class="line"><span class="comment">//获取线程池的运行状态,根据ctl。CAPACITY的非操作得到的二进制位11100000000000000000000000000000，然后做在一个与操作，相当于直接取前3位的的值</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</div><div class="line"><span class="comment">//获取工作的线程数，根据ctl。也就是后29位的数字。 直接跟CAPACITY做一个与操作即可，CAPACITY就是的值就 1 &lt;&lt; 29 - 1 = 00011111111111111111111111111111。 与操作的话前面3位肯定为0，相当于直接取后29位的值</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</div><div class="line"><span class="comment">//根据运行状态和工作线程数获取ctl。或操作</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</div><div class="line"></div><div class="line"><span class="comment">//不需要拆包的去访问变量，这些状态依赖runState</span></div><div class="line">   <span class="comment">/*</span></div><div class="line">    * Bit field accessors that don't require unpacking ctl.</div><div class="line">    * These depend on the bit layout and on workerCount being never negative.</div><div class="line">    */</div><div class="line"><span class="comment">//来判断两个运行状态的大小，运行状态越大，越接近停止。</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">runStateLessThan</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> c &lt; s;</div><div class="line">   &#125;</div><div class="line"><span class="comment">//来判断两个运行状态的大小</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">runStateAtLeast</span><span class="params">(<span class="keyword">int</span> c, <span class="keyword">int</span> s)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> c &gt;= s;</div><div class="line">   &#125;</div><div class="line"><span class="comment">//来判当前状态是否是运行状态</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRunning</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> c &lt; SHUTDOWN;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>线程池中使用<strong>AtomicInteger </strong>的CAS机制来实现对<strong>运行时状态以及工作线程计数的并发一致性操作</strong>，低29位（32-3）用来保存workerCount，所以workerCount的最大为2^29 -1 。高3位用来保存runState，这样实现具有较高效率，不用单独两次存储。</p>
<p><strong>RUNNING -&gt; SHUTDOWN</strong>：手动调用shutdown方法，或者ThreadPoolExecutor要被GC回收的时候调用finalize方法，finalize方法内部也会调用shutdown方法</p>
<p><strong>(RUNNING or SHUTDOWN) -&gt; STOP</strong>：调用shutdownNow方法</p>
<p><strong>SHUTDOWN -&gt; TIDYING</strong>：当队列和线程池都为空的时候</p>
<p><strong>STOP -&gt; TIDYING</strong>：当线程池为空的时候</p>
<p><strong>TIDYING -&gt; TERMINATED</strong>：terminated方法调用完成之后，ThreadPoolExecutor内部还保存着线程池的有效线程个数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line">    * Attempts to CAS-increment the workerCount field of ctl.</div><div class="line">    */</div><div class="line"><span class="comment">//尝试CAS-递增ctl的workerCount字段。</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">compareAndIncrementWorkerCount</span><span class="params">(<span class="keyword">int</span> expect)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> ctl.compareAndSet(expect, expect + <span class="number">1</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Attempts to CAS-decrement the workerCount field of ctl.</div><div class="line">    */</div><div class="line"><span class="comment">//尝试CAS-递减ctl的workerCount字段。</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">compareAndDecrementWorkerCount</span><span class="params">(<span class="keyword">int</span> expect)</span> </span>&#123;</div><div class="line">       <span class="keyword">return</span> ctl.compareAndSet(expect, expect - <span class="number">1</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * Decrements the workerCount field of ctl. This is called only on</div><div class="line">    * abrupt termination of a thread (see processWorkerExit). Other</div><div class="line">    * decrements are performed within getTask.</div><div class="line">    */</div><div class="line"><span class="comment">//减少ctl的workerCount字段的值，当一个线程因为异常退出的时候调用这个方法。其他的递减都在getTask方法里进行</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decrementWorkerCount</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">do</span> &#123;&#125; <span class="keyword">while</span> (! compareAndDecrementWorkerCount(ctl.get()));</div><div class="line">   &#125;</div><div class="line"></div><div class="line"><span class="comment">//缓存队列，是一个存放没有处理的任务。（也就是runnable接口中写的代码）</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> BlockingQueue&lt;Runnable&gt; workQueue;</div><div class="line"></div><div class="line"> 	<span class="comment">// 线程池主锁，用于访问worker线程集，还有其他关于线程池信息的记录信息（比如线程池大小，runState）</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">   <span class="comment">//工作线程集合，访问时需获取mainLock </span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> HashSet&lt;Worker&gt; workers = <span class="keyword">new</span> HashSet&lt;Worker&gt;();</div><div class="line"></div><div class="line">  <span class="comment">// mainLock上的终止条件量，用于支持awaitTermination</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> Condition termination = mainLock.newCondition();</div><div class="line">	<span class="comment">//记录线程最大的线程数，访问时需获取mainLock </span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> largestPoolSize;</div><div class="line">  <span class="comment">//记录已经完成的记录数，访问时需获取mainLock </span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">long</span> completedTaskCount;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 以下所有变量都为volatile类型的，以便能使所有操作都基于最新值 </div><div class="line">    * （因为这些值都可以通过对应的set方法，在运行时动态设置），</div><div class="line">    * 但是不需要获取锁，因为没有内部不变量依赖于它们与其他动作同步变化。</div><div class="line">    */ </div><div class="line"></div><div class="line">  <span class="comment">// 用于创建新线程的线程工厂</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> ThreadFactory threadFactory;</div><div class="line"></div><div class="line">  <span class="comment">//当线程池满了的时候，拒绝服务策略</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> RejectedExecutionHandler handler;</div><div class="line">  <span class="comment">//一个空闲线程，可以保持存活的最大时间。核心线程不算</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">long</span> keepAliveTime;</div><div class="line"></div><div class="line"><span class="comment">//默认是false，核心线程可以在空闲的时候存活，如果是true那么核心线程超时会关闭。</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> allowCoreThreadTimeOut;</div><div class="line"></div><div class="line"><span class="comment">//核心线程个数，如果allowCoreThreadTimeOut为false那么会一直存在，如果ture的话可能为0。最小</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> corePoolSize;</div><div class="line"></div><div class="line"><span class="comment">//线程池的最大线程数。它小于CAPACITY</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> maximumPoolSize;</div><div class="line"></div><div class="line">   <span class="comment">//设置默认的拒绝策略。</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RejectedExecutionHandler defaultHandler =</div><div class="line">       <span class="keyword">new</span> AbortPolicy();</div><div class="line"></div><div class="line"><span class="comment">// 对于调用线程池的shutdown(),shutdownNow()方法权限认证。用于保护线程安全的</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RuntimePermission shutdownPerm =</div><div class="line">       <span class="keyword">new</span> RuntimePermission(<span class="string">"modifyThread"</span>);</div></pre></td></tr></table></figure>
<p>线程池的几个构造函数，<strong>线程池中一共有7个参数。每个参数都代表这个不同的意义。corePoolSize核心线程的数量；maximumPoolSize线程池的最多线程数；keepAliveTime当一个线程在空闲时的存活时间（核心线程要看allowCoreThreadTimeOut参数）；TimeUnit时间单位多数是秒，也可以设置毫秒；workQueue缓冲队列（即线程池没有运行的任务队列）；threadFactory用于创建新线程的线程工厂；handler用于线程池在满负荷下的拒绝策略。可以使抛异常，也可是放弃任务等。</strong> 拒绝策略指的是由于超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用默认的线程工厂和，默认的拒绝策略生产线程池</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                             <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                             <span class="keyword">long</span> keepAliveTime,</div><div class="line">                             TimeUnit unit,</div><div class="line">                             BlockingQueue&lt;Runnable&gt; workQueue) &#123;</div><div class="line">     	<span class="comment">//调用构造函数</span></div><div class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">            Executors.defaultThreadFactory(), defaultHandler);</div><div class="line">   &#125;</div><div class="line"><span class="comment">//使用默认的拒绝策略，传入自定义线程工厂</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                             <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                             <span class="keyword">long</span> keepAliveTime,</div><div class="line">                             TimeUnit unit,</div><div class="line">                             BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">                             ThreadFactory threadFactory) &#123;</div><div class="line">     <span class="comment">//调用构造函数</span></div><div class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">            threadFactory, defaultHandler);</div><div class="line">   &#125;</div><div class="line"><span class="comment">//使用默认的线程工厂，使用其他拒绝策略</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                             <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                             <span class="keyword">long</span> keepAliveTime,</div><div class="line">                             TimeUnit unit,</div><div class="line">                             BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">                             RejectedExecutionHandler handler) &#123;</div><div class="line">       <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</div><div class="line">            Executors.defaultThreadFactory(), handler);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">  <span class="comment">//线程池的构造函数</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></div><div class="line">                             <span class="keyword">int</span> maximumPoolSize,</div><div class="line">                             <span class="keyword">long</span> keepAliveTime,</div><div class="line">                             TimeUnit unit,</div><div class="line">                             BlockingQueue&lt;Runnable&gt; workQueue,</div><div class="line">                             ThreadFactory threadFactory,</div><div class="line">                             RejectedExecutionHandler handler) &#123;</div><div class="line">     	<span class="comment">//如果核心线程数小于0，最大线程数小于等于0，最大线程数小于核心线程数，超时时间小于0会抛出非法参数异常</span></div><div class="line">       <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</div><div class="line">           maximumPoolSize &lt;= <span class="number">0</span> ||</div><div class="line">           maximumPoolSize &lt; corePoolSize ||</div><div class="line">           keepAliveTime &lt; <span class="number">0</span>)</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">     	<span class="comment">//当工作队列为null，线程工厂为null，拒绝策略为null抛出空指针异常。</span></div><div class="line">       <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">       <span class="keyword">this</span>.corePoolSize = corePoolSize;</div><div class="line">       <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</div><div class="line">       <span class="keyword">this</span>.workQueue = workQueue;</div><div class="line">       <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</div><div class="line">       <span class="keyword">this</span>.threadFactory = threadFactory;</div><div class="line">       <span class="keyword">this</span>.handler = handler;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>线程池的几个内部类，主要是Worker类，和几个拒绝策略的实现类。Worker是一个AQS的实现类(为何设计成一个AQS在闲置Worker里会说明)，同时也是一个实现Runnable的类，实现独占锁(非重入的互斥锁)，它的构造函数只接受一个Runnable参数，内部保存着这个Runnable属性，还有一个thread线程属性用于包装这个Runnable(这个thread属性使用ThreadFactory构造。在构造函数内完成thread线程的构造)，实现互斥锁主要目的是为了中断的时候判断线程是在空闲还是运行（<strong>判断是否是闲置线程，是否可以被强制中断。</strong> 一般有锁闲置的工作线程，因为在执行runWorker的时候会去掉锁），可以看后面 shutdown 和 shutdownNow 方法的分析。另外还有一个completedTasks计数器表示这个Worker完成的任务数。Worker类复写了run方法，使用ThreadPoolExecutor的runWorker方法(在addWorker方法里调用)，直接启动Worker的话，会调用ThreadPoolExecutor的runWork方法。<strong>需要特别注意的是这个Worker是实现了Runnable接口的，thread线程属性使用ThreadFactory构造Thread的时候，构造的Thread中使用的Runnable其实就是Worker。</strong>在前面还有一个HashSet的Worker 的集合workers，线程池通过管理线程池里的线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line">·	<span class="comment">//worker是用于管理</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span></span></div><div class="line">        <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">Runnable</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">//这个类永远都不会序列化，只是符合Javac的规范</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6138294804551838833L</span>;</div><div class="line"></div><div class="line">       <span class="comment">//当前的这个worker运行在这个Thread，worker也实现Runnable接口。如果ThreadFactory创建失败可能是null</span></div><div class="line">        <span class="keyword">final</span> Thread thread;</div><div class="line">       <span class="comment">//初始化运行任务，可能是空</span></div><div class="line">        Runnable firstTask;</div><div class="line">        <span class="comment">//每线程任务计数器</span></div><div class="line">        <span class="keyword">volatile</span> <span class="keyword">long</span> completedTasks;</div><div class="line"></div><div class="line">       <span class="comment">//Worker的构造函数，通过Worker的firstTask指定一个任务，同时通过ThreadFactory创建一个线程</span></div><div class="line">        Worker(Runnable firstTask) &#123;</div><div class="line">          	<span class="comment">//把状态位设置成-1，这样任何线程都不能得到Worker的锁，除非调用了unlock方法。这个unlock方法会在runWorker方法中一开始就调用，这是为了确保Worker构造出来之后，没有任何线程能够得到它的锁，除非调用了runWorker之后，其他线程才能获得Worker的锁</span></div><div class="line">            setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></div><div class="line">            <span class="keyword">this</span>.firstTask = firstTask;</div><div class="line">          <span class="comment">// 使用ThreadFactory构造Thread，这个构造的Thread内部的Runnable就是本身，也就是这个Worker。所以得到Worker的thread并start的时候，会执行Worker的run方法，也就是执行ThreadPoolExecutor的runWorker方法</span></div><div class="line">            <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/** Delegates main run loop to outer runWorker 将主运行循环委托给外部runWorker */</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            runWorker(<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Lock methods 锁方法,state属性是从AQS中获取</span></div><div class="line">        <span class="comment">//</span></div><div class="line">        <span class="comment">// The value 0 represents the unlocked state.</span></div><div class="line">      	<span class="comment">//值为0 的时候是非锁定状态</span></div><div class="line">        <span class="comment">// The value 1 represents the locked state.</span></div><div class="line">		<span class="comment">//值为1的时候是锁定状态</span></div><div class="line">      	<span class="comment">//是否被锁定，如果有就不等于0。</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> getState() != <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">	   <span class="comment">//尝试获取锁</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>)) &#123;</div><div class="line">                setExclusiveOwnerThread(Thread.currentThread());</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">	   <span class="comment">//释放锁</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</div><div class="line">          	<span class="comment">//设定当前资源的线程为null</span></div><div class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</div><div class="line">          	<span class="comment">//设置状态为0</span></div><div class="line">            setState(<span class="number">0</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">		<span class="comment">//锁定</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span>        </span>&#123; acquire(<span class="number">1</span>); &#125;</div><div class="line">      	<span class="comment">//尝试获取锁</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span>  </span>&#123; <span class="keyword">return</span> tryAcquire(<span class="number">1</span>); &#125;</div><div class="line">      	<span class="comment">//释放锁，通过内部函数实现，然后调用</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span>      </span>&#123; release(<span class="number">1</span>); &#125;</div><div class="line">      	<span class="comment">//判断是否被锁定</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLocked</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> isHeldExclusively(); &#125;</div><div class="line">		</div><div class="line">      	<span class="comment">//中断已经开始的线程</span></div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">interruptIfStarted</span><span class="params">()</span> </span>&#123;</div><div class="line">            Thread t;</div><div class="line">          	<span class="comment">//判断任务已经开始，然后中断执行的线程（这个中断是强制的）</span></div><div class="line">            <span class="keyword">if</span> (getState() &gt;= <span class="number">0</span> &amp;&amp; (t = thread) != <span class="keyword">null</span> &amp;&amp; !t.isInterrupted()) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    t.interrupt();</div><div class="line">                &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> 	<span class="comment">//直接运行新添加的任务，除非意外终止。</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallerRunsPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</div><div class="line">         <span class="comment">//构造函数</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CallerRunsPolicy</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">     	<span class="comment">//直接运行任务</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (!e.isShutdown()) &#123;</div><div class="line">                r.run();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//超出线程范围和队列容量时抛出异常</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AbortPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</div><div class="line">       </div><div class="line">       <span class="comment">//构造函数</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AbortPolicy</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line">		<span class="comment">//抛出异常</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(<span class="string">"Task "</span> + r.toString() +</div><div class="line">                                                 <span class="string">" rejected from "</span> +</div><div class="line">                                                 e.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//拒绝任务的处理程序，丢弃被拒绝的任务</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</div><div class="line">       	<span class="comment">//构造函数</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DiscardPolicy</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">       <span class="comment">//什么都不做，这会有丢弃任务r的效果</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//丢弃最老的任务</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardOldestPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</div><div class="line">        <span class="comment">//构造函数</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DiscardOldestPolicy</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line"></div><div class="line">       </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</div><div class="line">          <span class="comment">//如果线程池在运行，那么就获取缓冲队列，抛出最上面的一个  </span></div><div class="line">          <span class="keyword">if</span> (!e.isShutdown()) &#123;</div><div class="line">                e.getQueue().poll();</div><div class="line">                e.execute(r);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>ThreadPoolExecutor执行任务。首先通过submit或者excute方法把任务放到线程池中（这里如果线程池空闲会直接执行，否则会进入到缓冲队列中去），然后线程池从缓冲队列中获取任务（getTask），然后添加Work，最后执行要执行任务内容(runWorker)。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// submit是存在AbstractExecutorService的源码。一般在Executors中会用到</span></div><div class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">  		<span class="comment">//newTaskFor是把runnable接口转换有返回值</span></div><div class="line">        RunnableFuture&lt;T&gt; ftask = newTaskFor(task, result);</div><div class="line">        execute(ftask);</div><div class="line">        <span class="keyword">return</span> ftask;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//很明显地看到，submit方法内部使用了execute方法，而且submit方法是有返回值的。在调用execute方法之前，使用FutureTask包装一个Runnable，这个ftask就是返回值。</span></div></pre></td></tr></table></figure>
<p>由于submit方法内部调用execute方法，所以execute方法就是执行任务的方法，来看一下execute方法，execute方法内部分3个步骤进行处理。</p>
<ol>
<li>如果当前正在执行的Worker数量比corePoolSize(基本大小，核心线程数)要小。直接创建一个新的Worker执行任务，会调用addWorker方法</li>
<li>如果当前正在执行的Worker数量大于等于corePoolSize(基本大小，核心线程数)。将任务放到阻塞队列里，如果阻塞队列没满并且状态是RUNNING的话，直接丢到阻塞队列，否则执行第3步。丢到阻塞队列之后，还需要再做一次验证(丢到阻塞队列之后可能另外一个线程关闭了线程池或者刚刚加入到队列的线程死了)。如果这个时候线程池不在RUNNING状态，把刚刚丢入队列的任务remove掉，调用reject方法，否则查看Worker数量，如果Worker数量为0，起一个新的Worker去阻塞队列里拿任务执行</li>
<li>丢到阻塞失败的话，会调用addWorker方法尝试起一个新的Worker去阻塞队列拿任务并执行任务，如果这个新的Worker创建失败，调用reject方法</li>
</ol>
<p>上面说的Worker可以暂时理解为一个执行任务的线程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</div><div class="line">  		<span class="comment">//判断任务是否为空</span></div><div class="line">       <span class="keyword">if</span> (command == <span class="keyword">null</span>)</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">       <span class="comment">//获取ctl</span></div><div class="line">       <span class="keyword">int</span> c = ctl.get();</div><div class="line">  		<span class="comment">//根据ctl获取工作线程线程数，如果小于核心线程数，添加新的worker，也就是新线程</span></div><div class="line">       <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; <span class="comment">// 第一个步骤，满足线程池中的线程大小比基本大小要小</span></div><div class="line">           <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>)) <span class="comment">// addWorker方法第二个参数true表示使用基本大小</span></div><div class="line">               <span class="keyword">return</span>;</div><div class="line">         	<span class="comment">//否则重新获取ctl</span></div><div class="line">           c = ctl.get();</div><div class="line">       &#125;</div><div class="line">  		</div><div class="line">       <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123; <span class="comment">// 第二个步骤，线程池的线程大小比基本大小要大，并且线程池还在RUNNING状态，阻塞队列也没满的情况，加到阻塞队列里</span></div><div class="line">         	<span class="comment">//重新获取ctl，二次校验。</span></div><div class="line">           <span class="keyword">int</span> recheck = ctl.get();</div><div class="line">          <span class="comment">// 虽然满足了第二个步骤，但是这个时候可能突然线程池关闭了，所以再做一层判断</span></div><div class="line">           <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))<span class="comment">//关闭了</span></div><div class="line">               reject(command); <span class="comment">//调用拒绝策略方法</span></div><div class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</div><div class="line">               addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>); <span class="comment">// 第三个步骤，直接使用线程池最大大小。addWorker方法第二个参数false表示使用最大大小</span></div><div class="line">       &#125;</div><div class="line">       <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</div><div class="line">         	<span class="comment">//调用拒绝策略方法</span></div><div class="line">           reject(command);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>如何添加一个Worker。</p>
<ol>
<li><strong>在外循环对运行状态进行判断</strong>，<strong>内循环通过CAS机制对workerCount进行增加</strong>，当设置成功，则跳出外循环，否则进行进行内循环重试</li>
<li><strong>外循环之后，获取全局锁，再次对运行状态进行判断，符合条件则添加新的工作线程，并启动工作线程</strong>，如果在最后对添加线程没有开始运行（可能发生<strong>内存溢出</strong>，操作系统<strong>无法分配线程</strong>等等）则对<strong>添加操作进行回滚</strong>，移除之前添加的线程</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">// 两个参数，firstTask表示需要跑的任务。boolean类型的core参数为true的话表示使用线程池的基本大小，为false使用线程池最大大小</span></div><div class="line">   <span class="comment">//返回值是boolean类型，true表示新任务被接收了，并且执行了。否则是false  </span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</div><div class="line">       retry:</div><div class="line">       <span class="keyword">for</span> (;;) &#123;</div><div class="line">         	<span class="comment">//获取ctl</span></div><div class="line">           <span class="keyword">int</span> c = ctl.get();</div><div class="line">         	<span class="comment">//获取线程池状态</span></div><div class="line">           <span class="keyword">int</span> rs = runStateOf(c);</div><div class="line"></div><div class="line">       <span class="comment">// 这个判断转换成 rs &gt;= SHUTDOWN &amp;&amp; (rs != SHUTDOWN || firstTask != null || workQueue.isEmpty)。 </span></div><div class="line">       <span class="comment">// 概括为3个条件：</span></div><div class="line">       <span class="comment">// 1. 线程池不在RUNNING状态并且状态是STOP、TIDYING或TERMINATED中的任意一种状态</span></div><div class="line"></div><div class="line">       <span class="comment">// 2. 线程池不在RUNNING状态，线程池接受了新的任务 </span></div><div class="line"></div><div class="line">       <span class="comment">// 3. 线程池不在RUNNING状态，阻塞队列为空。  满足这3个条件中的任意一个的话，拒绝添加</span></div><div class="line">           <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</div><div class="line">               ! (rs == SHUTDOWN &amp;&amp;</div><div class="line">                  firstTask == <span class="keyword">null</span> &amp;&amp;</div><div class="line">                  ! workQueue.isEmpty()))</div><div class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	</div><div class="line">           <span class="keyword">for</span> (;;) &#123;</div><div class="line">             	<span class="comment">//获取工作线程数</span></div><div class="line">               <span class="keyword">int</span> wc = workerCountOf(c);</div><div class="line">             	<span class="comment">// 1、工作线程数大于总容量；2、如果core是true大于核心线程数，如果是false大于设置最大线程数，如果满足就返回false，不能添加</span></div><div class="line">               <span class="keyword">if</span> (wc &gt;= CAPACITY ||</div><div class="line">                   wc &gt;= (core ? corePoolSize : maximumPoolSize))</div><div class="line">                   <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">             <span class="comment">// 没有超过各种大小的话，cas操作线程池线程数量+1，cas成功的话跳出循环</span></div><div class="line">               <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</div><div class="line">                   <span class="keyword">break</span> retry;</div><div class="line">               c = ctl.get();  <span class="comment">// 重新检查状态</span></div><div class="line">               <span class="keyword">if</span> (runStateOf(c) != rs) <span class="comment">// 如果状态改变了，重新循环操作</span></div><div class="line">                   <span class="keyword">continue</span> retry;</div><div class="line">               <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">     </div><div class="line">   <span class="comment">// 走到这一步说明cas操作成功了，线程池线程数量+1</span></div><div class="line">       <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;<span class="comment">// 任务是否成功启动标识</span></div><div class="line">       <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;<span class="comment">// 任务是否成功添加标识</span></div><div class="line">       Worker w = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           w = <span class="keyword">new</span> Worker(firstTask); <span class="comment">//基于任务firstTask构造worker，firstTask可能是null</span></div><div class="line">           <span class="keyword">final</span> Thread t = w.thread; <span class="comment">//从worker中获取线程对象</span></div><div class="line">           <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123; <span class="comment">//ThreadFactory构造出的Thread有可能是null，做个判断</span></div><div class="line">               <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;<span class="comment">// 得到线程池的可重入锁</span></div><div class="line">             	<span class="comment">// 锁定下面的操作</span></div><div class="line">               mainLock.lock();</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   <span class="comment">// Recheck while holding lock.</span></div><div class="line">                   <span class="comment">// Back out on ThreadFactory failure or if</span></div><div class="line">                   <span class="comment">// shut down before lock acquired.</span></div><div class="line">                 	<span class="comment">//获取线程池运行状态</span></div><div class="line">                   <span class="keyword">int</span> rs = runStateOf(ctl.get());</div><div class="line">			  <span class="comment">//1、线程池的状态是RUNNING的；</span></div><div class="line">                  <span class="comment">//2、线程池的状态是SHUTDOWN同时firstTask是空</span></div><div class="line">                  <span class="comment">//上面两条有一个满足都可以天剑，否则添加失败</span></div><div class="line">                   <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</div><div class="line">                       (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</div><div class="line">                       <span class="keyword">if</span> (t.isAlive()) <span class="comment">// 判断线程是否还活着，也就是说线程已经启动并且还没死掉</span></div><div class="line">                           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</div><div class="line">                       workers.add(w); <span class="comment">// worker添加到线程池的workers属性中，是个HashSet</span></div><div class="line">                     	<span class="comment">//获取workers的大小</span></div><div class="line">                       <span class="keyword">int</span> s = workers.size();</div><div class="line">                       <span class="keyword">if</span> (s &gt; largestPoolSize)<span class="comment">//如果workers的大小小于largestPoolSize，s付给线程最大值</span></div><div class="line">                           largestPoolSize = s;</div><div class="line">                       workerAdded = <span class="keyword">true</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                 	<span class="comment">//释放锁</span></div><div class="line">                   mainLock.unlock();</div><div class="line">               &#125;</div><div class="line">             	<span class="comment">//如果worker添加成功</span></div><div class="line">               <span class="keyword">if</span> (workerAdded) &#123;</div><div class="line">                 	<span class="comment">//开始执行线程程序</span></div><div class="line">                   t.start();</div><div class="line">                 	<span class="comment">//设置标志为true</span></div><div class="line">                   workerStarted = <span class="keyword">true</span>;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">         	<span class="comment">//如果启动失败</span></div><div class="line">           <span class="keyword">if</span> (! workerStarted)</div><div class="line">             	<span class="comment">//调用添加失败方法</span></div><div class="line">               addWorkerFailed(w);</div><div class="line">       &#125;</div><div class="line">     	<span class="comment">//返回运行（也就是添加worker）是否成功失败</span></div><div class="line">       <span class="keyword">return</span> workerStarted;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   	</div><div class="line"><span class="comment">//添加工作线程失败后调用的方法</span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addWorkerFailed</span><span class="params">(Worker w)</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock; <span class="comment">//获取可重入锁</span></div><div class="line">       mainLock.lock(); <span class="comment">//锁定代码</span></div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">if</span> (w != <span class="keyword">null</span>) <span class="comment">//如果添加的工作线程不为空，从workers中移除该工作线程</span></div><div class="line">               workers.remove(w);</div><div class="line">         	<span class="comment">// 减少工作线程计数</span></div><div class="line">           decrementWorkerCount();</div><div class="line">           <span class="comment">// 因为中断异常而没有启动线程，从而回滚已入队的线程</span></div><div class="line">           <span class="comment">// 这个中断异常可能是关闭线程池时发生的，所以应该将终止线程池的信号传播</span></div><div class="line">           tryTerminate();<span class="comment">//终止线程池</span></div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           mainLock.unlock();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>运行Worker中的任务。</p>
<p>线程池中的这个基本大小指的是Worker的数量。一个Worker是一个Runnable的实现类，会被当做一个线程进行启动。Worker内部带有一个Runnable属性firstTask，这个firstTask可以为null，为null的话Worker会去阻塞队列拿任务执行，否则会先执行这个任务，执行完毕之后再去阻塞队列继续拿任务执行。</p>
<p>所以说如果Worker数量超过了基本大小，那么任务都会在阻塞队列里，当Worker执行完了它的第一个任务之后，就会去阻塞队列里拿其他任务继续执行。</p>
<p>Worker在执行的时候会根据一些参数进行调节，比如Worker数量超过了线程池基本大小或者超时时间到了等因素，这个时候Worker会被线程池回收，线程池会尽量保持内部的Worker数量不超过基本大小</p>
<p>Worker执行任务的时候调用的是Runnable的run方法，而不是start方法，调用了start方法就相当于另外再起一个线程了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是个final的方法，不能被重写。 </span></div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</div><div class="line">  		<span class="comment">// 获取当前线程，在Worker类中的run方法调用这个runWorker方法。</span></div><div class="line">        Thread wt = Thread.currentThread();</div><div class="line">  	    <span class="comment">// 从worker类中获取任务</span></div><div class="line">        Runnable task = w.firstTask;</div><div class="line">        w.firstTask = <span class="keyword">null</span>;<span class="comment">//清空worker中的任务</span></div><div class="line">        w.unlock(); <span class="comment">// 释放worker上独占锁。</span></div><div class="line">        <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;<span class="comment">// 因为运行异常导致线程突然终止的标志</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          <span class="comment">// 如果worker中的任务不为空，继续，否则使用getTask获得任务。一直死循环，除非得到的任务为空才退出</span></div><div class="line">            <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</div><div class="line">              	<span class="comment">// 如果拿到了任务，给自己上锁，表示当前Worker已经要开始执行任务了，已经不是闲置Worker(闲置Worker的解释请看下面的线程池关闭)</span></div><div class="line">                w.lock();</div><div class="line">               <span class="comment">// 在执行任务之前先做一些处理。 </span></div><div class="line">              <span class="comment">//1. 如果线程池已经处于STOP状态并且当前线程没有被中断，中断线程 </span></div><div class="line">              <span class="comment">//2. 如果线程池还处于RUNNING或SHUTDOWN状态，并且当前线程已经被中断了，重新检查一下线程池状态，如果处于STOP状态并且没有被中断，那么中断线程</span></div><div class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</div><div class="line">                <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</div><div class="line">                     (Thread.interrupted() &amp;&amp;</div><div class="line">                      runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</div><div class="line">                    !wt.isInterrupted())</div><div class="line">                    wt.interrupt();</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                  	<span class="comment">//执行任务前的函数。一般都是是自己实现，它提供了空方法，需要自己复写</span></div><div class="line">                    beforeExecute(wt, task);</div><div class="line">                    Throwable thrown = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                      <span class="comment">// 运行任务.这里调用的不是start方法，而是run方法。</span></div><div class="line">                      <span class="comment">//这里run的时候可能会被中断，比如线程池调用了shutdownNow方法</span></div><div class="line">                        task.run();</div><div class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</div><div class="line">                        thrown = x; <span class="keyword">throw</span> x;</div><div class="line">                    &#125; <span class="keyword">catch</span> (Error x) &#123;</div><div class="line">                        thrown = x; <span class="keyword">throw</span> x;</div><div class="line">                    &#125; <span class="keyword">catch</span> (Throwable x) &#123;</div><div class="line">                        thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</div><div class="line">                    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                      <span class="comment">//执行运行前的函数。一般都是是自己实现，它提供了空方法，需要自己复写</span></div><div class="line">                       afterExecute(task, thrown);</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                    task = <span class="keyword">null</span>; <span class="comment">//清空任务</span></div><div class="line">                    w.completedTasks++; <span class="comment">//已完成任务数+1</span></div><div class="line">                    w.unlock(); <span class="comment">//释放worker的锁</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            completedAbruptly = <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            processWorkerExit(w, completedAbruptly); <span class="comment">// 回收Worker方法</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">   <span class="comment">//私有方法，用于回收Worker              </span></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processWorkerExit</span><span class="params">(Worker w, <span class="keyword">boolean</span> completedAbruptly)</span> </span>&#123;</div><div class="line">     	<span class="comment">//如果突然情况导致线程终止，WorkerCount-1</span></div><div class="line">        <span class="keyword">if</span> (completedAbruptly) <span class="comment">// If abrupt, then workerCount wasn't adjusted</span></div><div class="line">            decrementWorkerCount();</div><div class="line">		<span class="comment">//获取锁</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">        mainLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          	<span class="comment">//完成的任务数增加</span></div><div class="line">            completedTaskCount += w.completedTasks;</div><div class="line">          	<span class="comment">//移除完成的workers</span></div><div class="line">            workers.remove(w);</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            mainLock.unlock();</div><div class="line">        &#125;</div><div class="line">		<span class="comment">//尝试终止线程池</span></div><div class="line">        tryTerminate();</div><div class="line">	    <span class="comment">//获取ctl</span></div><div class="line">        <span class="keyword">int</span> c = ctl.get();</div><div class="line">     	<span class="comment">//根据ctl获取状态，判断是否是停止状态之前的状态Stop 为1</span></div><div class="line">        <span class="keyword">if</span> (runStateLessThan(c, STOP)) &#123;</div><div class="line">          	<span class="comment">//如果线程没有异常退出</span></div><div class="line">            <span class="keyword">if</span> (!completedAbruptly) &#123;</div><div class="line">              	<span class="comment">//allowCoreThreadTimeOut为true 的时候是，工作线程最小为0，否则最小为核心工作线程个数</span></div><div class="line">                <span class="keyword">int</span> min = allowCoreThreadTimeOut ? <span class="number">0</span> : corePoolSize;</div><div class="line">                <span class="keyword">if</span> (min == <span class="number">0</span> &amp;&amp; ! workQueue.isEmpty())</div><div class="line">                    min = <span class="number">1</span>;</div><div class="line">              <span class="comment">// 如果线程数量大于等于正常工作的数量则不再添加新的线程</span></div><div class="line">                <span class="keyword">if</span> (workerCountOf(c) &gt;= min)</div><div class="line">                    <span class="keyword">return</span>; <span class="comment">// replacement not needed</span></div><div class="line">            &#125;</div><div class="line">          	<span class="comment">//添加一个工作线程（没有任务的），false是使用最大线程数。true是核心线程数</span></div><div class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</div><div class="line">          <span class="comment">// 新开一个Worker代替原先的Worker</span></div><div class="line">          <span class="comment">// 新开一个Worker需要满足以下3个条件中的任意一个：</span></div><div class="line">          <span class="comment">// 1. 用户执行的任务发生了异常</span></div><div class="line">          <span class="comment">// 2. Worker数量比线程池基本大小要小</span></div><div class="line">          <span class="comment">// 3. 阻塞队列不空但是没有任何Worker在工作</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>获取任务getTask，一般会在runWorker的时候去调用。</p>
<ol>
<li>通过<strong>死循环来对线程池状态进行判断，并获取任务，在超时发生之前发生中断则重置超时标志位false并进行重试</strong>，如果获取到任务则返回任务</li>
<li>主要来看一下是<strong>如何实现移除空闲keepAliveTime线程的</strong>：<code>workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS)</code>方法从任务队列中<strong>定时获取任务</strong>，<strong>如果超时，则说明线程已经在等待了keepAliveTime都没有获得任务</strong>，则将<strong>超时标志设为true</strong>，在下一次循环时进行判断，如果发现上一次获取任务发生超时，则立刻返回null，这时worker线程主循环将正常结束，并移除结束的worker。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取任务</span></div><div class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</div><div class="line">  		</div><div class="line">        <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// 如果使用超时时间并且也没有拿到任务的标识</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">            <span class="keyword">int</span> c = ctl.get(); <span class="comment">//获取ctl</span></div><div class="line">            <span class="keyword">int</span> rs = runStateOf(c); <span class="comment">//根据ctl获取线程状态，每次现用现取</span></div><div class="line">			<span class="comment">// 线程池状态在SHUTDOWN，或者是Stop之后或者工作队列为空直接返回null</span></div><div class="line">            <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</div><div class="line">                decrementWorkerCount();<span class="comment">//工作线程数-1</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">		   </div><div class="line">            <span class="keyword">int</span> wc = workerCountOf(c); <span class="comment">//获取工作线程数</span></div><div class="line"></div><div class="line">            <span class="comment">// Are workers subject to culling?</span></div><div class="line">            <span class="comment">//timed只的是，是否有直接的线程可用，是否要等待。</span></div><div class="line">            <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</div><div class="line">		   <span class="comment">//工作线程个数大于最大线程池数，或者等待超时，后者阻塞队列中为空</span></div><div class="line">            <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</div><div class="line">                &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</div><div class="line">                <span class="keyword">if</span> (compareAndDecrementWorkerCount(c)) <span class="comment">//worker数量减一，返回null。回收worker</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">continue</span>; <span class="comment">//否则继续获取</span></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">              	<span class="comment">//timed为true说明线程池里没有充足的线程需要等待，否则直接获取任务</span></div><div class="line">                Runnable r = timed ?</div><div class="line">                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</div><div class="line">                    workQueue.take();<span class="comment">// 如果在keepAliveTime时间内获取到任务则返回,</span></div><div class="line">                <span class="keyword">if</span> (r != <span class="keyword">null</span>)</div><div class="line">                    <span class="keyword">return</span> r;</div><div class="line">              <span class="comment">// 否则将超时标志设置为true</span></div><div class="line">                timedOut = <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</div><div class="line">              	<span class="comment">//抛异常设置超时时间为false表示没有超时</span></div><div class="line">                timedOut = <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>Worker在回收的时候会尝试终止线程池也就是tryTerminate方法。尝试关闭线程池的时候，会检查是否还有Worker在工作，检查线程池的状态，没问题的话会将状态过度到TIDYING状态，之后调用terminated方法，terminated方法调用完成之后将线程池状态更新到TERMINATED。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//线程池尝试结束自己运行，不一定会结束</span></div><div class="line"> <span class="comment">// 满足3个条件中的任意一个，不终止线程池</span></div><div class="line"> <span class="comment">// 1. 线程池还在运行，不能终止</span></div><div class="line"> <span class="comment">// 2. 线程池处于TIDYING或TERMINATED状态，说明已经在关闭了，不允许继续处理</span></div><div class="line"> <span class="comment">// 3. 线程池处于SHUTDOWN状态并且阻塞队列不为空，这时候还需要处理阻塞队列的任务，不能终止线程池</span></div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryTerminate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">          	<span class="comment">//获取ctl</span></div><div class="line">            <span class="keyword">int</span> c = ctl.get();</div><div class="line">          	<span class="comment">//上面的三种情况，直接返回</span></div><div class="line">            <span class="keyword">if</span> (isRunning(c) ||</div><div class="line">                runStateAtLeast(c, TIDYING) ||</div><div class="line">                (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">          	<span class="comment">//走到这一步说明线程池已经不在运行，阻塞队列已经没有任务，但是还要回收正在工作的Worker</span></div><div class="line">            <span class="keyword">if</span> (workerCountOf(c) != <span class="number">0</span>) &#123; <span class="comment">// Eligible to terminate</span></div><div class="line">              <span class="comment">// 由于线程池不运行了，调用了线程池的关闭方法.</span></div><div class="line">              <span class="comment">// 中断闲置Worker，直到回收全部的Worker。这里没有那么暴力，只中断一个，中断之后退出方法，中断了Worker之后，Worker会回收，然后还是会调用tryTerminate方法，如果还有闲置线程，那么继续中断法</span></div><div class="line">                interruptIdleWorkers(ONLY_ONE);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">		   <span class="comment">// 获取锁</span></div><div class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">            mainLock.lock();</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">              	<span class="comment">//设置线程池状态，和工作线程个数</span></div><div class="line">                <span class="keyword">if</span> (ctl.compareAndSet(c, ctlOf(TIDYING, <span class="number">0</span>))) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                      	<span class="comment">//调用terminated方法，结束线程池</span></div><div class="line">                        terminated();</div><div class="line">                    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                      	<span class="comment">//设置线程池状态和工作线程个数</span></div><div class="line">                        ctl.set(ctlOf(TERMINATED, <span class="number">0</span>));</div><div class="line">                      	<span class="comment">//唤醒其他线程</span></div><div class="line">                        termination.signalAll();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                mainLock.unlock();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// else retry on failed CAS</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>线程池的关闭主要是两个方法，shutdown和shutdownNow方法。</p>
<p>shutdown方法会更新状态到SHUTDOWN，不会影响阻塞队列里任务的执行，但是不会执行新进来的任务。同时也会回收闲置的Worker，闲置Worker的定义上面已经说过了。</p>
<p>shutdownNow方法会更新状态到STOP，会影响阻塞队列的任务执行，也不会执行新进来的任务。同时会回收所有的Worker。</p>
<p>线程池的结束相关的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 将线程池从运行状态转为SHUTDOWN状态</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</div><div class="line">  		<span class="comment">//获取锁锁定这块代码</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">        mainLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            checkShutdownAccess();<span class="comment">// 检查关闭线程池的权限</span></div><div class="line">            advanceRunState(SHUTDOWN);<span class="comment">//设置运行状态为SHUTDOWN</span></div><div class="line">            interruptIdleWorkers();<span class="comment">//中断空闲的工作线程</span></div><div class="line">		   <span class="comment">//钩子方法，默认不处理。ScheduledThreadPoolExecutor会做一些处理</span></div><div class="line">            onShutdown(); <span class="comment">// hook for ScheduledThreadPoolExecutor</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            mainLock.unlock();</div><div class="line">        &#125;</div><div class="line">        tryTerminate();<span class="comment">//尝试关闭线程池</span></div><div class="line">    &#125;</div><div class="line"><span class="comment">//将线程池从运行状态转为STOP状态，同时返回阻塞对列中的任务集合</span></div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span> </span>&#123;</div><div class="line">  		<span class="comment">//要返回的阻塞队列中的任务</span></div><div class="line">        List&lt;Runnable&gt; tasks;</div><div class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;<span class="comment">//获取锁并锁定</span></div><div class="line">        mainLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            checkShutdownAccess();<span class="comment">//检验权限</span></div><div class="line">            advanceRunState(STOP);<span class="comment">//设置状态为STOP</span></div><div class="line">            interruptWorkers();<span class="comment">//关闭运行的工作线程，无论是否闲置</span></div><div class="line">            tasks = drainQueue(); <span class="comment">//将队列中没有运行的任务取出来</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            mainLock.unlock();</div><div class="line">        &#125;</div><div class="line">        tryTerminate();<span class="comment">//尝试关闭线程池</span></div><div class="line">        <span class="keyword">return</span> tasks;</div><div class="line">    &#125;</div><div class="line"> <span class="comment">//awaitTermination方法将状态设置为TERMINATED，并拒绝新增任务，调用isShutdown返回true，但是调用isTerminaed返回false，超时等待所有提交的任务的完成。</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line">        <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">   		<span class="comment">//将设置时间转化成纳秒</span></div><div class="line">        <span class="keyword">long</span> nanos = unit.toNanos(timeout);</div><div class="line">   		<span class="comment">//获取锁</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">        mainLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;，</div><div class="line">              	<span class="comment">//判断线程池状态，如果所有提交的任务已经完成，则立刻返回true</span></div><div class="line">                <span class="keyword">if</span> (runStateAtLeast(ctl.get(), TERMINATED))</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)<span class="comment">// 已经超时，则返回false</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="comment">// 进入等待，直到被通知、中断、超时，则返回剩余的间，</span></div><div class="line">                <span class="comment">// 如果返回值小于等于0，则表示是超时返回</span></div><div class="line">                nanos = termination.awaitNanos(nanos);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            mainLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//中断空闲的Worker，传入了参数false，表示要中断所有的正在运行的闲置Worker，如果为true表示只打断一个闲置Worker</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">interruptIdleWorkers</span><span class="params">(<span class="keyword">boolean</span> onlyOne)</span> </span>&#123;</div><div class="line">  		<span class="comment">//获取锁。</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">        mainLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          	<span class="comment">//从workers中取出worker并中断</span></div><div class="line">            <span class="keyword">for</span> (Worker w : workers) &#123;</div><div class="line">              	<span class="comment">//获取线程</span></div><div class="line">                Thread t = w.thread;</div><div class="line">              	<span class="comment">//如果该运行的工作线程是没有打断，同时闲置的工作线程（存在锁的）</span></div><div class="line">                <span class="keyword">if</span> (!t.isInterrupted() &amp;&amp; w.tryLock()) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                      	<span class="comment">//打断该工作线程</span></div><div class="line">                        t.interrupt();</div><div class="line">                    &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</div><div class="line">                    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                        w.unlock();<span class="comment">//释放worker的锁</span></div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">              	<span class="comment">//只打断一个，然后跳出循环</span></div><div class="line">                <span class="keyword">if</span> (onlyOne)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            mainLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  <span class="comment">//中断workers</span></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">interruptWorkers</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</div><div class="line">    	<span class="comment">//获取锁</span></div><div class="line">        mainLock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          	<span class="comment">//for循环关闭workers</span></div><div class="line">            <span class="keyword">for</span> (Worker w : workers)</div><div class="line">                w.interruptIfStarted();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            mainLock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//  在gc之前调用线程池的shutdown()方法,释放相关资源</span></div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> </span>&#123;</div><div class="line">        shutdown();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>interruptIdleWorkers方法，注意，这个方法打断的是闲置Worker，打断闲置Worker之后，getTask方法会返回null，然后Worker会被回收。怎么判断Worker是闲置呢？</p>
<p>闲置Worker是这样解释的：Worker运行的时候会去阻塞队列拿数据(getTask方法)，拿的时候如果没有设置超时时间，那么会一直阻塞等待阻塞队列进数据，这样的Worker就被称为闲置Worker。由于Worker也是一个AQS，在runWorker方法里会有一对lock和unlock操作，这对lock操作是为了确保Worker不是一个闲置Worker。所<strong>以Worker被设计成一个AQS是为了根据Worker的锁来判断是否是闲置线程，是否可以被强制中断</strong>（而且这个锁还是一个不可重入锁，即独占锁）。</p>
<h5 id="Java提供了那几种线程池"><a href="#Java提供了那几种线程池" class="headerlink" title="Java提供了那几种线程池"></a>Java提供了那几种线程池</h5><p>在Java 的Executors类中有很多创建好的线程池。FixedThreadPool固定大小的线程池，SingleThreadExecutor只有一个线程的线程池，CachedThreadPool带有缓存功能的线程池，ScheduledThreadPool可以定时的线程池，SingleThreadScheduledExecutor只有一个线程并且可以定时的线程池，WorkStealingPool使用ForkJoin方式的线程池,unconfigurableExecutorService不可配置的线程池。</p>
<ul>
<li>FixedThreadPool线程池</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//FixedThreadPool是一个指定固定大小的线程池，它在构造函数中指定了线程池的大小</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</div><div class="line">  		<span class="comment">//这调用的是ThreadPoolExecutor的构造函数，指定基本线程和最大线程都是nThreads，空闲线程存活时间是0ms，一般如果不设置allowCoreThreadTimeOut，keepAliveTime不会对基本线程起作用。时间单位是ms。传入一个没有边界的阻塞队列</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</div><div class="line">    &#125;</div><div class="line"><span class="comment">//可以自己指定ThreadFactory</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads, ThreadFactory threadFactory)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</div><div class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(),</div><div class="line">                                      threadFactory);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>SingleThreadExecutor</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SingleThreadExecutor 创建一个线程的线程池。当单一线程抛出异常停止时会在新建一个线程</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">  		<span class="comment">//包装一下线程池使他只能暴露ExecutorService的方法，而不能设置线程池的其他参数。这样的目的是为了让任务串行化执行，不会被设置线程池大小</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</div><div class="line">            (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</div><div class="line">                                    <span class="number">0L</span>, TimeUnit.MILLISECONDS,</div><div class="line">                                    <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//只暴露ExecutorService方法的包装类 ExecutorService实现，这里使用了代理方法。</span></div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegatedExecutorService</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ExecutorService e;</div><div class="line">        DelegatedExecutorService(ExecutorService executor) &#123; e = executor; &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123; e.execute(command); &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123; e.shutdown(); &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title">shutdownNow</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> e.shutdownNow(); &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isShutdown</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> e.isShutdown(); &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTerminated</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> e.isTerminated(); &#125;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">awaitTermination</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></div><div class="line">            <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">            <span class="keyword">return</span> e.awaitTermination(timeout, unit);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</div><div class="line">            <span class="keyword">return</span> e.submit(task);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> e.submit(task);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> e.submit(task, result);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</div><div class="line">            <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">            <span class="keyword">return</span> e.invokeAll(tasks);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> &lt;T&gt; List&lt;Future&lt;T&gt;&gt; invokeAll(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</div><div class="line">                                             <span class="keyword">long</span> timeout, TimeUnit unit)</div><div class="line">            <span class="keyword">throws</span> InterruptedException &#123;</div><div class="line">            <span class="keyword">return</span> e.invokeAll(tasks, timeout, unit);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks)</span></span></div><div class="line">            <span class="keyword">throws</span> InterruptedException, ExecutionException &#123;</div><div class="line">            <span class="keyword">return</span> e.invokeAny(tasks);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">invokeAny</span><span class="params">(Collection&lt;? extends Callable&lt;T&gt;&gt; tasks,</span></span></div><div class="line">                               <span class="keyword">long</span> timeout, TimeUnit unit)</div><div class="line">            <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException &#123;</div><div class="line">            <span class="keyword">return</span> e.invokeAny(tasks, timeout, unit);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalizableDelegatedExecutorService</span></span></div><div class="line">        <span class="keyword">extends</span> <span class="title">DelegatedExecutorService</span> &#123;</div><div class="line">        FinalizableDelegatedExecutorService(ExecutorService executor) &#123;</div><div class="line">            <span class="keyword">super</span>(executor);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.shutdown();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>CachedThreadPool</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个带有缓存队列的线程池</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</div><div class="line">  		<span class="comment">//基本线程数（corePoolSize）为0，最大线程数是Integer的最大值，keepAliveTime时间是60，单位是秒，它使用的是直接队列，会直接分配给工作线程，如果有空闲工作线程就直接复用，没有就会直接新建一个线程，不会阻塞。一个工作线程空闲60秒后会被回收</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</div><div class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</div><div class="line">                                      <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>ScheduledThreadPool</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个可以定时的线程池,并指定线程池的大小</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newScheduledThreadPool</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ScheduledThreadPoolExecutor(corePoolSize);</div><div class="line">    &#125;</div><div class="line"><span class="comment">//ScheduledThreadPoolExecutor 是继承ThreadPoolExecutor所以super方法就是ThreadPoolExecutor构造函数</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>&#123;</div><div class="line">   		<span class="comment">//可以指定线程池的基本大小。线程池最大值是integer 的最大值，他的keepAliveTime是0，时间单位是纳秒。队列是一个延时队列。可也设置时间参数。</span></div><div class="line">        <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</div><div class="line">              <span class="keyword">new</span> DelayedWorkQueue());</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>SingleThreadScheduledExecutor</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建单一线程的线程池，并且可以定时执行任务。当单一线程抛出异常停止时会在新建一个线程</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ScheduledExecutorService <span class="title">newSingleThreadScheduledExecutor</span><span class="params">()</span> </span>&#123;</div><div class="line">  		<span class="comment">//这里创建的基本大小为1的定时线程池</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DelegatedScheduledExecutorService</div><div class="line">            (<span class="keyword">new</span> ScheduledThreadPoolExecutor(<span class="number">1</span>));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>WorkStealingPool</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个ForkJoin的线程池，也就是将好多任务分解多个任务后给多个线程执行，执行之后在汇总。Fork获取副本和copy类似这里感觉是Map过程，join合并和Reduce类似。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newWorkStealingPool</span><span class="params">()</span> </span>&#123;</div><div class="line">  		<span class="comment">//创建一个ForkJoin的线程池。获取可用处理器（CPU）的个数，为parallelism，获取线程创建工厂。handler，和模式是异步还是同步。</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool</div><div class="line">            (Runtime.getRuntime().availableProcessors(),</div><div class="line">             ForkJoinPool.defaultForkJoinWorkerThreadFactory,</div><div class="line">             <span class="keyword">null</span>, <span class="keyword">true</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>unconfigurableExecutorService</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一个不可代理的线程池。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">unconfigurableExecutorService</span><span class="params">(ExecutorService executor)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (executor == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">  		<span class="comment">//传入一个线程池作为参数，然后包装一下，只暴露ExecutorService相关的接口，其他接口被隐藏不能被设置。</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DelegatedExecutorService(executor);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="线程池使用的注意问题"><a href="#线程池使用的注意问题" class="headerlink" title="线程池使用的注意问题"></a>线程池使用的注意问题</h5><p>1、建议使用有界队列，有界队列能增加系统的稳定性和预警能力，防止资源过度消耗，撑爆内存，使得系统崩溃不可用。<br>2、提交到线程池的task之间要尽量保证相互独立，不能存在相互依赖，否则可能会造成死锁等其他影响线程池执行的原因。<br>3、提交到的线程池的task不要又创建一个子线程执行别的任务，然后又将这个子线程任务提交到线程池，这样会造成混乱的依赖，最终导致线程池崩溃，最好将一个task用一个线程执行。</p>
<p>4、一般需要根据任务的类型来配置线程池大小：</p>
<p>如果是<strong>CPU密集型任务</strong>，就需要尽量压榨CPU，参考值可以设为 <strong>Num(CPU+1)</strong></p>
<p>如果是<strong>IO密集型任务</strong>，参考值可以设置为<em>2Num(CPU)*</em></p>
<p>当然，这只是一个参考值，具体的设置还需要根据实际情况进行调整，比如<strong>可以先将线程池大小设置为参考值</strong>，再<strong>观察任务运行情况和系统负载、资源利用率来进行适当调整</strong>。</p>
<p>Java线程底层映射到操作系统原生线程，而且Java在windows和linux平台下，一个Java线程映射为一个内核线程，而内核线程和CPU物理核心数一样，所以Java线程和CPU核心是一对一的关系，将线程池的工作线程设置为与物理核心相等能做到真正的线程并发，如果设置线程数多于核心则会在核心线程之间不停的切换。</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p><a href="https://fangjian0423.github.io/2016/03/22/java-threadpool-analysis/" target="_blank" rel="external">Java线程池ThreadPoolExecutor源码分析</a></p>
<p><a href="https://www.jianshu.com/p/7b1546a3b85b" target="_blank" rel="external">线程池-ThreadPoolExecute源码分析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;什么是线程池&quot;&gt;&lt;a href=&quot;#什么是线程池&quot; class=&quot;headerlink&quot; title=&quot;什么是线程池&quot;&gt;&lt;/a&gt;什么是线程池&lt;/h5&gt;&lt;p&gt;线程池顾名思义，就是有很多线程的一个池子，这里面有多少线程，是要根据你要业务需求来确定；它方便你线程的创建和
    
    </summary>
    
      <category term="多线程" scheme="http://yoursite.com/categories/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>树与数据结构</title>
    <link href="http://yoursite.com/2017/12/16/%E6%A0%91%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>http://yoursite.com/2017/12/16/树与数据结构/</id>
    <published>2017-12-16T04:27:10.000Z</published>
    <updated>2018-03-23T11:18:17.905Z</updated>
    
    <content type="html"><![CDATA[<h5 id="什么是数据结构"><a href="#什么是数据结构" class="headerlink" title="什么是数据结构"></a>什么是数据结构</h5><p>在计算机科学中，数据结构（英语：data structure）是计算机中存储、组织数据的方式。数据结构可透过程序语言所提供的数据类型、引用及其他操作加以实现。一个设计良好的数据结构，应该在尽可能使用较少的时间与空间资源的前提下，支持各种程序运行。正确的数据结构选择可以提高算法的效率；不同种类的数据结构适合不同种类的应用。常用的数据结构有<strong>数组（Array），链表（Linked），队列（Queue），堆（Heap），栈（Stack），树（Tree），图（Graph），散列表（Hash）</strong>。</p>
<h5 id="什么是树"><a href="#什么是树" class="headerlink" title="什么是树"></a>什么是树</h5><p>树（Tree）是一种<strong>抽象数据类型</strong>（ADT）或是这种<strong>抽象数据类型的数据结构</strong>，用来模拟具<strong>有树状结构性质的数据集合</strong>。它是由n（n&gt;0）个有限节点组成一个具有层次关系的集合。<strong>把它叫做“树”是因为它看起来像一棵倒挂的树</strong>，它具有以下的特点：<strong>每个节点有零个或多个子节点；没有父节点的节点称为根节点；每一个非根节点有且只有一个父节点；除了根节点外，每个子节点可以分为多个不相交的子树；</strong>子树与子节点区别，子节点，<strong>指的是一个树上的一个节点，而子树指的是这个节点和包括属于这个节点的所有子节点</strong>，只有是叶子节点的时候，子树才等于子节点。</p>
<h5 id="树的一些专业术语（概念）"><a href="#树的一些专业术语（概念）" class="headerlink" title="树的一些专业术语（概念）"></a>树的一些专业术语（概念）</h5><p><strong>节点的度</strong>：一个节点含有的子树的个数称为该节点的度（该节点，有多少个子节点）；</p>
<p><strong>树的度</strong>：一棵树中，最大的节点的度称为树的度（所有子节点中度数最大的那个节点的度数）；</p>
<p><strong>叶子节点</strong>或<strong>终端节点</strong>：度为零的节点（也就是没有子节点的节点）；</p>
<p><strong>非终端节点</strong>或<strong>分支节点</strong>：度不为零的节点；</p>
<p><strong>父亲节点</strong>或<strong>父节点</strong>：若一个节点含有子节点，则这个节点称为其子节点的父节点；</p>
<p><strong>孩子节点</strong>或<strong>子节点</strong>：一个节点含有的子树的根节点称为该节点的子节点；</p>
<p><strong>兄弟节点</strong>：具有相同父节点的节点互称为兄弟节点；</p>
<p><strong>层次</strong>：从根开始定义起，根为第1层，根的子节点为第2层，以此类推；</p>
<p><strong>深度</strong>：对于任意节点n,n的深度为从根到n的唯一路径长，根的深度为0，<strong>高度</strong>为整个树的高度；</p>
<p><strong>高度</strong>：对于任意节点n,n的高度为从n到一片树叶的最长路径长，所有树叶（叶子节点）的高度为0；</p>
<p><strong>堂兄弟节点</strong>：父节点在同一层的节点互为堂兄弟；</p>
<p><strong>节点的祖先</strong>：从根到该节点所经分支上的所有节点；</p>
<p><strong>子孙</strong>：以某节点为根的子树中任一节点都称为该节点的子孙。</p>
<p><strong>森林</strong>：由m（m&gt;=0）棵互不相交的树的集合称为森林；</p>
<p><img src="/img/tree/Tree-01.png" alt=""></p>
<ul>
<li>在图中A为根节点。A节点的度是2，因为他有B和C两个子树（子节点）。没有父亲节点，B和C是A的子节点（孩子节点），层次是第一层，深度是0，高度是4，可以说他是这个树上所有节点的<strong>祖先</strong>，其他节点都是他的<strong>子孙</strong>。</li>
<li>图中B节点是<strong>分支节点</strong>（非叶子节点，非终端节点），他的父节点是A，B与C是兄弟节点，他是第二层，深度是1，高度是三，D，E，F是他的子节点。</li>
<li>图中的F节点叶子节点（终端节点），他的父节点是B，兄弟节点是D和E，他是第三层，深度是2，高度是0（他是叶子节点，叶子节点高度为0），F与G和H是堂兄弟节点。</li>
<li>图中的M节点是分支节点，他的父节点是G，与L是兄弟节点，他是第第四层，深度是3，高度是1，兄弟节点是L，堂兄弟节点是I，J，N节点，子节点是O。</li>
<li>图中的节点K是叶子节点，他的父节点是I，的没有兄弟节点，他的堂兄弟节点是O和P，他的深度是4，高度是0，他是第五层</li>
</ul>
<h5 id="树的种类"><a href="#树的种类" class="headerlink" title="树的种类"></a>树的种类</h5><ul>
<li>无序树：树中任意节点的子节点之间没有顺序关系，这种树称为无序树，也称为自由树；</li>
<li><p>有序树：树中任意节点的子节点之间有顺序关系，这种树称为有序树；</p>
<p>一般在计算机中比较常用的都是有序树，因为有序树有个好处，就是查找速度比较快，可以根据顺序查找。也有很多应用的实例。<strong>有序树</strong>比较常用的有<strong>二叉查找树，霍夫曼树，B树</strong>。这里的B值指的是Balance平衡的意思，意味着，查找和插入的都很快的树。</p>
</li>
<li><p>二叉树（Binary Tree）：每个节点最多含有两个子树（子节点，分支）的树称为二叉树。通常分支被称作“左子树”和“右子树”。二叉树的分支具有左右次序，不能颠倒。二叉树的第i层，有$2^{i-1}$的节点个数，深度为K的二叉树至多有$2^{k+1}-1$的节点个数，定义根节$K_{0}$的深度为0；而总计拥有节点数匹配的，称为“满二叉树”。（所有叶节点都在最底层的完全二叉树）。对任何一棵非空的二叉树<strong>T</strong>，如果其叶片(终端节点)数为$n_0$，分支度为2的节点数为$n_2$，则$n_0 =n_2+1$。</p>
</li>
<li><p>对于一颗二叉树，假设其深度为d（d&gt;1）。除了第d层外，其它各层的节点数目均已达最大值，且第d层所有节点从左向右连续地紧密排列，这样的二叉树被称为完全二叉树，（除了最底层其他层都是满的）；</p>
</li>
<li><p>一棵深度为k的二叉树，且有 $2^{k+1}-1$ 个节点的二叉树，称为满二叉树（Full Binary Tree）。若这种树的特点是每一层上的节点数都是最大节点数。而在一棵二叉树中，除最后一层外，若其余层都是满的，并且最后一层或者是满的，或者是在右边缺少连续若干节点，则此二叉树为完全二叉树（Complete Binary Tree）。具有n个节点的完全二叉树的深度为  $log_2n+1$。深度为k的完全二叉树，至少有$2^k$个节点，至多有$ 2^{k+1}-1$个节点。</p>
<p><img src="/img/tree/tree-03.jpg" alt=""></p>
<p>完全二叉树：总结点树K，$2^{h-1}&lt;K&lt;2^h-1$,树的高度$h=log_2K+1$</p>
<p>满二叉树：总结点$K=2^{h}-1$,树的高度$h=log_2(K+1)$</p>
<p><strong>如果要访问二叉树中的某一个节点，通常需要逐个遍历二叉树中的节点，来定位那个节点。它不象数组那样能对指定的节点进行直接的访问。所以查找二叉树的渐进时间是线性的 O(n)，在最坏的情况下需要查找树中所有的节点</strong>。也就是说，随着二叉树节点数量增加时，查找任一节点的步骤数量也将相应地增加。（这个时候二叉树不是有序树）</p>
<p>如果一个二叉树的查找时间是线性的，定位时间也是线性的，那相比数组来说到底哪里有优势呢？毕竟数组的查找时间虽然是线性 O(n)，但定位时间却是常量 O(1) 。的确是这样，所以普通的二叉树确实不能提供比数组更好的性能。<strong>然而，如果我们按照一定的规则来组织排列二叉树中的元素，就可以很大程度地改善查询时间和定位时间</strong>。</p>
</li>
<li><p><strong>二叉查找树（Binary Search Tree），也称二叉搜索树</strong>、<strong>有序二叉树</strong>（ordered binary tree），<strong>排序二叉树</strong>（sorted binary tree），是指一棵空树或者具有下列性质的二叉树。<strong>1、若任意节点的左子树不空，则左子树上所有节点的值均小于它的根节点的值；2、若任意节点的右子树不空，则右子树上所有节点的值均大于它的根节点的值；3、任意节点的左、右子树也分别为二叉查找树；4、没有键值相等的节点。</strong></p>
<p><img src="/img/tree/tree-04.png" alt=""></p>
<p><strong>二叉查找树相比于其他数据结构的优势在于查找、插入的时间复杂度较低为O(log n)。</strong>二叉查找树是基础性数据结构，用于构建更为抽象的数据结构。二叉查找树的查找过程和其他二叉树差不多，有<strong>前序遍历，中序遍历，后序遍历</strong>。（其他树还有广度优先，和深度优先）。<strong>中序遍历二叉查找树可得到一个节点关键字（值）的有序序列</strong>（从小到大）<strong>，一个无序序列可以通过构造一棵二叉查找树变成一个有序序列，构造树的过程即为对无序序列进行查找的过程。</strong>搜索、插入、删除的复杂度等于树高（存储的数据越多，树会越高），期望O(logn)，最坏O(n)（<strong>数列有序，树退化成线性表，他是十分依赖于树中节点的拓扑结构，也就是节点间的布局关系</strong>）。</p>
<p><img src="/img/tree/tree-05.gif" alt=""></p>
<p><strong>排序（或称构造）一棵二叉查找树</strong>：用一组数值建造一棵二叉查找树的同时，也把这组数值进行了排序。其最差时间复杂度为$O(n^2)$。例如，若该组数值经是有序的（从小到大），则建造出来的二叉查找树的所有节点，都没有左子树。自平衡二叉查找树可以克服上述缺点，其时间复杂度为$O(nlog n)$。一方面，树排序的问题使得CPU Cache性能较差，特别是当节点是动态内存分配时。而堆排序的CPU Cache性能较好。另一方面，树排序是最优的增量排序（incremental sorting）算法，保持一个数值序列的有序性。</p>
<p><strong>二叉查找树性能分析：</strong>每个结点的C~i~为该结点的层次数。最坏情况下，当先后插入的关键字有序时，构成的二叉查找树蜕变为单支树，树的深度为n，其平均查找长度为$\frac{n+1}2$（和顺序查找相同），最好的情况是二叉查找树的形态和折半查找的判定树相同，其平均查找长度和$log_2n$成正比。</p>
<p><strong>二叉查找(搜索)树的遍历：</strong>对于线性的连续的数组来说，遍历数组采用的是单向的迭代法。从第一个元素开始，依次向后迭代每个元素。而 BST 则有三种常用的遍历方式：<strong>前序遍历</strong>（Perorder traversal）；<strong>中序遍历</strong>（Inorder traversal）；<strong>后序遍历</strong>（Postorder traversal）；当然，这三种遍历方式的工作原理是类似的。它们都是从根节点开始，然后访问其子节点。<strong>区别在于遍历时，访问节点本身和其子节点的顺序不同</strong>。</p>
<p>如图一个满二叉查找树：</p>
<p><img src="/img/tree/tree-08.gif" alt=""></p>
<p><strong>前序遍历（Perorder traversal）</strong></p>
<p>前序遍历从<strong>当前节点</strong>（节点 c）开始访问，然<strong>后访问其左孩子，再访问右孩子</strong>。开始时，节点 c 为 BST 的根节点。算法如下：1、访问节点 c；2、对节点 c 的左孩子重复第 1 步；3、对节点 c 的右孩子重复第 1 步；</p>
<p>则上图中树的遍历结果为：90, 50, 20, 5, 25, 75, 66, 80, 150, 95, 92, 111, 175, 166, 200。</p>
<p><strong>中序遍历（Inorder traversal）</strong></p>
<p>中序遍历是从当前节点（节点 c）的<strong>左孩子开始访问，再访问当前节点，最后是其右节点</strong>。开始时，节点 c 为 BST 的根节点。算法如下：1、访问节点 c 的左孩子；2、对节点 c 重复第 1 步；3、对节点 c 的右孩子重复第 1 步。</p>
<p>则上图中树的遍历结果为：5, 20, 25, 50, 66, 75, 80, 90, 92, 95, 111, 150, 166, 175, 200。(从小到大排序)</p>
<p><strong>后序遍历（Postorder traversal）</strong></p>
<p>后序遍历首先从当前节点（节点 c）的<strong>左孩子开始访问，然后是右孩子，最后才是当前节点本身</strong>。开始时，节点 c 为 BST 的根节点。算法如下：1、访问节点 c 的左孩子；2、对节点 c 的右孩子重复第1 步；3、对节点 c 重复第 1 步；</p>
<p>则上图中树的遍历结果为：5, 25, 20, 66, 80, 75, 50, 92, 111, 95, 166, 200, 175, 150, 90。</p>
<p>遍历时候都是用<strong>递归</strong>去实现的，一般会使用组合设计模式来实现树。</p>
<p><strong>二叉查找(搜索)树的插入与删除：</strong></p>
<p>当向树中插入一个新的节点时，该节点将总是作为<strong>叶子节点</strong>(终端节点)。所以，最困难的地方就是如何找到该节点的父节点。<strong>类似于查找算法中的描述，我们将这个新的节点称为节点 n</strong>，而<strong>遍历的当前节点称为节点 c</strong>。开始时，<strong>节点 c 为 二叉搜索树（BST） 的根节点。则定位节点 n 父节点的步骤如下</strong>：(三个节点很重要。遍历当前节点c，遍历当前节点的父节点m，要插入的节点n)</p>
<p>1、如果节<strong>点 c 为空</strong>，则节点 <strong>c 的父节点将作为节点 n 的父节点</strong>。如果节点 n 的值<strong>小于该父节点</strong>的值，则节点 n 将作为该父节点的<strong>左子节点</strong>（左孩子节点）；否则(大于父节点的值)节点 n 将作为该父节点的<strong>右子节点</strong>(右孩子节点)。</p>
<p>2、如果c节点有值，比较节点 c 与节点 n 的值。</p>
<ul>
<li>如果节点 c 的值与节点 n 的值相等，则说明用户在试图插入一个<strong>重复的节点</strong>。解决办法可以是<strong>直接丢弃节点 n，或者可以抛出异常</strong>。</li>
<li>如果节点 n 的值小于节点 c 的值，则说明节点 <strong>n 一定是在节点 c 的左子树中</strong>。则将父节点m设置为节点 c，并将节点 c 设置为节点 c 的<strong>左子节点</strong>（左孩子节点），然后返回至第 1 步。</li>
<li>如果节点 n 的值大于节点 c 的值，则说明节点 n 一定是在节点 c 的右子树中。则将父节点m设置为节点 c，并将节点 c 设置为节点 c 的<strong>右子节点</strong>（右孩子节点），然后返回至第 1 步。</li>
</ul>
<p>当合适的节点找到时，该算法结束。从而使新节点被放入二叉搜索树中成为某一父节点合适的孩子节点</p>
<p><img src="/img/tree/tree-13.gif" alt=""></p>
<p>BST 的插入算法的复杂度与查找算法的复杂度是一样的：最佳情况是$O(log­_2n)$，而最坏情况是 O(n)。因为它们对节点的查找定位策略是相同的。这种插入操作一般都使用<strong>递归</strong>去实现。</p>
<p>从 二叉搜索树中<strong>删除节点比插入节点难度更大</strong>。因为删除一个非叶子节点，<strong>就必须选择其他节点来填补因删除节点所造成的树的断裂</strong>。如果不选择节点来填补这个断裂，那么就违背了 BST 的性质要求。<strong>删除节点算法的第一步是定位要被删除的节点</strong>，这可以使用前面介绍的查找算法，因此运行时间为 $O(log­_2n)$。如果没有子节点是叶子节点，直接删除，如果有子节点，应该选择合适的节点来代替删除节点的位置，它共有三种情况需要考虑。</p>
<ul>
<li>情况 1：如果删除的节点<strong>没有右子节点</strong>（右孩子节点），那么就选择它的左子节点（左孩子节点）来代替<strong>原来的节点</strong>（要删除的节点）。二叉查找树的性质保证了被删除节点的左子树必然符合二叉查找树的性质。<strong>因此左子树的值要么都大于，要么都小于被删除节点的父节点的值</strong>，这取决于被删除节点是左孩子还是右孩子。因此用<strong>被删除节点的左子树来替代被删除节点</strong>，是完全符合二叉搜索树的性质的。（其实如果删除节点<strong>没有左子节点</strong>也可以用右<strong>子节点去代替</strong>。有一个孩子删除节点：删除节点并将其替换为其子节点）</li>
<li>情况 2：如果被删除节点的右子节点（右孩子节点）没有左孩子节点，那么这个<strong>右子节点被用来替换被删除节点</strong>。因为被删除节点的右子节点都大于被删除节点左子树的所有节点，同时也大于或小于被删除节点的父节点，这同样取决于被删除节点是左子节点还是右子节点。因此，<strong>用右子节点来替换被删除节点</strong>，符合二叉查找树的性质。</li>
<li>情况 3：如果被删除节点的右子节点有左孩子节点，就需要用被删除节点右子节点的左子树中的最下面的节点来替换它，就是说，<strong>我们用被删除节点的右子树中最小值的节点来替换。</strong></li>
</ul>
</li>
</ul>
<p><img src="/img/tree/tree-14.gif" alt=""></p>
<ul>
<li><p><strong>自平衡二叉树</strong>（(Balanced Binary Tree）：<strong>当且仅当任何节点的两棵子树的高度差不大于1的二叉树</strong>；是一种结构平衡的<strong>二叉搜索树</strong>，即叶节点深度差不超过1，它能在$O(log n)$内完成插入、查找和删除操作，最早被发明的<strong>平衡二叉搜索树</strong>为AVL树，后续的有红黑树，树堆（Treap），伸展树。<strong>平衡二叉查找树是二分查找的一种算法实现</strong>。</p>
</li>
<li><p>AVL树：AVL树是最先发明的<strong>自平衡二叉查找树</strong>。在AVL树中任何节点的两个子树的高度最大差别为1，所以它也被称为高度平衡树。增加和删除可能需要通过一次或多次树旋转来重新平衡这个树。AVL树得名于它的发明者(G. M. Adelson-Velsky和E. M. Landis<strong>)查找、插入和删除在平均和最坏情况下的时间复杂度都是 $O(logn)$。</strong>也就是每次修改改树就进行<strong>AVL翻转，实现平衡</strong>。节点的平衡因子是它的<strong>左子树的高度减去它的右子树的高度</strong>（有时相反）。所以带有平衡因子<strong>1、0或 -1的节点被认为是平衡的</strong>。带有平衡因子 -2或2的节点被认为是不平衡的，并需要重新平衡这个树。<strong>平衡因子可以直接存储在每个节点中，或从可能存储在节点中的子树高度计算出来</strong>。</p>
<p><img src="/img/tree/Tree-06.png" alt=""></p>
<p><strong>失去平衡后进行的规律可归纳为下列四种情况</strong>：</p>
<ol>
<li>单向右旋平衡处理LL：由于<strong>在a的左子树根节点的左子树上插入节点</strong>，a的平衡因子由1增至2，致使以 a为根的子树失去平衡，则需进行一次右旋转操作；（左左）</li>
<li>单向左旋平衡处理RR：由于在<strong>a的右子树根节点的右子树上插入节点，</strong>a的平衡因子由-1变为-2，致使以a为根的子树失去平衡，则需进行一次左旋转操作；（右右）</li>
<li>双向旋转（先左后右）平衡处理LR：由于<strong>在a的左子树根节点的右子树上插入节点</strong>，a的平衡因子由1增至2，致使以a为根的子树失去平衡，则需进行两次旋转（先左旋后右旋）操作。（左右）</li>
<li>双向旋转（先右后左）平衡处理RL：由于<strong>在a的右子树根节点的左子树上插入节点</strong>，a的平衡因子由-1变为-2，致使以a为根的子树失去平衡，则需进行两次旋转（先右旋后左旋）操作。（右左）</li>
</ol>
<p>AVL的四种翻转，也可说是AVL调平，一般都是用递归实现。</p>
</li>
<li><p>红黑树：红黑树（Red–black tree）是一种<strong>自平衡二叉查找树</strong>，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。它是在1972年由鲁道夫·贝尔发明的，他称之为”对称二叉B树”，它是复杂的，但它的操作有着良好的最坏情况运行时间，并且在实践中是高效的：<strong>它可以在 $O(logn)$时间内做查找，插入和删除</strong>，这里的 n是树中元素的数目。他和AVL树不一样的地方就是他们<strong>自平衡的方式</strong>一样。也可以是他们<strong>保证自己是完全二叉树的策略</strong>不一样。因为只有在完全二叉树的情况下才能保证树的效率。红<strong>黑树和AVL树一样都对插入时间、删除时间和查找时间提供了最好可能的最坏情况担保</strong>logn。这不只是使它们在<strong>时间敏感的应用</strong>如实时应用（real time application，<strong>即时计算</strong>）中有价值，而且使它们有在提供<strong>最坏情况担保</strong>的。同时也为其他数据结构中作为基础，也就是其他的数据结构有红黑树。比如Java的HashMap中，当冲突导致后面链表过长，当长度超过8个的时候<strong>，就会把链表转换成红黑树</strong>；红黑树相对于AVL树来说，<strong>牺牲了部分平衡性以换取插入/删除操作时少量的旋转操作</strong>，整体来说性能要优于AVL树。</p>
</li>
<li><p>红黑树的性质：红黑树是每个节点都带有<strong>颜色属性的二叉查找树</strong>，<strong>颜色为红色或黑色</strong>。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求。1、节点是红色或黑色；2、根是黑色（这个规则有时被省略。由于根可以总是从红色变为黑色，但不一定反之，这个规则对分析影响不大）；3、所有叶子都是黑色（叶子是NIL节点）；4、每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点）；5、从<strong>任一节点到其每个叶子（NIL）</strong>的所有简单路径都包含相<strong>同数目的黑色节点</strong>；从根节点到节点的<strong>黑色节点</strong>的数量是节点的<strong>黑色深度</strong> ; 从根到叶的所有路径中统一的黑色节点数称为红黑树的<strong>黑色高度</strong></p>
<p><img src="/img/tree/tree-24.png" alt=""></p>
<p>红黑树的5条特性确保了从根到叶子的<strong>最长的可能路径不多于最短的可能路径的两倍长，使得整棵树大致上是平衡的</strong>。树上的增删改查操作的最坏情况时间都与树的高度成正比，所以红黑树在最坏情况下也是高效的。在红黑树中一般用黑的NIL节点表示叶节点，不包含值，只是标志该分支结束，有时候绘图中会直接省略。导致了这些树好像同上述原则相矛盾，而实际上不是这样。是所有节点都有两个子节点，尽管其中的一个或两个可能是空叶子。</p>
</li>
<li><p><strong>关于红黑树在插入和删除：</strong></p>
<p>红黑树的插入和删除其实和上面BTS很类似，只不过就是在上面<strong>插入和删除的之后要对颜色进行判断</strong>然后对树进行翻转实现平衡，也可以说<strong>红黑树的插入和删除是建立在二叉搜索树之上</strong>的。所以红黑树的插入和查找维护起来相对复杂，但是他调整的次数少，其实红黑树不是严格的平衡二叉树。</p>
<p>因为每一个红黑树也是一个<strong>特殊化的二叉查找树</strong>，因此红黑树上的只读操作与普通二叉查找树上的只读操作相同。然而，在红黑树上进行插入操作和删除操作会导致不再匹配红黑树的性质。<strong>恢复红黑树的性质需要少量$O(log n)$的颜色变更（实际是非常快速的）和不超过三次树旋转（对于插入操作是两次）。虽然插入和删除很复杂，但操作时间仍可以保持为$O(logn)$次</strong></p>
<p>插入首先以与标准二叉搜索树插入非常相似的方式添加节点，<strong>并将其着色为红色（也就是只要是插入的N节点就是红色）。最大的区别在于二叉查找树中新增了一个节点作为叶子，而叶子在红黑树中不包含任何信息，所以新的节点替换了现有叶子，然后增加了两个自己添加的黑叶子。</strong>接下来发生什么取决于其他附近节点的颜色。有几个红黑树插入案件处理：(N是要新插入的节点，P是N的父节点，U是N的叔叔节点即不父节点的兄弟节点)</p>
<ul>
<li>N是根节点，即红黑树的第一个节点</li>
<li>N的父母（P）是黑色的</li>
<li>P是红色的（所以它不能是树的根），而N的叔叔（U）是红色的</li>
<li>P是红色的，U是黑色的</li>
</ul>
<p>插入时注意：<strong>属性1（每个节点都是红色或黑色）和属性3（所有叶子都是黑色的）始终成立。属性2（根部是黑色）通过第一种情况进行检查和纠正。属性4（红色节点只有黑色子节点）只会通过添加红色节点，从黑色到红色重新绘制节点或旋转来威胁。属性5（从任何给定节点到其叶节点的所有路径具有相同数量的黑节点）仅受到添加黑节点，重绘节点或旋转的威胁。</strong></p>
<ul>
<li><p>当前节点<strong>N在树的根部</strong>。在这种情况下，为了满足属性2（根部是黑色），将其重新涂成黑色。由于这会一次向每条路径添加一个黑色节点，属性5（从给定节点到其叶节点的所有路径都包含相同数量的黑色节点）不会被违反。</p>
</li>
<li><p><strong>当前节点的父P是黑色的</strong>，所以属性4（每个红色节点的子节点都是黑色的）不会失效。在这种情况下，树仍然有效。属性5（从任何给定节点到其叶节点的所有路径都包含相同数量的黑节点）没有受到威胁，因为当前节点N有两个黑色叶子节点，但是因为N是红的，通过其每个孩子的路径黑色节点的数量与通过它所替换的叶子的路径数量相同，这是黑色的，所以这个属性保持满意。<strong>（换句话说就是什么都不用做）</strong></p>
</li>
<li><p>如果父节点<strong>P</strong>和父母<strong>U</strong>都是红色的，那么他们都可以被重新粉刷成黑色，并且祖父节点<strong>G</strong>变成红色来维护属性5（从给定节点到其叶子节点的所有路径都包含相同数量的黑色节点）。由于通过父节点或叔父节点的任何路径都必须经过祖父母，所以这些路径上的黑色节点的数目没有改变。然而，祖父<strong>G</strong>现在可能违反了属性2（根是黑色的，G可能是根），如果它是根或属性4（每个红色节点的子女都是黑色的），如果它有一个红色的父节点。为了解决这个问题，树上的红黑修复程序重新运行在<strong>G上</strong>。（<strong>把G当成是新加入的节点进行各种情形的检查</strong>）请注意，这是一个尾递归调用（java里没有尾递归，所以这里及时递归），所以它可以被重写为一个循环。由于这是唯一的循环，并且在该循环之后发生任何旋转，这证明发生了恒定数量的旋转。</p>
<p><img src="/img/tree/tree-16.png" alt=""></p>
</li>
<li><p>父节点<strong>P</strong>是红色，但叔父节点<strong>U</strong>是黑色。步骤1：最终目标是将父节点旋转到祖父节点位置<strong>，但是如果当前节点位于G</strong>子树的“内部” （如果N是子节点的右子节点的左子节点祖父节点或祖父节点的左子节点的正确节点，这里很绕）。在这种情况下，可以执行在P上左转以切换当前节点N和其父节点P的角色。旋转导致一些路径（子树中标记为“1”的路径）通过节点N.他们以前没有。它也会导致一些路径（子树中标记为“3”的路径）不能通过之前做过的节点P. 但是，这两个节点都是红色的，所以属性5（从任何给定节点到其叶节点的所有路径都包含相同数量的黑色节点）不会受到旋转的影响。在这一步完成之后，属性4（每个红色节点的孩子都是黑色的）仍然被违反，但是现在我们可以通过继续步骤2来解决这个问题。</p>
<p><img src="/img/tree/tree-17.png" alt=""></p>
<p>步骤2：当前节点N现在肯定位于G下的子树的外部（P的左子节点或右子节点）。在这种情况下，执行G上的右旋转。结果是前一个父节点P现在是当前节点N和前一个祖父G的父节点的父节点。G是已知的黑色，因为它的前孩子P不可能是红色而不违反<strong>属性4</strong> 。一旦P节点和G节点的颜色得到的树满足<strong>属性4</strong>（每个红色节点的子节点都是黑色的）。属性5（从任何给定节点到它的叶节点的所有路径包含相同数量的黑色结点）也就满意，因为通过这三个节点中任何一个的所有路径以前都通过祖父节点G，现在它们都通过以前的父节点P。在各自的情形下，这都是三个节点中唯一的黑色节点。</p>
<p><img src="/img/tree/tree-18.png" alt=""></p>
<p>在上面的算法中，除了情况3外，所有情况都只被调用一次，在情况3中，可以使用祖父节点递归回到情况1，这是迭代实现将有效循环的唯一情况。因为修复的在这种情况下，问题被上报每次更高两个级别，它需要最大限度h/ 2次迭代来修复树（其中h是树的高度）。由于升级的概率随着每次迭代呈指数下降，所以平均插入成本实际上是恒定的。（上述图中的1,2,3,4,5指的都是子树，而不是叶子节点）</p>
</li>
</ul>
<p>节点的删除：同样，<strong>红黑树的删除也是基于二叉搜索树的删除。也是在二叉搜索树删除后进行红黑调整，使整棵树处于红黑平衡，也就是符合上面的5个属性</strong>。所以删除要比插入相对麻烦。当二叉搜索树要删除一个节点(非叶子结点，不过红黑树的叶子节点都是null也没有意义)的时候，他会选择其他节点的填补。(这样的填补就打乱原来红黑顺序)，所以下面讲的是删除完修复整个红黑树的过程。下面就在简单回顾一下二叉搜索树的删除过程，1、如果是叶子节点直接删除；2、如果删除节点D只有一个子节点，那么用那个子节点去代替（这样就会出现红黑不平衡，如果删除节点的父节点是红色，那么删除节点D的子节点也是红色，违背属性4）；3、如果删除节点D有两个子节点，那么删除就要进行左旋或者右旋。也就是说D节点不是被删除而是被其他节点覆盖（代替了）。</p>
<p>我们在BST中执行标准的删除操作时，<strong>我们总是删除一个叶子节点或者只有一个子节点</strong>，剩下的都是用递归去搞定（对于一个内部节点，我们复制后继节点，然后递归地调用删除作为后继节点，后继节点在被后继节点的后继节点代替，后继节点总是一个叶节点，或者有一个子节点的节点，然后结束递归）。所以我们只需要处理一个节点是叶子还是有一个子节点的情况。假设C是要删除的节点，并且是替换C的子节点（请注意，当C是叶子节点，NIL的颜色被视为黑色时）</p>
<p>我们首先把要删除的节点替换为它的子节点。出于方便，称呼这个<strong>子节点为N</strong>（在新的位置上），称呼它的<strong>兄弟节点S</strong>（它父亲的另一个子节点）。在下面的示意图中，我们还是使用<strong>P称呼N的父节点</strong>，S~L~称呼S的左子节点，S~R~称呼S的右子节点。在情形2、5和6下，我们假定N是它父节点P的左儿子。如果它是右儿子，则在这些情形下的左右应当对调。</p>
<ul>
<li><p>如果删除的是根节点C，那么代替原来根节点的节点也是黑色的节点S，在这种情况下。我们从每个路径中删除一个黑色节点，新的黑色根节点保留属性，树的高度减1。（情况1）</p>
</li>
<li><p>删除完节点C，替换的节点是黑色的N。节点P是黑色，兄弟节点S是红色，S节点的子节点是黑色的。所以要对<strong>P为根节点的整个树做左旋转</strong>，把红色兄弟节点S转换成N的祖父节点，我们接着对调N的父节点P和祖父节点S的颜色。完成这两个操作后，尽管所有路径上黑色节点的数目没有改变，但现在N有了一个黑色的兄弟和一个红色的父亲（它的新兄弟节点S~R~是黑色，它是原来红色节点S的一个子节点），剩下的我们可以接下去按情况4，情况5或情况6来处理。（情况2）这里的图中没有显示出来，N是删除了黑色节点后替换上来的子节点，所以这个过程中由P-&gt;X-&gt;N变成了P-&gt;N，实际上是少了一个黑色节点，也可以理解为P(Parent,Black)和S(Silbing,Red)那么他们的孩子黑色节点的数目肯定不等，让他们做新兄弟肯定是不平衡的，还需后面继续处理。就是情况4。</p>
<p><img src="/img/tree/tree-19.png" alt=""></p>
</li>
<li><p>删除完节点C，节点P，节点S和节点S的子节点是黑色的。在这种情况下，我们重新绘制节点S为红色。结果是所有通过S的路径，正好是那些不经过N的路径，有一个黑色节点。因为删除N的原始父节点使得所有经过N的路径都有一个黑节点。然而，通过P的所有路径现在比没有经过P的路径少一个黑节点，所以属性5（从任何给定节点到其叶节点的所有路径包含相同数量的黑节点）仍然被违反。为了纠正这一点，我们在P上执行重新平衡程序，从情况1开始。（情况3）</p>
<p><img src="/img/tree/tree-20.png" alt=""></p>
</li>
<li><p>节点S和S的子节点都是黑色，但是N的父节点是红色。在这种情形下，我们简单的交换N的兄弟节点和父节点的颜色。这不影响不通过N的路径的黑色节点的数目，但是它在通过N的路径上对黑色节点数目增加了1，添补了在这些路径上被删除的黑色节点。（应对前面情况2中的问题）</p>
<p><img src="/img/tree/tree-21.png" alt=""></p>
</li>
<li><p>经过上面的旋转，N的兄弟节点S是黑色，S的左子节点是红色，S的右子节点是黑色，而N是它父节点的左子节点，也就是P的右子节点。在这种情形下我们在S节点为根节点做右旋转，这样S的左子节点S~L~成为S的父节点和N节点的新兄弟节点。我们接着交换S和它的新父节点的颜色。所有路径仍有同样数目的黑色节点，但是现在N有了一个黑色兄弟，他的右子节点是红色的。（情况5）所以我们进入了情形6。N节点和它的父节点P都不受这个变换的影响。</p>
</li>
</ul>
<p><img src="/img/tree/tree-22.png" alt=""></p>
<ul>
<li>节点 S是P节点右子节点黑色，S的右子节点是红色S~R~，N是其父节点P的左子节点。在这种情况下，我们在P处向左旋转，S成为P和S的右子节点的父节点。然后我们交换P和S的颜色，让S的右子节点变黑色。该子树的根目录仍然具有相同的颜色，所以属性4（每个红色节点的子节点都是黑色的）和5（从任何给定节点到它的叶节点的所有路径都包含相同数量的黑色节点）不被违反。然而，N现在又增加了一个黑色的祖先：P变成了黑色，或者是黑色的，S被加入了黑色的祖父母。因此，通过N的路径通过一个附加的黑色节点。然而，如果一条路径不经过N，那么有两种可能性：它通过N的新兄弟节点。那么它以前和现在都必定通过S和N的父亲，而它们只是交换了颜色。所以路径保持了同样数目的黑色节点。</li>
<li><p>它通过N的新叔父节点，S的右子节点。那么它以前通过S、S的父亲和S的右节点，但是现在只通过S，它被假定为它以前的父亲的颜色，和S的右子节点，它被从红色改变为黑色。合成效果是这个路径通过了同样数目的黑色节点。<br>无论哪种方式，这些路径上的黑色节点的数量不会改变。因此，我们已经恢复属性4（每个红色节点的孩子都是黑色的）和5（从给定节点到其叶节点的所有路径包含相同数量的黑色节点）。<strong>图中的白色节点可以是红色或黑色，但在转换之前和之后必须指向相同的颜色。</strong></p>
<p><img src="/img/tree/tree-23.png" alt=""></p>
</li>
</ul>
</li>
<li><p>哈夫曼树：(<strong>Huffman Tree</strong>)哈(霍)夫曼树又称<strong>最优二叉树</strong>，是一种带权路径长度最短的二叉树。所谓树的带权路径长度，就是树中所有的叶结点的权值乘上其到根结点的路径长度（高度），树的路径长度是从树根到每一结点的路径长度之和。（若根结点为0层，叶结点到根结点的路径长度为叶结点的层数）。树的路径长度是从树根到每一结点的路径长度之和，记为WPL=（W1<em>L1+W2</em>L2+W3<em>L3+…+Wn</em>Ln，N个权值Wi（i=1,2,…n）构成一棵有N个叶结点的二叉树，相应的叶结点的路径长度为Li（i=1,2,…n）。可以证明霍夫曼树的WPL是最小的。<strong>哈夫曼树是从低到上去创建的</strong>，不是从根节点，到叶子节点去创建的。最早哈夫曼树，使用来做压缩编码的，也就是<strong>哈(霍)夫曼编码</strong>，它根据出现的频率来规定编码的长度。出现频率越高的使用的编码长度越短，使用频率越低编码长度越长。是一种用于无损数据压缩的熵编码（权编码）算法。</p>
<p><strong>哈夫曼树的构造</strong>（哈夫曼算法的实现）</p>
<p>1、将每个元素依照出权重（出现频率）由小排到大；</p>
<p>2、将最小的两个元素权重（频率）相加合成一个新的节点（新节点的权重等于之前两个节点权重之和）；</p>
<p>3、比较新节点和其他节点<strong>权重</strong>，仍然找出<strong>权重</strong>最小的2个点合并；</p>
<p>4、重复上面2个步骤，直到没有可以比较的对象；</p>
<p>5、最后产生的树状图就是<strong>哈(霍)夫曼树</strong>。</p>
<p><strong>哈夫曼树的特点</strong></p>
<p>1、满二叉树不一定是哈夫曼树 ；</p>
<p>2、哈夫曼树中权越大的叶子离根越近  （很好理解，WPL最小的二叉树）</p>
<p>3、具有相同带权结点的哈夫曼树不惟一</p>
<p>4、哈夫曼树的任何结点的度数为 0 或 2， 没有度为 1 的结点。（都是两个相加之后形成的节点，子节点所以不会有存在1个）</p>
<p>5、包含 n 个叶子结点的哈夫曼树中共有$2n – 1$ 个结点（包括根节点）。</p>
<p>6、包含 n 棵树的森林要经过 n–1 次合并才能形成哈夫曼树，共产生 n–1 个新结点</p>
<p><strong>哈夫曼树的构建过程 </strong>  </p>
<p>权重{2,3,4,4,5,7} 节点演算过程</p>
<p>1、根据节点权重排序{2,3,4,4,5,7}</p>
<p>2、将最小的两个节点也就是节点1，和节点2相加得到新节点，新节点权重是5，现在节点权重是{4,4,5,5,7}（循环）</p>
<p>3、将小的两个节点也就是节点1，和节点2相加得到新的节点，新节点的权重是8，现在的节点重{5,5,7,8}（循环）</p>
<p>4、将小的两个节点也就是节点1，和节点2相加得到新的节点，新节点的权重是8，现在的节点权重{7,8,10}（循环）</p>
<p>5、将小的两个节点也就是节点1，和节点2相加得到新的节点，新节点的权重是8，现在的节点权重{10,15}（循环）</p>
<p>6、将小的两个节点也就是节点1，和节点2相加得到新的节点，新节点的权重是8，现在的节点权重{25}（循环）</p>
<p>7、构建哈夫曼树结束</p>
<p><img src="/img/tree/tree-15.gif" alt=""></p>
</li>
<li><p>B-树：<strong>B树(B-Tree)</strong>是一种自我平衡的树型数据结构，它保持数据的排序并允许在对数时间内进行搜索，顺序访问，插入和删除操作。<strong>B树是一个二叉搜索树的泛化，一个节点可以有两个以上的孩子。</strong>与自平衡二叉搜索树不同，B-树针对读取和写入大块数据的系统进行了优化。B树是<strong>外部存储器</strong>(硬盘)数据结构的一个很好的例子。<strong>它通常用于数据库和文件系统。</strong>(Rudolf Bayer和Ed McCreight于1971年在波音研究实验室工作时发明了B-树)，这两个没有解释B是什么意思，有人说是B代表波音，也有人说这是拜尔的意思。不过区分一下二叉树（Binary Tree）就可以。个人感觉叫拜尔树好一点。插入，删除，搜索复杂度平均$O(logn)$，最坏是$O(logn)$。空间是$O(n)$</p>
<p>在B树中，内部（非叶）节点可以在一些预定义的范围内具有<strong>可变数目的子节点</strong>。当数据插入或从一个节点中删除时，其子节点的数量会发生变化。为了保持预定义的范围，<strong>内部节点可以被连接或拆分</strong>(根据关键字)。由于许多子节点空是允许的，所以B树不需要像其他自平衡搜索树一样<strong>频繁地重新平衡</strong>，但是由于节点并不是完全满的，所以可能会浪费一些空间(<strong>空间换时间</strong>)。<strong>子节点数量的下限和上限对于特定的实现通常是固定的，</strong>一般是$d+1$到$2d+1$之间，但是也有固定的例如2-3树(也是最小的B-树)。这里d指的是关键字。</p>
<p><strong>键：键(keys</strong>)也有人说这个是关键字的，B树的每个内部节点都包含一些键。这些键（分离值）用来<strong>分割它们的子树</strong>。例如，如果一个内部节点具有3个的子节点（或子树），则它必须有2个键：A1和A2，A1&lt;A2。在最左边的子树的所有值将小于A1，在中间子树的所有值将是之间A1和A2，并且在最右边的子树的所有值将大于A2。</p>
<p>B树中每一个内部节点会包含一定数量的键值。通常，键值的数量被选定在<strong>d</strong>和<strong>2d</strong>之间。在实际中，键值占用了节点中大部分的空间，所以一般节点都会要被填满一半以上。而因数2(也就是2d的2)是保证该节点(内部节点，分支节点，非终端节点)可以被拆分或者组合。如果一个内部节点有 <strong>2d</strong>个键，添加一个键给此节点的过程（整个是$2d+1$键），将会把2d键拆分为2个有d个键的节点，并把中间的键添（因为是从小到大排序的，把$d+1$的键为中间键）加给父节点。每一个拆分的节点都拥有最小数目的键d个。相似地，如果一个内部节点和他的邻居两者都有<strong>d</strong>个键，将通过它与邻居的合并来删除一个键。删除此键值将导致此节点拥有<strong>d-1</strong>个键;与邻居的合并则加上 <strong>d</strong>个键（此时当前节点是$2d-1$个键），再加上从邻居节点的父节点移来的一个键(填充在中间一半是d-1，或者d+1的位置)。结果为完全填充的<strong>2d</strong>个键。</p>
<p><img src="/img/tree/tree-07.png" alt=""></p>
<p>B树通过<strong>要求所有叶节点处于相同深度而保持平衡</strong>。随着元素被添加到树中，该深度将会缓慢增加，但整体深度的增加并不频繁，结果导致所有叶子节点与根节点距离加1（分支节点多一个键或者关键字）。</p>
<p><strong>B-树又叫平衡多路查找树。一棵N阶的B-树 (切勿简单的认为一棵N阶的B树是N叉树)的特性如下</strong>：</p>
<ol>
<li><p>树中每个结点最多含有m个孩子（m&gt;=2）；</p>
</li>
<li><p>除根结点和叶子结点外，其它每个结点至少有$ceil(m / 2)$个子节点或子树（其中$ceil(x)$是一个取上限的函数）；</p>
</li>
<li><p>根结点至少有2个孩子（除非B树只包含一个结点：根结点）；</p>
</li>
<li><p>所有叶子结点都出现在同一层，叶子结点不包含任何键信息(可以看做是外部结点或查询失败的结点，指向这些结点的指针都为null)；（注：叶子节点只是没有孩子和指向孩子的指针，这些节点也存在，也有元素。类似红黑树中，每一个NULL指针即当做叶子结点，只是没画出来而已）。</p>
</li>
<li><p>k个子节点的非叶节点包含<em>k</em> -1个键， (n，P0，K1，P1，K2，P2，……，Kn，Pn)。其中：</p>
<p>a) Ki (i=1…n)为键，且键按顺序升序排序K(i-1)&lt; Ki。<br>b) Pi为指向子树根的结点，且指针P(i-1)指向子树种所有结点的键均小于Ki，但都大于K(i-1)。<br>c) 键的个数n必须满足：$ (ceil(m / 2)-1)&lt;= n &lt;= m-1$。比如有j个孩子的非叶结点恰好有j-1个键(m为子节点或者子树个数)。</p>
</li>
</ol>
<p><strong>B-树的高度</strong></p>
<p>设h是经典B树的高度。设n &gt; 0是树中节点的数量。让m是孩子的节点可以具有的最大数量。每个节点最多可以有m -1个键。</p>
<p>可以证明（通过上面的例子），该高度的B树ħ以其所有节点完全填充具有<strong>$n= m^{h+1} -1$</strong>的条目。因此，B树的最佳情况高度是：<strong>$h&gt;=log_m(n+1)-1$</strong>，满二叉树的m=2。相同数量节点，高度最低，查询效率最高，插入会导致树变动。</p>
<p>让d内部（非根）节点可以拥有的最小子数，也就是拥有$ceil(m / 2)$子节点或子树<strong>,$d=(m/2)。n=2(d^{h+1})-1$</strong>，因子2代表只有一办的值中有子节点或者子树，其他的没有被填满。所以要在原来的基础上乘2才能实现满B-树中n的数量，让等式成立。所以<strong>$h&lt;=log_d(\frac{(n+1)}{2})-1$</strong>，也就是所有内部节点，都只有一半子节点或者子树。这样会导致整个树的高度增高，降低查询效率，但增加了插入的效率。</p>
<p><strong>B树用于数据库优点：</strong>保持按键顺序遍历排序；使用分层索引来减少磁盘读取次数；使用部分满块来加速插入和删除；用递归算法保持索引平衡；此外，通过确保内部节点至少满一半，B树可以最大限度地减少浪费。B树可以处理任意数量的插入和删除操作。</p>
<p><strong>已排序文件的查找时间：</strong>通常，排序和查找算法会被通过大O符号，刻画为比较级别的数值。对一个有N笔记录的已排序表进行二叉查找，打个比方说，可以在<strong>$O（log_2N）$比较级</strong>完成。如果表有1,000,000笔记录,那么定位其中一笔记录，将在20 个比较级内完成。 <strong>$log_21,000,000 = 19.931…$</strong></p>
<p>大数据库一直以来被存储在磁盘。从磁盘上读取一笔记录，与之后的比较键值操作相比，在花费的运行时间上前者处于支配地位。从磁盘读取记录的时间涉及到一个 寻道时间 和 旋转延迟。寻道时间可能是从0到20或者更多毫秒，旋转延迟平均下来约是旋转周期的一半。对于一个7200 转每分钟的磁盘，旋转周期大约是8.33毫秒。像希捷ST3500320NS这样的磁盘,磁道至磁道的寻道时间为 0.8毫秒，平均读取寻道时间为8.5毫秒。为了简化，假设从磁盘读取花费10毫秒。乐观来说，如此，在一百万中定位一笔记录将会话花费20次磁盘读取乘上10毫秒每次读取时间，总共是0.2秒。时间花费没有那么糟糕的原因是，独立的记录被成组地记录在磁盘块上。一个磁盘块可能为16 千字节。如果每笔记录大小为160 字节，那么一个块可以存储100 笔记录。上面假设的磁盘读取时间确切地说是读取一个完整块的时间。一旦磁头到达位置，一个或者更多的磁盘块可以以较小的延迟来完成读取。对于100笔记录每块，最后差不多6个比较级是不需要任何磁盘读取的都在上次读取操作中完成了。</p>
<p>B树总结：B树就是，有序数组+平衡多叉树(每个非叶子节点都是一个数组)；顺便说一句，由于根或者树的上面几层被反复查询，所以这几块可以存在内存中，换言之，B树的根结点和部分顶层数据在内存中，大部分下层数据在磁盘上。保持键值有序，以顺序遍历使用层次化的索引来最小化磁盘读取，使用不完全填充的块来加速插入和删除，通过优雅的遍历算法来保持索引平衡。另外，B树通过保证内部节点至少半满来最小化空间浪费。一棵B树可以处理任意数目的插入和删除。</p>
<p><strong>伸展树（Splay Tree）：是一种二叉查找树，</strong>它能在$O(log n)$内完成插入、查找和删除操作<strong>。在伸展树上的一般操作都基于伸展操作：假设想要对一个二叉查找树执行一系列的查找操作，为了使整个查找时间更小</strong>，被查频率高的那些条目就应当经常处于靠近树根的位置<strong>。于是想到设计一个简单方法</strong>， 在每次查找之后对树进行调整，把被查找的条目搬移到离树根近一些的地方。伸展树应运而生<strong>。伸展树是一种自调整形式的二叉查找树，它会沿着从某个节点到树根之间的路径，通过一系列的旋转把这个节点搬移到树根去。它的优势在于不需要记录用于平衡树的冗余信息</strong>。</p>
</li>
</ul>
<ul>
<li><p><strong>优点：可靠的性能</strong>，它的平均效率不输于其他平衡树；<strong>存储所需的内存少</strong>，伸展树无需记录额外的什么值来维护树的信息，相对于其他平衡树，内存占用要小；<strong>查找和更新算法概念简单，易于实现</strong>。</p>
<p><strong>缺点：</strong>伸展树最显著的缺点是<strong>它有可能会变成一条链</strong>。这种情况可能发生在以非降顺序访问n个元素之后。然而均摊的最坏情况是对数级$O(log n)$；它们<strong>需要更多的局部调整</strong>，尤其是在查找期间。（那些有明确限制的数据结构仅<strong>需在更新期间进行调整</strong>，查找期间则不用）；一系列<strong>查找操作中的某一个可能会耗时较长</strong>，这在实时应用程序中可能是个不足之处。</p>
</li>
<li><p>树堆（Treap）：是有一个随机附加域满足堆的性质的二叉搜索树，其结构相当于<strong>以随机数据插入的二叉搜索树</strong>。其基本操作的期望时间复杂度为 $O(logn)$。相对于其他的平衡二叉搜索树，Treap的特点是实现简单，且能基本实现随机平衡的结构。<strong>Treap=Tree+Heap</strong>。Treap本身是一棵二叉搜索树，它的左子树和右子树也分别是一个Treap，和一般的二叉搜索树不同的是，<strong>Treap纪录一个额外的数据，就是优先级</strong>。Treap在以关键码构成二叉搜索树的同时，还满足堆的性质。Treap维护堆性质的方法用到了旋转，只需要两种旋转，编程复杂度比Splay要小一些。</p>
<p><img src="/img/tree/tree-10.png" alt=""></p>
<p><strong>插入节点</strong>：给节点随机分配一个优先级，先和二叉搜索树的插入一样，先把要插入的点插入到一个叶子上，然后跟维护堆一样，如果当前节点的优先级比根大就旋转，<strong>如果当前节点是根的左儿子就右旋如果当前节点是根的右儿子就左旋</strong>。由于旋转是 $O(1)$的，最多进行h次（h是树的高度），插入的复杂度是 O(h)的，在期望情况下  $h=O(log n)$，所以它的期望复杂度是 $O(logn)$，最坏的情况下$O(n)$。</p>
<p><img src="/img/tree/tree-11.jpg" alt=""></p>
<p><strong>删除节点：</strong>因为Treap满足堆性质，所以只需要把要删除的节点旋转到叶节点上，然后直接删除就可以了。具体的方法就是每次找到优先级最大的儿子，向与其相反的方向旋转，直到那个节点被旋转到了叶节点，然后直接删除。删除最多进行$ O(h)$次旋转，期望复杂度是  $O(logn)$，最坏的情况下$O(n)$。</p>
<p><strong>查找：</strong>和一般的二叉搜索树一样，但是由于Treap的随机化结构，Treap中查找的期望复杂度是  $O(logn)$，最坏的情况下$O(n)$。</p>
</li>
<li><p>堆(heap)：堆是被称为<strong>优先级队列的抽象数据类型的最高效实现</strong>，事实上，<strong>优先级队列通常被称为“堆”</strong>，而不管它们如何实现。<strong>堆的常见实现是二进制堆，其中树是二叉树</strong>（父节点的优先级大于子节点的优先级）。堆数据结构，特别是二进制堆，由Williams于1964年引入，作为堆排序算法的数据结构</p>
<p><img src="/img/tree/tree-09.png" alt=""></p>
</li>
</ul>
<h5 id="跳表（和树差不多的性能的数据结构）"><a href="#跳表（和树差不多的性能的数据结构）" class="headerlink" title="跳表（和树差不多的性能的数据结构）"></a>跳表（和树差不多的性能的数据结构）</h5><p>跳跃链表：（SkipList）是一种数据结构，允许快速查询一个<strong>有序连续元素</strong>的数据<strong>链表</strong>。快速查询是通过维护一个<strong>多层次的链表</strong>，且每一层链表中的元素是前一层链表元素的<strong>子集</strong>。基于并联的链表，其效率可比拟于二叉查找树（对于大多数操作需要$O(log n)$平均时间）。</p>
<p>跳跃链表是允许在有序元素列表内快速搜索的数据结构。通过子链表保持链接的层次结构，可以快速搜索，每个连续的子序列链表少于前一个的元素列表。搜索从最稀疏的子链表开始，通过小于，大于或等于搜索的元素，直到找到两个连续的元素。通过链接的层次结构，这两个元素链接到下一个稀疏的子链表的元素，在那里继续搜索直到最后我们搜索完整个链表。</p>
<p><img src="/img/tree/tree-12.png" alt=""></p>
<p>跳跃链表数据结构的示意图。每个带有箭头的框表示一个指针，一行是一个给出稀疏子序列的链表 ; 底部的数字框（黄色）表示有序的数据链表。搜索从最上面的子子链表向下进行，直到找到包含搜索元素的连续元素。</p>
<p>跳跃列表是按层建造的。底层是一个普通的有序链表。每个更高层都充当下面列表的“快速跑道”，这里在层 i 中的元素按某个固定的概率 p (通常为0.5或0.25)出现在层 i+1 中。平均起来，每个元素都在$\frac{1}{1-p}$ 个列表中出现，而最高层的元素（通常是在跳跃列表前端的一个特殊的头元素）在$ O(log_{1/p}n)$ 个列表中出现。</p>
<p>跳过列表是一种概率数据结构，似乎可能取代平衡树作为许多应用程序的实现方法。跳过列表算法具有与平衡树相同的渐近期望时间界限，并且更简单，更快速并且使用更少的空间。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>树是一种非常常用的数据结构，它在很多地方可以用到上，一般情况下，树都是有序的，因为有序才有意义。例如二叉搜索树，大多数树都是这种树的变种，可以自动平衡（因为平衡之后效率才高），自平衡二叉树是折半查找算法的一种实现方式，包括跳表也可以实现，所以对于查找很快，比如红黑树，AVL树。但是同样的因为查找很快，因为有序所以就要去维护，所以插入和查找就会变得很复杂。每次都要对树进行旋转，特别树的高度越高数据量越多维护成本就越高。所以这个时候就出现了B树，B+，B*树。他们通过冗余（留出一些空的空间等待插入值）键（关键字）的空间。来解决大数据量下的高度问题增长问题，这这中一般在文件系统和数据库系统中比较常用，mysql的索引默认就是B+树。这些归根到底也就是空间换时间。所以恰当的数据结构就可以提升算法效率，减少存储空间。</p>
<h5 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h5><p> <a href="http://www.cnblogs.com/gaochundong/p/binary_search_tree.html" target="_blank" rel="external">Scale-out Thinking的博客</a>, <a href="https://github.com/MrLining/mysql/wiki/InnoDB%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84" target="_blank" rel="external">MrLining的GitHub</a> ,<a href="https://www.geeksforgeeks.org/red-black-tree-set-3-delete-2/" target="_blank" rel="external">红黑树的删除</a>,<a href="https://www.geeksforgeeks.org/red-black-tree-set-2-insert/" target="_blank" rel="external">红黑树的插入</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;什么是数据结构&quot;&gt;&lt;a href=&quot;#什么是数据结构&quot; class=&quot;headerlink&quot; title=&quot;什么是数据结构&quot;&gt;&lt;/a&gt;什么是数据结构&lt;/h5&gt;&lt;p&gt;在计算机科学中，数据结构（英语：data structure）是计算机中存储、组织数据的方式。数据结
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>TCP-IP基础知识(二)</title>
    <link href="http://yoursite.com/2017/11/25/TCP-IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8602/"/>
    <id>http://yoursite.com/2017/11/25/TCP-IP基础知识02/</id>
    <published>2017-11-25T14:11:30.000Z</published>
    <updated>2017-12-10T12:51:21.398Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>回顾</p>
<p>之前讲过一篇关于IP协议的一篇博客。如果了解网络的人应该都知道<strong>开放式系统互联通信参考模型</strong>。也就是<strong>OSI</strong>模型（Open System Interconnection Reference Model），我们之前说的IP协议是指的网络层。今天我们来可能说一说<strong>TCP协议</strong>，他是位于传输层。<strong>OSI</strong>模型总共有七层，详细看图。</p>
<ul>
<li>应用层（Application Layer）提供为应用软件而  设的界面，以设置与另一应用软件之间的通信。例如: HTTP，HTTPS，FTP，TELNET，SSH，SMTP，POP3等</li>
<li>表示层（Presentation Layer）把数据转换为能与接收者的系统格式兼容并适合传输的格式，该层被弃用。应用层的HTTP、FTP、Telnet等协议有类似的功能。传输层的TLS/SSL也有类似功能</li>
<li>会话层（Session Layer）负责在数据传输中设置和维护电脑网络中两台电脑之间的通信连接，该层被弃用。应用层的HTTP、RPC、SDP、RTCP等协议有类似的功能。</li>
<li>传输层（Transport Layer）把传输表头（TH）加至数据以形成数据包。传输表头包含了所使用的协议等发送信息。（<strong>分割并重新组装</strong>上层提供的<strong>数据流</strong>，为数据流提供<strong>端到端</strong>的传输服务）。例如:传输控制协议（TCP）等。例如：TCP，UDP，TLS，SSL等协议</li>
<li>网络层（Network Layer）决定数据的路径选择和转寄，将网络表头（NH）加至数据包，以形成分组。网络表头包含了网络数据。例如:IP(v4)，ICMP(v6)。</li>
<li>数据链路层（Data Link Layer）负责网络寻址、错误侦测和改错。当表头和表尾被加至数据包时，会形成帧。数据链表头（DLH）是包含了物理地址和错误侦测及改错的方法。数据链表尾（DLT）是一串指示数据包末端的字符串。分为两个子层：逻辑链路控制（logic link control，LLC）子层和介质访问控制（media access control，MAC）子层，所以有的书上说OSI是八层协议。</li>
<li>物理层（Physical Layer）在局部局域网上传送帧，它负责管理电脑通信设备和网络媒体之间的互通。包括了针脚、电压、线缆规范、集线器、中继器、网卡、主机适配器等。</li>
</ul>
</li>
</ul>
<p>​       感觉回顾的有点多，其实还有个四层协议的这里先不讲了。应用层（应用层，表示层，会话层），传输层（传输层），网络层（网络层），网络接口层（数据链路层，物理层），可以自行百度，突然感觉自己废话好多。</p>
<p><img src="/img/tcp-00.png" alt="img"></p>
<ul>
<li><p>TCP协议</p>
<p>传输控制协议（英语：Transmission Control Protocol，缩写为 TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p>
</li>
<li><p>TCP端口</p>
<p><strong>TCP 的包是不包含 IP 地址信息的，那是 IP 层上的事，但是有源端口和目的端口</strong>。就是说，<strong>端口这一东西，是属于 TCP 知识范畴的</strong>。我们知道两个进程，在计算机内部进行通信，可以有管道、内存共享、信号量、消息队列等方法。而两个进程如果需要进行通讯最基本的一个前提是能够唯一的标识一个进程，在本地进程通讯中我们可以使用 <strong>「PID(进程标识符)」</strong> 来唯一标识一个进程。但 PID 只在本地唯一，如果把两个进程放到了不同的两台计算机，然后他们要通信的话，PID 就不够用了，这样就需要另外一种手段了。<strong>解决这个问题的方法就是在运输层使用 「协议端口号 (protocol port number)」，简称 「端口 (port)」</strong>。我们知道 <strong>IP 层的 ip 地址可以唯一标识主机</strong>，而 TCP 层协议和端口号可以唯一标识主机的一个进程，这样我们可以利用：<strong>「ip地址＋协议＋端口号」唯一标示网络中的一个进程。在一些场合，也把这种唯一标识的模式称为「套接字 (Socket)」</strong>。这就是说，虽然通信的重点是应用进程，但我们只要把要传送的报文交到目的主机的某一个合适的端口，剩下的工作就由 TCP 来完成了</p>
</li>
<li><p>认识端口</p>
<p>TCP 用一个 16 位端口号来标识一个端口，<strong>可允许有 65536 ( 2的16次方) 个不同的端口号</strong>，范围在 0 ~ 65535 之间。</p>
<ul>
<li><p>服务器端使用的端口号</p>
<p><strong>熟知端口号</strong>：取值范围：0 ~ 1023。可以在 www.iana.org 查到，服务器机器一接通电源，服务器程序就运行起来，为了让因特网上所有的客户程序都能找到服务器程序，服务器程序所使用的端口就必须是固定的，并且总所众所周知的。例如：FTP是21，Telnet是23，SMTP是25，DNS是53，TFTP是69，HTTP是80，HTTPS是443，SNMP是161。<strong>登记端口号</strong>：取值范围：1024 ~ 49151。这类端口没有熟知的应用程序使用，但是需要登记，以防重复</p>
</li>
<li><p>客户端使用端口号</p>
<p>取值范围：49152 ~ 65535。这类端口仅在客户端进程运行时才动态选择。又叫 短暂端口号，表示这种端口的存在时间是短暂的，客户进程并不在意操作系统给它分配的是哪一个端口号，因为客户进程之所以必须有一个端口号，是为了让传输层的实体能够找到自己。</p>
</li>
</ul>
</li>
<li><p>什么是报文（<strong>TCP 是面向字节流的，但传送的数据单元却是报文段</strong>。）</p>
<p>例如一个 100kb 的 HTML 文档需要传送到另外一台计算机，并不会整个文档直接传送过去，可能会切割成几个部分，比如四个分别为 25kb 的数据段。而每个数据段再加上一个 TCP 首部，就组成了 TCP 报文。一共四个 TCP 报文，发送到另外一个端。另外一端收到数据包，然后再剔除 TCP 首部，组装起来。等到四个数据包都收到了，就能还原出来一个完整的 HTML 文档了。在 OSI 的七层协议中，第二层（数据链路层）的数据叫「Frame」，第三层（网络层）上的数据叫「Packet」，第四层（传输层）的数据叫「Segment」。TCP 报文 (Segment)，包括首部和数据部分。而 TCP 的全部功能都体现在它首部中各字段的作用，只有弄清 TCP 首部各字段的作用才能掌握 TCP 的工作原理。TCP 报文段首部的前20个字节是固定的，后面有 4N 字节是根据需要而增加的。下图是把 TCP 报文中的首部放大来看。</p>
<p><img src="/img/tcp-01.png" alt="img"></p>
<p>​</p>
</li>
<li><p>TCP 的首部包括以下内容：</p>
<p><strong>1、源端口 source port（2字节），目的端口 destination port（2字节）：</strong></p>
<p>源端口和目的端口各占 2 个 字节，共 4 个字节。用来告知主机该报文段是来自哪里以及传送给哪个应用程序（应用程序绑定了端口）的。进行 TCP 通讯时，客户端通常使用系统自动选择的临时端口号，而服务器则使用知名服务端口号</p>
<p><strong>2、序号 sequence number（4字节）:</strong></p>
<p><strong>序号字段值指的是本报文段所发送的数据的第一个字节的序号</strong>。那么 100 的 HTML 文档分割成四个等分之后，（例如 100 kb 的 HTML 文档数据，一共 102400 (100 * 1024) 个字节，那么每一个字节就都有了编号，整个文档的编号的范围是 0 ~ 102399）第一个 TCP 报文段包含的是第一个 25kb 的数据，0 ~ 25599 字节， 该报文的序号的值就是：0第二个 TCP 报文段包含的是第二个 25kb 的数据，25600 ~ 51199 字节，该报文的序号的值就是：25600……根据 8 位 = 1 字节，那么 4 个字节可以表示的数值范围：[0, 2^32]，一共 2^32 (4294967296) 个序号。序号增加到最大值的时候，下一个序号又回到了 0.也就是说 TCP 协议可对 4GB 的数据进行编号，在一般情况下可保证当序号重复使用时，旧序号的数据早已经通过网络到达终点或者丢失了。TCP 是面向字节流的，在一个 TCP 连接中传输的字节流中的每个字节都按照顺序编号。</p>
<p><strong>3、确认号 acknowledgment number（4个字节）：</strong></p>
<p><strong>表示期望收到对方下一个报文段的序号值</strong>。TCP 的可靠性，是建立在「每一个数据报文都需要确认收到的基础之上的。<br>就是说，通讯的任何一方在收到对方的一个报文之后，都要发送一个相对应的<strong>「确认报文」</strong>，来表达确认收到。<strong>那么，确认报文，就会包含确认号</strong>。（例如，通讯的一方收到了第一个 25kb 的报文，该报文的 序号值=0，那么就需要回复一个<strong>确认报文</strong>，其中的确认号 = 25600。）</p>
<p><strong>4、数据偏移 offset（0.5个字节）：</strong></p>
<p>占 0.5 个字节 (4 位)。<strong>这个字段实际上是指出了 TCP 报文段的首部长度</strong> ，它指出了 TCP报文段的数据起始处 距离 TCP报文的起始处 有多远。（<strong>注意 数据起始处 和 报文起始处 的意思</strong>）一个数据偏移量 = 4 byte，由于 4 位二进制数能表示的最大十进制数字是 15，<strong>因此数据偏移的最大值是 60 byte，这也侧面限制了 TCP 首部的最大长度。</strong></p>
<p><strong>6、保留 reserved（0.75个字节）：</strong></p>
<p>占 0.75 个字节 (6 位)。保留为今后使用，但目前应置为 0。</p>
<p><strong>7、标志位 tcp flags：（0.75个字节）</strong></p>
<p>标志位，一共有 6 个，分别占 1 位，共 6 位 。每一位的值只有 0 和 1，分别表达不同意思（上面图上有显示 ）。</p>
<p><strong>URG（Urgent）紧急 ：</strong>当 URG = 1 的时候，表示<strong>紧急指针（Urgent Pointer）有效</strong>。它告诉系统此报文段中有紧急数据，应尽快传送，而不要按原来的排队顺序来传送。URG 要与首部中的 紧急指针 字段配合使用。</p>
<p><strong>ACK（Acknowledgemt ）确认：</strong>当 ACK = 1 的时候，确认号（Acknowledgemt Number）有效。一般称携带 ACK 标志的 TCP 报文段为「确认报文段」。<strong>TCP 规定，在连接建立后所有传送的报文段都必须把 ACK 设置为 1。</strong>（也就是建立链接之后一般传输和返回报文的标志位都是ACK）</p>
<p><strong>PSH（Push）推送：</strong>当 PSH = 1 的时候，<strong>表示该报文段高优先级，接收方 TCP 应该尽快推送给接收应用程序</strong>，而不用等到整个 TCP 缓存都填满了后再交付。</p>
<p><strong>RST（Reset）复位：</strong>当 RST = 1 的时候，<strong>表示 TCP 连接中出现严重错误，需要释放并重新建立连接</strong>。一般称携带 RST 标志的 TCP 报文段为「复位报文段」。</p>
<p><strong>SYN（Synchronization）同步：</strong>当 SYN = 1 的时候，表明这是一个请求连接报文段。一般称携带 SYN 标志的 TCP 报文段为「同步报文段」。在 <strong>TCP 三次握手中的第一个报文就是同步报文段，在连接建立时用来同步序号。对方若同意建立连接，则应在响应的报文段中使 SYN = 1 和 ACK = 1。</strong></p>
<p><strong>FIN（Finis）终止：</strong>当 FIN = 1 时，表示此报文段的发送方的数据已经发送完毕，并要求释放 TCP 连接。一般称携带 FIN 的报文段为「结束报文段」。<strong>在 TCP 四次挥手释放连接的时候，就会用到该标志。</strong></p>
<p><strong>8、窗口大小 window size（2字节）：</strong></p>
<p><strong>该字段明确指出了现在允许对方发送的数据量</strong>，它告诉对方本端的 TCP 接收缓冲区还能容纳多少字节的数据，这样对方就可以控制发送数据的速度。窗口大小的值是指，从本报文段首部中的确认号算起，接收方目前允许对方发送的数据量。例如，假如确认号是 701 ，窗口字段是 1000。这就表明，从 701 号算起，发送此报文段的一方还有接收 1000 （字节序号是 701 ~ 1700） 个字节的数据的接收缓存空间</p>
<p><strong>9、检验和 checksum（2字节）：</strong></p>
<p>由<strong>发送端填充，接收端对 TCP 报文段执行 CRC 算法，以检验 TCP 报文段在传输过程中是否损坏，如果损坏这丢弃</strong>。检验范围包括首部和数据两部分，这也是 TCP 可靠传输的一个重要保障</p>
<p><strong>10、紧急指针 urgent pointer（2字节）：</strong></p>
<p><strong>仅在 URG = 1 时才有意义，它指出本报文段中的紧急数据的字节数。</strong>当 URG = 1 时，发送方 TCP 就把紧急数据插入到本报文段数据的<strong>最前面</strong>，而在紧急数据后面的数据仍是普通数据。因此，紧急指针指出了紧急数据的末尾在报文段中的位置。</p>
<p><strong>11、选项 tcp options（最多40个字节）；</strong></p>
<p><strong>TCP头部的最后一个选项字段（options）是可变长的可选信息。</strong>这部分最多包含40字节，因为TCP头部最长是60字（其中还包含前面讨论的20字节的固定部分）。一般由kind，length和info组成。选项的第一个字段kind说明选项的类型。有的TCP选项没有后面两个字段，仅包含1字节的kind字段。第二个字段length（如果有的话）指定该选项的总长度，该长度包括kind字段和length字段占据的2字节。第三个字段info（如果有的话）是选项的具体信息。常见的TCP选项有7种。这7种就不详细展开。</p>
</li>
<li><p>TCP链接建立与数据传输：<strong>TCP 的整个交流过程可以总结为：先建立连接，然后传输数据，最后释放链接。</strong></p>
</li>
<li><p><strong>三次握手，四次挥手</strong></p>
<p>TCP 连接建立要解决的首要问题就是：<strong>要使每一方能够确知对方的存在。</strong>三次握手就像，在一个黑暗的森林，你知道前方十点钟方向好像有人。</p>
<p>你喊了一句：Hello？I’am JerryC，Who are you？<br>对面回了一句：Hi! I’am David, and nice to meet you!<br>然后你回了一句：Nice to meet you too!<br>……(自此，你们才算真正认识了双方，开始了后面省略3000字的谈话)</p>
<p>所以说，两个人需要交朋友（两个端点需要建立连接），至少需要三次的通话（握手）其实，网络上的传输是没有连接的，TCP 也是一样的。而 TCP 所谓的「连接」，其实只不过是在通信的双方维护一个「连接状态」，让它看上去好像有连接一样。其实没有三次握手也可以传输数据，但是那样数据传输不会那么准确，比如以后会说的UDP协议，他就没有三次握手和四次挥手。</p>
</li>
</ul>
<p><img src="/img/tcp-02.png" alt="img"></p>
<ul>
<li><p><strong>连接建立过程，三次握手</strong>（这里面也有拜占庭将军问题，这个也是在分布式系统中的一个问题）</p>
<p>TCP 连接的建立采用客户服务器方式，主动发起连接建立的一方叫<strong>客户端（Client）</strong>，被动等待连接建立的一方叫<strong>服务器（Server）</strong>。最初的时候，两端都处于 <strong>CLOSED</strong> 的状态，然后服务器打开了 TCP 服务，进入 <strong>LISTEN</strong> 状态，监听特定端口，等待客户端的 TCP 请求。<strong>第一次握手</strong>： 客户端主动打开连接，发送 TCP 报文，进行第一次握手，然后进入 <strong>SYN_SEND</strong>（客户端） 状态，等待服务器发回确认报文。这时首部的同步位 SYN = 1，同时初始化一个序号 <strong>Sequence Number = J</strong>。TCP 规定<strong>，SYN 报文段不能携带数据，但会消耗一个序号</strong>。<strong>第二次握手</strong>： 服务器收到了 SYN 报文，如果同意建立连接，则向客户端发送一个确认报文，然后服务器进入 <strong>SYN_RCVD</strong> （服务端）状态。这时首部的 SYN = 1，ACK = 1，而确认号 <strong>Acknowledgemt Number = J + 1</strong>，同时也为自己初始化一个序号 Sequence Number = K。这个报文同样不携带数据。<strong>第三次握手</strong>：客户端收到了服务器发过来的确认报文，还要向服务器给出确认，然后进入 <strong>ESTABLISHED</strong>（服务端） 状态。<strong>这时首部的 SYN 不再置为 1，而 ACK = 1</strong>，确认号 <strong>Acknowledgemt Number = K + 1</strong>，序号 Sequence Number = J + 1。<strong>第三次</strong>握手，<strong>一般会携带真正需要传输的数据</strong>，当服务器收到该数据报文的时候，就会同样进入 <strong>ESTABLISHED</strong> 状态。 此时，TCP 连接已经建立。对于建立连接的三次握手，<strong>主要目的是初始化序号 Sequence Number，并且通信的双方都需要告知对方自己的初始化序号，所以这个过程也叫 SYN。这个序号要作为以后的数据通信的序号，以保证应用层接收到的数据不会因为网络上的传输问题而乱序，因为TCP 会用这个序号来拼接数据。</strong></p>
</li>
<li><p><strong>服务端SYN超时</strong></p>
<p>当客户端给服务端发送SYN报文时，如果服务端没有返回SYN+ACK报文，那么客户端会重发SYN报文给服务端，重发的次数由参数<strong>tcp_syn_retries</strong>参数设置，该值默认是5，超过5次服务端还是不返回SYN+ACK报文，那么本次连接失败。服务端没有返回SYN+ACK主要有两种情况，一种是由于网络问题SYN包丢失；<strong>另一种是服务端SYN队列满</strong>(半连接队列，与之对应的是<strong>ACCPECT队列</strong>，全连接队列)，导致SYN包被丢弃。</p>
</li>
<li><p><strong>客户端ACK超时</strong></p>
<p>如果服务端接到了客户端发的SYN并回发SYN+ACK后，客户端掉线了，这时，服务端没有收到客户端回来的ACK，那么，这个连接处于一个中间状态，既没成功也没失败。于是，服务端端如果在一定时间内没有收到客户端端的ACK，那么服务端端会重发SYN+ACK。在Linux下，默认重试次数为5次，重发的间隔时间从1s开始每次都翻番（指数退避），5次的重发的时间间隔分别1s, 2s, 4s, 8s, 16s，总共31s，第5次发出后还要等32s都知道第5次也超时了，所以，总共需要 1s+2s+4s+8s+16s+32s = 2^6-1 = 63s，TCP才会把断开这个连接。</p>
</li>
<li><p><strong>利用连接设计缺陷实施 TCP Flood 攻击</strong></p>
<p>知道了 TCP 建立一个连接，需要进行三次握手。但如果你开始思考「三次握手的必要性」的时候，就会知道，其实网络是很复杂的，一个信息在途中丢失的可能性是有的。如果数据丢失了，那么，就需要重新发送，这时候就要知道数据是否真的送达了。这就是三次握手的必要性。但是再向深一层思考，你给我发信息，我收到了，我回复，因为我是君子。如果是小人，你给我发信息，我就算收到了，我也不回复，你就一直等我着我的回复。那么很多小人都这样做，你就要一直记住你在等待着小人1号、小人2号、小人3号……直到你的脑容量爆棚，烧坏脑袋。黑客就是利用这样的设计缺陷，实施 TCP Flood 攻击，属于 DDOS 攻击的一种。也就是把tcp的全部SYN队列全部都塞满。一般socket编程的时候都会调整backlog这个值来设置这个队列。不过这个也不能太大，这样会小时系统性能。为了应对SYN Flood攻击，Linux实现了一种称为SYN cookie的机制，通过<strong>net.ipv4.tcp_syncookies</strong>来设置。当SYN队列满了后，TCP会通过源地址端口、目标地址端口和时间戳打造出一个特别的Sequence Number发回去（又叫cookie），如果是攻击者则不会有响应，如果是正常连接，则会把这个 SYN Cookie发回来，然后服务端可以通过cookie建连接（即使不在SYN队列中）。</p>
</li>
<li><p>下面罗列一些常用于TCP连接过程优化的参数。</p>
<p><strong>tcp_max_syn_backlog</strong>    SYN队列长度。如果服务器经常出现过载，可以尝试增加这个数字。</p>
<p><strong>tcp_synack_retries</strong>    连接被动打开方的确认连接的应答最大重试次数。对于一个新建连接，内核要发送多少SYN连接请求才决定放弃。</p>
<p><strong>tcp_syn_retries </strong>      连接主动打开方的syn尝试次数。</p>
<p><strong>tcp_syncookies </strong>   防止SYN Flood攻击（<strong>请先千万别用tcp_syncookies来处理正常的大负载的连接的情况</strong>。因为，synccookies是妥协版的TCP协议，并不严谨）。</p>
<p><strong>tcp_abort_on_overflos </strong>   ACCEPT队列满，处理不过来的时候，如果设置了该参数，内核将会回发RST包</p>
</li>
<li><p><strong>释放连接过程</strong></p>
<p>在结束之前，通信双方都是处于 <strong>ESTABLISHED</strong> 状态，然后其中一方主动断开连接。下面假如客户端先主动断开连接。<strong>第一次挥手：</strong>客户端向服务器发送结束报文段，然后进入 <strong>FIN_WAIT_1</strong> （客户端）状态。此报文段 FIN = 1， Sequence Number = M。<strong>第二次挥手：</strong>服务端收到客户端的结束报文段，然后发送确认报文段，进入 <strong>CLOSE_WAIT</strong>（服务端） 状态。此报文段 ACK = 1， Sequence Number = M + 1。客户端收到该报文，会进入 <strong>FIN_WAIT_2</strong>（客户端） 状态。<strong>第三次挥手：</strong>同时服务端向客户端发送结束报文段，然后进入 <strong>LAST_ACK</strong>（服务端） 状态。此报文段 FIN = 1，Sequence Number = N。<strong>第四次挥手：</strong>客户端收到服务端的结束报文段，然后发送确认报文段，进入 <strong>TIME_WAIT</strong>（客户端） 状态，经过 2MSL 之后，自动进入 <strong>CLOSED</strong> （客户端）状态。此报文段 ACK = 1, Sequence Number = N + 1。服务端收到该报文之后，进入 <strong>CLOSED</strong> （服务端）状态。<strong>关于 TIME_WAIT 过渡到 CLOSED 状态说明</strong>：从 <strong>TIME_WAIT</strong> 进入 <strong>CLOSED</strong> 需要经过 2MSL，其中 MSL 就叫做 最长报文段寿命（Maxinum Segment Lifetime），根据 RFC 793 建议该值这是为 2 分钟，也就是说需要经过 4 分钟，才进入 <strong>CLOSED</strong> 状态。对于4次挥手，其实你仔细看是2次，因为TCP是全双工的，所以，发送方和接收方都需要Fin和Ack。只不过，有一方是被动的，所以看上去就成了所谓的4次挥手。如果两边同时断连接，那就会就进入到CLOSING状态，然后到达TIME_WAIT状态。</p>
</li>
<li><p>tcp状态流转</p>
<p>无论客户端还是服务器，在双方 TCP 通讯的过程中，都会有着一个「状态」的概念，状态会随着 TCP 通讯的不同阶段而变化。</p>
<p>​</p>
<p><img src="/img/tcp-03.png" alt="img"></p>
</li>
<li><p>各种状态表示的意思</p>
<p><strong>CLOSED</strong>：表示初始状态。<strong>LISTEN</strong>：表示服务器端的某个 socket 处于监听状态，可以接受连接。<strong>SYN_SENT</strong>：在服务端监听后，客户端 socket 执行 CONNECT 连接时，客户端发送 SYN 报文，此时客户端就进入 SYN_SENT 状态，等待服务端确认。<strong>SYN_RCVD</strong>：表示服务端接收到了 SYN 报文。<strong>ESTABLISHED</strong>：表示连接已经建立了。<strong>FIN_WAIT_1</strong>：其中一方请求终止连接，等待对方的 FIN 报文。<strong>FIN_WAIT_2</strong>：在 <strong>FIN_WAIT_2</strong> 之后， 当对方回应 ACK 报文之后，进入该状态。<strong>TIME_WAIT</strong>：表示收到了对方的 FIN 报文，并发送出了 ACK 报文，就等 2MSL 之后即可回到 CLOSED 状态。<strong>CLOSING</strong>：一种罕见状态，发生在发送 FIN 报文之后，本应是先收到 ACK 报文，却先收到对方的 FIN 报文，那么就从 FIN_WAIT_1 的状态进入 CLOSING 状态。<strong>CLOSE_WAIT</strong>：表示等待关闭，在 ESTABLISHED 过渡到 LAST_ACK 的一个过渡阶段，该阶段需要考虑是否还有数据发送给对方，如果没有，就可以关闭连接，发送 FIN 报文，然后进入 LAST_ACK 状态。<strong>LAST_ACK</strong>：被动关闭一方发送 FIN 报文之后，最后等待对方的 ACK 报文所处的状态。<strong>CLOSED</strong>：当收到 ACK 保温后，就可以进入 CLOSED 状态了。</p>
</li>
<li><p>TCP 是如何一种提供可靠性交付的协议。</p>
<p>TCP 是一种提供可靠性交付的协议也就是说，通过 TCP 连接传输的数据，无差错、不丢失、不重复、并且按序到达。但是在网络中相连两端之间的介质，是复杂的，并不确保数据的可靠性交付，那么 TCP 是怎么样解决问题的？这就需要了解 TCP 的几种技术：滑动窗口、超时重传、流量控制、拥塞控制不过上面有提到一些可靠性的东西比如三次握手，超时重传，四次挥手等等。如果没有建立起Sequence Number和Acknowledgemt Number也就没有后面这几种技术。</p>
</li>
<li><p><strong>TCP的超时重传</strong>（TCP要保证所有的数据包都可以到达，所以，必需要有重传机制。）</p>
<p>接收端给发送端的Ack确认只会确认最后一个连续的包，比如，发送端发了1,2,3,4,5一共五份数据，接收端收到了1，2，于是回ack 3，然后收到了4（注意此时3没收到），此时的TCP会怎么办？我们要知道，因为正如前面所说的，<strong>SeqNum和Ack是以字节数为单位，所以ack的时候，不能跳着确认，只能确认最大的连续收到的包</strong>，不然，发送端就以为之前的都收到了。</p>
<p><img src="/img/tcp-04.jpg" alt="img"></p>
<p>超时重传机制：因为tcp协议是每一个发送都会有一个回执<strong>标志位都是ACK，</strong>当发送方一直收不到3的回执 。那么发送端就会重新的发送3的数据包直到收到这个回执（重传）。但是如果发送了3,4,5三个包，只有3自己丢失那4和5怎么办。这个时候TCP是不能跳着确认的，所以发送端只能悲观的认为4和5也没传过来。这个时候重传就需要策略：</p>
<ul>
<li>一种是仅重传timeout的包。也就是第3份数据。这样也可节省带宽，但是比较慢</li>
<li>另一种是重传timeout后所有的数据，也就是第3，4，5这三份数据。</li>
</ul>
<p>但总体来说都不好。因为都在等timeout，timeout可能会很长</p>
<p>快速重传机制：<strong>Fast Retransmit</strong> 算法，<strong>不以时间驱动，而以数据驱动重传</strong>。也就是说，如果，包没有连续到达（也就是没收到回执），就ack最后那个可能被丢了的包，如果发送方连续收到3次相同的回执（上次的ACK），就重传。Fast Retransmit的好处是不用等timeout了再重传</p>
<p><img src="/img/tcp-05.png" alt="img"></p>
<p>Fast Retransmit只解决了一个问题，就是timeout的问题，它依然面临一个艰难的选择，就是，是重传之前的一个还是重传所有的问题。同时如果ACK丢失他也没办法，只能启动超时重传。</p>
<p>SACK方法(Selective Acknowledgment )：这种方式需要在TCP头里加一个SACK的东西，ACK(回执)还是Fast Retransmit的ACK，SACK则是汇报收到的数据碎版。也就是他会告诉发送端，自己接收的数据从哪里开始丢失的，丢失的是那个几个包。这样就不用所有的都重发，只重发已经丢掉的包即SACK标记的和ACK开始的那些。（ACK的是从哪里开始丢失的，而SACK是表示丢失了那些包）</p>
<p><img src="/img/tcp-06.jpg" alt="img"></p>
<p>这样，在发送端就可以根据回传的SACK来知道哪些数据到了，哪些没有到。于是就优化了Fast Retransmit的算法。当然，这个协议需要两边都支持。在 Linux下，可以通过<strong>tcp_sack</strong>参数打开这个功能。<strong>接收方Reneging的意思就是接收方可以在某些情况下把已经报给发送端SACK里的数据给丢弃</strong>，接收方这么做可能会有些极端情况，一个SACK都没有。<strong>所以，发送方也不能完全依赖SACK，还是要依赖ACK，并维护Time-Out</strong>。<strong>如果后续的ACK没有增长，那么还是要把SACK的东西重传，另外，接收端这边永远不能把SACK的包标记为Ack</strong></p>
<p>D-SACK（Duplicate SACK，重复 SACK）</p>
<p>来告诉发送端，有那些数据已经重复接收。D-SACK使用了SACK的第一个段来做标志，SACK的第一个段的范围被ACK所覆盖（SACK中的值标记的第一个包，已经有回执ACK）或者SACK的第一个段的范围被SACK的第二个段覆盖（也就当前SACK所提供丢包的信息，能被其他SACK所代替），那么这个SACK（回执）就是D-SACK。DSACK好处：1、可以让发送方知道，是发出去的包丢了，还是回来的ACK包丢了。2、是不是自己的timeout太小了，导致重传。3、网络上出现了先发的包后到的情况（又称reordering）4、网络上是不是把我的数据包给复制了。<strong>知道这些东西可以很好得帮助TCP了解网络情况，从而可以更好的做网络上的流控</strong>。Linux下的tcp_dsack参数用于开启这个功能（Linux 2.4后默认打开）</p>
</li>
</ul>
<ul>
<li><p><strong>TCP的RTT算法</strong>（如何动态计算和设置超时时间，从前面的TCP重传机制我们知道Timeout的设置对于重传非常重要）</p>
<p><strong>超时时间（timeout）设长了，重发就慢，丢了老半天才重发，没有效率，性能差；设短了，会导致可能并没有丢就重发。于是重发的就快，会增加网络拥塞，导致更多的超时，更多的超时导致更多的重发</strong>。而且，<strong>这个超时时间在不同的网络的情况下，根本没有办法设置一个死的值。只能动态地设置。 为了动态地设置，TCP引入了RTT——Round Trip Time，也就是一个数据包从发出去到回来的时间。</strong>这样发送端就大约知道需要多少的时间，从而可以方便<strong>地设置Timeout——RTO（Retransmission TimeOut），以让我们的重传机制更高效。 听起来似乎很简单，好像就是在发送端发包时记下t0，然后接收端再把这个ack回来时再记一个t1，于是RTT = t1 – t0。</strong>没那么简单，这只是一个采样，不能代表普遍情况。</p>
<p>经典算法</p>
<p>1）首先，先采样RTT，记下最近好几次的RTT值。</p>
<p>2）然后做平滑计算SRTT（ Smoothed RTT）。公式为：（其中的 α 取值在0.8 到 0.9之间，这个算法英文叫Exponential weighted moving average，中文叫：加权移动平均）</p>
<p><strong>SRTT = ( α * SRTT ) + ((1- α) * RTT)</strong></p>
<p>3）开始计算RTO。公式如下：</p>
<p><strong>RTO = min [ UBOUND,  max [ LBOUND,   (β * SRTT) ]  ]</strong></p>
<p>其中：UBOUND是最大的timeout时间，上限值，LBOUND是最小的timeout时间，下限值，β 值一般在1.3到2.0之间。</p>
<p>Karn / Partridge 算法</p>
<p>但是上面的这个算法在重传的时候会出有一个终极问题——<strong>你是用第一次发数据的时间和ack回来的时间做RTT样本值，还是用重传的时间和ACK回来的时间做RTT样本值</strong>？这个算法的最大特点是<strong>忽略重传，不把重传的RTT做采样。</strong></p>
<p><strong>如果在某一时间，网络闪动，突然变慢了，产生了比较大的延时，这个延时导致要重转所有的包（因为之前的RTO很小），于是，因为重转的不算，所以，RTO就不会被更新，这是一个灾难</strong>。 于是Karn算法用了一个取巧的方式——只要一发生重传，就对现有的RTO值翻倍（这就是所谓的 Exponential backoff），很明显，这种死规矩对于一个需要估计比较准确的RTT也不靠谱</p>
<p>Jacobson / Karels 算法</p>
<p>前面两种算法用的都是“加权移动平均”，这种方法最大的毛病就是如果RTT有一个大的波动的话，很难被发现，因为被平滑掉了。所以，1988年，又有人推出来了一个新的算法，这个算法叫Jacobson / Karels Algorithm（参看<a href="http://tools.ietf.org/html/rfc6298" target="_blank" rel="external">RFC6289</a>）。这个算法引入了最新的RTT的采样和平滑过的SRTT的差距做因子来计算。 公式如下：（其中的DevRTT是Deviation RTT的意思）</p>
<p><strong>SRTT</strong> = SRTT + α*(RTT – SRTT)  —计算平滑RTT</p>
<p><strong>DevRTT</strong> = (1-β)<em>DevRTT + β<em>**</em></em>(|RTT-SRTT|) —计算平滑RTT和真实的差距（加权移动平均）</p>
<p><strong>RTO= µ * SRTT + ∂ *DevRTT </strong>—神一样的公式</p>
<p>（其中：在Linux下，α = 0.125，β = 0.25， μ = 1，∂ = 4 ——这就是算法中的“调得一手好参数”，nobody knows why, it just works…） 最后的这个算法在被用在今天的TCP协议中。</p>
</li>
<li><p><strong>TCP滑动窗口</strong></p>
<p>我们都知道，<strong>TCP必需要解决的可靠传输以及包乱序（reordering）的问题</strong>，所以，TCP必需要知道网络实际的数据处理带宽或是数据处理速度，这样才不会引起网络拥塞，导致丢包。TCP引入了一些技术和设计来做网络流控，Sliding Window是其中一个技术。 前面我们说过，<strong>TCP头里有一个字段叫Window，又叫Advertised-Window，这个字段是接收端告诉发送端自己还有多少缓冲区可以接收数据</strong>。<strong>于是发送端就可以根据这个接收端的处理能力来发送数据，而不会导致接收端处理不过来</strong>。</p>
<p>TCP 缓冲区的数据结构</p>
<ul>
<li>接收端LastByteRead指向了TCP缓冲区中读到的位置，NextByteExpected指向的地方是收到的连续包的最后一个位置，LastByteRcved指向的是收到的包的最后一个位置，我们可以看到中间有些数据还没有到达，所以有数据空白区。</li>
</ul>
</li>
</ul>
<ul>
<li><p>发送端的LastByteAcked指向了被接收端Ack过的位置（表示成功发送确认），LastByteSent表示发出去了，但还没有收到成功确认的Ack，LastByteWritten指向的是上层应用正在写的地方。</p>
<p><img src="/img/tcp-07.jpg" alt="img"></p>
<p><strong>整个数据的流程中，首先网卡接收到的数据存放到内核缓冲区内，然后内核缓冲区存放的数据根据TCP信息将数据移动到具体的某一个TCP连接上的接收缓冲区内，也就是接收滑动窗口内，然后应用程序从TCP的接受缓冲区内读取数据，如果应用程序一直不读取，那么滑动窗口就会变小，直至为0.滑动窗口的大小与套接字缓存区会在一定程度上影响并发连接的数据，每个TCP连接都会为维护TCP滑动窗口而消耗内存，这个窗口会根据服务器的处理速度收缩或扩张</strong>。 如果网卡处理数据的速度比内核处理数据的速度慢，那么内核会有一个队列来保存这些数据，这个队列的大小就是由参数netdev_max_backlog决定的。</p>
<p>对于发送数据来说，应用程序将数据拷贝到各自<strong>TCP发送缓冲区</strong>内（也就是发送滑动窗口），然后系统的所有TCP套接字上发送缓冲区（也就是发送滑动窗口）内的数据都将数据拷贝到<strong>内核发送缓冲区</strong>内，然后内核将内核缓冲区的数据经过网卡发送出去。</p>
<p>TCP的发送/接受缓冲区（也就是发送/接受滑动窗口），是针对某一个具体的TCP连接来说的，每一个TCP连接都会有相应的滑动窗口，但是<strong>内核的发送/接受缓冲区是针对整个系统的，里面存放着整个系统的所有TCP连接的接收/发送的数据</strong>。</p>
<p>每个TCP套接口有一个发送缓冲区，可以用SO_SNDBUF套接口选项来改变这一缓冲区的大小。当应用进程调用write往套接口写数据时，内核从应用进程缓冲区中拷贝所有数据到套接口的发送缓冲区，如果套接口发送缓冲区容不下应用程序的所有数据，或者是应用进程的缓冲区大于套接口的发送缓冲区，或者是套接口的发送缓冲区中有别的数据，应用进程将被挂起。内核将不从write返回。直到应用进程缓冲区中的所有数据都拷贝到套接口发送缓冲区。所以，从写一个<strong>TCP套接口的write调用成功返回仅仅表示我们可以重新使用应用进程缓冲区，它并不是告诉我们对方收到数据</strong>。TCP发给对方的数据，对方在收到数据时必须给矛确认，<strong>只有在收到对方的确认时，本方TCP才会把TCP发送缓冲区中的数据删除</strong>。</p>
</li>
<li><p>接收端在给发送端回ACK中会汇报自己的AdvertisedWindow = MaxRcvBuffer – LastByteRcvd – 1;</p>
<ul>
<li>而发送方会根据这个窗口来控制发送数据的大小，以保证接收方可以处理。</li>
</ul>
<p><strong>发送方的滑动窗口示意图</strong>（也就是发送端是如何处理发送数据数据的也可说是把数据分个类，那个是已经发的，那个是能发的，那个是不能发的）：</p>
<p><strong>整个黑框指的是滑动窗口，上面的红框范围就是windows里面存的值，也就是如果接收到在接收到回执，在发送的数据</strong></p>
<p><img src="/img/tcp-08.png" alt="img"></p>
<p>类别1：已经接收到回执（ACK）的数据。这部分接收端已经处理完了，从tcp缓冲区删除</p>
<p>类别2：发送还没收到回执（ACK）的数据。这部分接收端正在处理中或者没有处理完，还留在tcp缓冲中（LastByteRcvd -LastByteRead-1）。</p>
<p>类别3：还没有发送的数据，但是接收端的缓冲区能够处理的了，也就是AdvertisedWindow 。</p>
<p>类别4：还没有发送的数据。接收端缓冲区也不能够处理的数据。</p>
<p><strong>滑动后的示意图</strong>（收到36的ack，并发出了46-51的字节）：</p>
<p><img src="/img/tcp-09.png" alt="img"></p>
<p><strong>下面是整个过程的图片:</strong></p>
<p><img src="/img/tcp-10.png" alt="img"></p>
<p>Zero Window</p>
<p>我们可以看到一个处理缓慢的Server（接收端）是怎么把Client（发送端）的TCP Sliding Window给降成0的。此时，你一定会问，如果Window变成0了，TCP会怎么样？是不是发送端就不发数据了？是的，发送端就不发数据了，你可以想像成“Window Closed”，那你一定还会问，如果发送端不发数据了，接收方一会儿Window size 可用了，怎么通知发送端呢？</p>
<p>解决这个问题，TCP使用了Zero Window Probe技术，缩写为ZWP，<strong>也就是说，发送端在窗口变成0后，会发ZWP的包给接收方，让接收方来ack他的Window尺寸，一般这个值会设置成3次，第次大约30-60秒（不同的实现可能会不一样）。如果3次过后还是0的话，有的TCP实现就会发RST把链接断了。</strong></p>
<p><strong>注意</strong>：只要有等待的地方都可能出现DDoS攻击，Zero Window也不例外，一些攻击者会在和HTTP建好链发完GET请求后，就把Window设置为0，然后服务端就只能等待进行ZWP，于是攻击者会并发大量的这样的请求，把服务器端的资源耗尽。</p>
<p>Silly Window Syndrome</p>
<p>翻译成中文就是“糊涂窗口综合症”。正如你上面看到的一样，如果我们的接收方太忙了，来不及取走Receive Windows里的数据，那么，就会导致发送方越来越小。到最后，如果接收方腾出几个字节并告诉发送方现在有几个字节的window，而我们的发送方会义无反顾地发送这几个字节。要知道，我们的TCP+IP头有40个字节，为了几个字节，要达上这么大的开销，这太不经济了。</p>
<p>对于以太网来说，<strong>MTU</strong>是1500字节，除去TCP+IP头的40个字节，真正的数据传输可以有1460，这就是所谓的MSS（Max Segment Size）注意，TCP的RFC定义这个MSS的默认值是536，任何一个IP设备都得最少接收576尺寸的大小（实际上来说576是拨号的网络的MTU，而576减去TCP/IP头的40个字节就是536）。<strong>最大传输单元</strong>（Maximum Transmission Unit，缩写MTU）是指一种通信协议的某一层上面所能通过的最大数据包大小（以字节为单位）。最大传输单元这个参数通常与通信接口有关（网络接口卡、串口等）。<strong>如果你的网络包可以塞满MTU，那么你可以用满整个带宽，如果不能，那么你就会浪费带宽</strong>。（大于MTU的包有两种结局，一种是直接被丢了，另一种是会被重新分块打包发送） 你可以想像成一个MTU就相当于一个飞机的最多可以装的人，如果这飞机里满载的话，带宽最高，如果一个飞机只运一个人的话，无疑成本增加了。</p>
<p><strong>Silly Windows Syndrome这个现像就像是你本来可以坐200人的飞机里只做了一两个人</strong>。 要解决这个问题也不难，就是避免对小的window size做出响应，直到有足够大的window size再响应，这个思路可以同时实现在sender和receiver两端。</p>
<ul>
<li>如果这个问题是由Receiver端引起的，那么就会使用 David D Clark’s 方案。在receiver端，如果收到的数据导致window size小于某个值，可以直接ack(0)回sender，这样就把window给关闭了，也阻止了sender再发数据过来，等到receiver端处理了一些数据后windows size 大于等于了MSS，或者，receiver buffer有一半为空，就可以把window打开让send 发送数据过来。</li>
</ul>
</li>
</ul>
<ul>
<li><p>如果这个问题是由Sender端引起的，那么就会使用著名的 <a href="http://en.wikipedia.org/wiki/Nagle%27s_algorithm" target="_blank" rel="external">Nagle’s algorithm</a>。这个算法的思路也是延时处理，他有两个主要的条件：1、要等到 Window Size&gt;=MSS 或是 Data Size &gt;=MSS。2、收到之前发送数据的ack回包，他才会发数据，否则就是在攒数据。</p>
<p>另外，Nagle算法默认是打开的，所以，对于一些需要小包场景的程序——<strong>比如像telnet或ssh这样的交互性比较强的程序，你需要关闭这个算法</strong>。你可以在Socket设置TCP_NODELAY选项来关闭这个算法（关闭Nagle算法没有全局参数，需要根据每个应用自己的特点来关闭</p>
</li>
<li><p>TCP的拥塞处理</p>
<p>TCP通过Sliding Window来做流控（Flow Control），但是TCP觉得这还不够，因为Sliding Window需要依赖于连接的发送端和接收端，其并不知道网络中间发生了什么。TCP的设计者觉得，一个伟大而牛逼的协议仅仅做到流控并不够，因为流控只是网络模型4层以上的事，TCP的还应该更聪明地知道整个网络上的事。</p>
<p>具体一点，我们知道TCP通过一个timer采样了RTT并计算RTO，但是，<strong>如果网络上的延时突然增加，那么，TCP对这个事做出的应对只有重传数据，但是，重传会导致网络的负担更重，于是会导致更大的延迟以及更多的丢包，于是，这个情况就会进入恶性循环被不断地放大。试想一下，如果一个网络内有成千上万的TCP连接都这么行事，那么马上就会形成“网络风暴”，TCP这个协议就会拖垮整个网络。</strong>这是一个灾难。</p>
<p>所以，TCP不能忽略网络上发生的事情，而无脑地一个劲地重发数据，对网络造成更大的伤害。对此TCP的设计理念是：<strong>TCP不是一个自私的协议，当拥塞发生的时候，要做自我牺牲。就像交通阻塞一样，每个车都应该把路让出来，而不要再去抢路了</strong></p>
<p>拥塞控制主要是四个算法：<strong>1、慢启动</strong>，<strong>2、拥塞避免</strong>，<strong>3、拥塞发生</strong>，<strong>4、快速恢复</strong>。这四个算法不是一天都搞出来的，这个四算法的发展经历了很多时间，到今天都还在优化中。</p>
</li>
</ul>
<ul>
<li><p><strong>UDP协议的相关内容</strong>（尽管说UDP没有TCP那么靠谱，但是他也有他自己好处，开销小，简单。这UDP经常会在游戏服务器里面使用，流媒体，具体例子我就不说了）</p>
</li>
<li><p>UDP 全称 User Datagram Protocol, 与 TCP 同是在网络模型中的传输层的协议。UDP为应用程序提供的是一种不可靠的、无连接的分组交付，因此，UDP报文可能会出现丢失、乱序、重复、延时等问题。特点：1、<strong>无连接的</strong>，即发送数据之前不需要建立连接，因此减少了开销和发送数据之前的时延。2、<strong>不保证可靠交付</strong>，因此主机不需要为此复杂的连接状态表。3、<strong>面向报文的</strong>，意思是 UDP 对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界，在添加首部后向下交给 IP 层。4、<strong>没有阻塞控制</strong>，因此网络出现的拥塞不会使发送方的发送速率降低。5、<strong>支持一对一、一对多、多对一和多对多的交互通信</strong>，也即是提供广播和多播的功能。6、<strong>头部开销小</strong>，首部只有 8 个字节，分为四部分</p>
<p>UDP的头部和伪头部</p>
<p><img src="/img/tcp-11.png" alt="img"></p>
<p>UDP 数据报分为数据字段和首部字段。首部字段只有 8 个字节，由四个字段组成，每个字段的长度是 2 个字节。</p>
<p><strong>头部的组成</strong>：<strong>1、源端口</strong>：源端口号，在需要对方回信时选用，不需要时可全 0。<strong>2、目的端口</strong>：目的端口号，在终点交付报文时必须要使用到。<strong>3、长度</strong>：UDP 用户数据报的长度，在只有首部的情况，其最小值是 8 。4、<strong>检验和</strong>：检测 UDP 用户数据报在传输中是否有错，有错就丢弃。</p>
<p><strong>伪头部:</strong>UDP 数据报首部中检验和的计算方法比较特殊。在计算检验和时，要在数据报之前增加 12 个字节的伪首部，用来计算校验和。伪首部并不是数据报真正的首部，是为了计算校验和而临时添加在数据报前面的，在真正传输的时候并不会把伪首部一并发送。1、第一字段，源 IP 地址。2、第二字段，目的 IP 地址。3、第三字段，字段全 0。4、第四字段，IP 首部中的协议字段的值，对于 UDP，此字段值为 17。5、第五字段，UDP 用户数据报的长度</p>
</li>
<li><p>为什么UDP开销小：1、因为UDP是无连接的。在传输数据之前，不需要进行复杂的三次握手来建立连接。2、在传输数据时，没有协议间通信流量（确认信号），也不需要浪费不必要的处理时间（接收确认信号再发一下）。3、传输结束后，也不用再用改进的四次挥手手来断开链接。</p>
</li>
<li><p>参考： <a href="https://coolshell.cn/articles/11609.html" target="_blank" rel="external">TCP 的那些事儿(下)</a>, <a href="https://www.gitbook.com/book/jerryc8080/understand-tcp-and-udp/details" target="_blank" rel="external">理解 TCP 和 UDP</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;回顾&lt;/p&gt;
&lt;p&gt;之前讲过一篇关于IP协议的一篇博客。如果了解网络的人应该都知道&lt;strong&gt;开放式系统互联通信参考模型&lt;/strong&gt;。也就是&lt;strong&gt;OSI&lt;/strong&gt;模型（Open System Interconnection Re
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP基础知识（一）</title>
    <link href="http://yoursite.com/2017/11/18/TCP-IP%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2017/11/18/TCP-IP基础知识/</id>
    <published>2017-11-18T15:08:32.000Z</published>
    <updated>2017-11-25T02:36:02.911Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>什么是IP，IP地址是什么</p>
<p>互联网协议地址（英语：Internet Protocol Address，又译为网际协议地址），缩写为IP地址（英语：IP Address），是分配给网络上使用网际协议（英语：Internet Protocol, IP）的设备的数字标签。</p>
</li>
<li><p>IPv4到IPv6</p>
<p>常见的IP地址分为IPv4与IPv6两大类。IP地址由32位二进制数组成，为便于使用，常以<strong>XXX.XXX.XXX.XXX</strong>形式表现，每组XXX代表小于或等于255的10进制数。例如维基媒体的一个IP地址是208.80.152.2。地址可分为<strong>A、B、C、D、E</strong>五大类，其中E类属于特殊保留地址。IP地址是唯一的。目前IP技术可能使用的IP地址最多可有<strong>4,294,967,296个（即2的32方）</strong>。骤看可能觉得很难会用尽，但由于早期编码和分配上的问题，使很多区域的编码实际上被空出或不能使用。加上互联网的普及，IPv4的42亿个地址的分配最终于2011年2月3日用尽<strong>。相应的科研组织已研究出128位的IPv6，其IP地址数量最高可达3.402823669 × 1038个，届时每个人家居中的每件电器，每件对象，甚至地球上每一粒沙子都可以拥有自己的IP地址。从IPv4到IPv6最显著的变化就是网络地址的长度。RFC 2373和RFC 2374定义的IPv6地址，就像下面章节所描述的，有128位长；IPv6地址的表达形式，一般采用32个十六进制数。IPv6中可能的地址有</strong>2的128方≈3.4×1038<strong>个，具体数量为**</strong>340,282,366,920,938,463,463,374,607,431,768,211,456**个。在很多场合，IPv6地址由两个逻辑部分组成：一个64位的网络前缀和一个64位的主机地址，主机地址通常根理地址自动生成，叫做EUI-64（或者64-位扩展唯一标识）</p>
</li>
<li><p>IP地址的表示方法</p>
<p>把整个Internet网堪称单一的网络，IP地址就是给每个连在Internet网的主机分配一个在全世界范围内唯一的标示符，Internet管理委员会定义了A、B、C、D、E五类地址，在每类地址中，还规定了<strong>网络编号和主机编号</strong>。在 TCP/IP协议中，IP地址是以二进制数字形式出现的，共32bit，1bit就是二进制中的1位，但这种形式非常不适用于人阅读和记忆。因此Internet管理委员会决定采用一种点分十进制表示法表示IP地址：面向用户的文档中，由四段构成的32 比特的IP地址被直观地表示为四个以圆点隔开的十进制整数，其中，每一个整数对应一个字节（8个比特为一个字节称为一段）。A、B、C类最常用，下面加以介绍。本文介绍的都是版本4的IP地址，称为IPv4.</p>
<p><img src="/img/tcp-ip-3.gif" alt="img"></p>
</li>
</ul>
<p>从上图可以看出：</p>
<ul>
<li>A类地址：<strong>A类地址的网络标识由第一组8位二进制数表示</strong>， A类地址的特点是网络标识的第一位二进制数取值必须为0。不难算出，A类地址第一个地址为00000001，最后一个地址是01111111，换算成十进制就是127，其中127留作保留地址，A类地址的第一段范围是：1～126，A类地址允许有27 -2=126个网段（减2是因为0不用，127留作它用，127.0.0.1），网络中的主机标识占3组8位二进制数，每个网络允许有224-2=16777216台主机（减2是因为全0地址为网络地址，全1为广播地址，这两个地址一般不分配给主机）。通常分配给拥有大量主机的网络。</li>
<li>B类地址：<strong>B类地址的网络标识由前两组8位二进制数表示</strong>，网络中的主机标识占两组8位二进制数，B类地址的特点是网络标识的前两位二进制数取值必须为10。 B类地址第一个地址为10000000，最后一个地址是10111111，换算成十进制B类地址第一段范围就是128～191，B类地址允许有214 =16384个网段，网络中的主机标识占2组8位二进制数，每个网络允许有216-2=65533台主机，适用于结点比较多的网络。</li>
<li>B类地址：B类地址的网络标识由前两组8位二进制数表示，网络中的主机标识占两组8位二进制数，B类地址的特点是网络标识的前两位二进制数取值必须为10。 B类地址第一个地址为10000000，最后一个地址是10111111，换算成十进制B类地址第一段范围就是128～191，B类地址允许有214 =16384个网段，网络中的主机标识占2组8位二进制数，每个网络允许有216-2=65533台主机，适用于结点比较多的网络。</li>
<li>C类地址：<strong>C类地址的网络标识由前3组8位二进制数表示</strong>，网络中主机标识占1组8位二进制数C类地址的特点是网络标识的前3位二进制数取值必须为110。C类地址第一个地址为11000000，最后一个地址是11011111，换算成十进制C类地址第一段范围就是192～223，C类地址允许有221 =2097152个网段，网络中的主机标识占1组8位二进制数，每个网络允许有28-2= 254台主机，适用于结点比较少的网络。</li>
</ul>
<p>越到后面网络，主机就越少，网络编号越长，主机编号越少。</p>
<p>有些人对范围是2x不太理解，举个简单的例子加以说明。如C类网，每个网络允许有28-2= 254台主机是这样来的。因为C类网的主机位是8位，变化如下:</p>
<p>​    00000000</p>
<p>​    00000001</p>
<p>​    00000010</p>
<p>​    00000011</p>
<p>​    ……</p>
<p>​    11111110</p>
<p>​    11111111</p>
<p> 除去00000000和11111111不用外，从00000001到11111110共有254个变化，也就是28-2个。下图是IP地址的使用范围</p>
<p><img src="/img/tcp-ip-0.gif" alt="img"></p>
<ul>
<li><p>几个特殊的IP地址</p>
<ul>
<li><p><strong>私有地址</strong></p>
<p>上面提到IP地址在全世界范围内唯一，看到这句话你可能有这样的疑问，<strong>像192.168.0.1这样的地址在许多地方都能看到，并不唯一，这是为何</strong>？Internet管理委员会规定如下地址段为<strong>私有地址，私有地址可以自己组网时用，但不能在Internet网上用</strong>，Internet网没有这些地址的路由，有这些地址的计算机要上网必须转换成为合法的IP地址,也称为公网地址，这就像有很到的世界公园，<strong>每个公园内都可命名相同的大街，如香榭丽舍大街</strong>，<strong>但对外我们只能看到公园的地址和真正的香榭丽舍大街</strong>。下面是A、B、C类网络中的私有地址段。你自己组网时就可以用这些地址了。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">10.0.0.0～10.255.255.255</div><div class="line"></div><div class="line">172.16.0.0～172.131.255.255</div><div class="line"></div><div class="line">192.168.0.0～192.168.255.255</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>回送地址</strong></p>
<p>A类网络地址127是一个保留地址，用于网络软件测试以及本地机进程间通信，叫做回送地址（loopback address）。无论什么程序，一旦使用回送地址发送数据，协议软件立即返回之，不进行任何网络传输。含网络号127的分组不能出现在任何网络上</p>
</li>
<li><p>Ping 127.0.0.1,如果反馈信息失败,说明IP协议栈有错,必须重新安装TCP/IP协议。如果成功,ping本机IP地址,如果反馈信息失败,说明你的网卡不能和IP协议栈进行通信。</p>
</li>
<li>如果网卡没接网线，用本机的一些服务如Sql Server、IIS等就可以用127.0.0.1这个地址</li>
<li><p><strong>网络地址</strong></p>
<p>TCP/IP协议规定，各位全为0的网络号被解释成本网络。由上可以看出：一、含网络号127的分组不能出现在任何网络上；二、主机和网关不能为该地址广播任何寻径信息。由以上规定可以看出，主机号全0全1的地址在TCP/IP协议中有特殊含义，一般不能用作一台主机的有效地址。</p>
</li>
<li><p><strong>广播地址</strong></p>
<p>TCP/IP规定，主机号全为1的网络地址用于广播之用，叫做广播地址。所谓广播，指同时向同一子网所有主机发送报文。</p>
</li>
</ul>
</li>
<li><p>子网掩码</p>
<p>从上面的例子可以看出，子网掩码的作用就是和IP地址与运算后得出网络地址，子网掩码也是32bit，并且是一串1后跟随一串0组成，其中1表示在IP地址中的网络号对应的位数，而0表示在IP地址中主机对应的位数。</p>
<p><strong>标准子网掩码</strong></p>
<p> A类网络（1 - 126） 缺省子网掩码：255·0·0·0</p>
<p> 255·0·0·0 换算成二进制为 11111111·00000000·00000000·00000000</p>
<p> 可以清楚地看出前8位是网络地址，后24位是主机地址，也就是说，如果用的是标准子网掩码，看第一段地址即可看出      是不是同一网络的。如21.0.0.0.1和21.240.230.1，第一段为21属于A类，如果用的是默认的子网掩码，那这两个地址就是一个网段的。</p>
<p> B类网络（128 - 191） 缺省子网掩码：255·255·0·0</p>
<p> C类网络（192 - 223） 缺省子网掩码：255·255·255·0</p>
<p> B类、C类分析同上</p>
<p><strong>特殊的子网掩码</strong></p>
<p>标准子网掩码出现的都是255和0的组合，在实际的应用中还有下面的子网掩码</p>
<p>255·128·0·0</p>
<p>255·192·0·0</p>
<p>。。。。。。</p>
<p>255·255·192·0</p>
<p>255·255·240·0 </p>
<p>。。。。。。</p>
<p> 255·255·255·248</p>
<p>255·255·255·252</p>
<p>这些子网掩码又是什么意思呢？这些子网掩码的出现是为了把一个网络划分成多个网络。</p>
<p>还记得上面的例子吗？如下所示：192·168·0·1和192·168·0·200如果是默认掩码255.255.255.0两个地址就是一个网络的，如果掩码变为255.255.255.192这样各地址就不属于一个网络了。下面的子网划分将作详细介绍。</p>
</li>
</ul>
<p><img src="/img/tcp-ip-1.jpg" alt="img"></p>
<p>​     表1是几个子网掩码计算过程中非常有用的十进制和二进制的对照</p>
<p><img src="/img/tcp-ip-2.jpg" alt="img"></p>
<ul>
<li><p>IPv4与IPv6的转换</p>
<p>IPv6地址为128位长但通常写作8组每组四个十六进制数的形式。例如：</p>
<p>2001:0db8:85a3:08d3:1319:8a2e:0370:7344 是一个合法的IPv6地址。</p>
<p><strong>如果四个数字都是0，可以被省略</strong>。例如：</p>
<p>2001:0db8:85a3:0000:1319:8a2e:0370:7344 等价于 2001:0db8:85a3::1319:8a2e:0370:7344</p>
<p>遵从这些规则，如果因为省略而出现了两个以上的冒号的话，可以压缩为一个，但这种零压缩在地址中只能出现一次。因此：</p>
<p>2001:0DB8:0000:0000:0000:0000:1428:57ab</p>
<p>2001:0DB8:0000:0000:0000::1428:57ab</p>
<p>2001:0DB8:0:0:0:1428:57ab</p>
<p>2001:0DB8:0::0:1428:57ab</p>
<p>2001:0DB8::1428:57ab</p>
<p>都是合法的地址，并且他们是等价的。但</p>
<p>2001::25de::cade 是非法的。（因为这样会使得搞不清楚每个压缩中有几个全零的分组）同时前导的零可以省略，因此：2001:0DB8:02de::0e13 等价于 2001:DB8:2de::e13 如果这个地址实际上是IPv4的地址 后32位可以用10进制数表示；因此：</p>
<p><strong>IPv4地址可以很容易的转化为IPv6格式</strong>。举例来说，如果IPv4的一个地址为135.75.43.52（十六进制为0x874B2B34），它可以被转化为0000:0000:0000:0000:0000:0000:874B:2B34或者::874B:2B34。同时，还可以使用混合符号（IPv4-compatible address），则地址可以为::135.75.43.52。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是IP，IP地址是什么&lt;/p&gt;
&lt;p&gt;互联网协议地址（英语：Internet Protocol Address，又译为网际协议地址），缩写为IP地址（英语：IP Address），是分配给网络上使用网际协议（英语：Internet Protocol, 
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>ArrayBlockingQueue</title>
    <link href="http://yoursite.com/2017/10/25/ArrayQueue/"/>
    <id>http://yoursite.com/2017/10/25/ArrayQueue/</id>
    <published>2017-10-25T12:03:14.000Z</published>
    <updated>2017-11-25T02:45:39.068Z</updated>
    
    <content type="html"><![CDATA[<p><strong>什么是Queue</strong></p>
<p>Queue就是队列的意思，所谓的队列就是排队，先进先出（FIFO first in frist out）。队列是一种非常常见的数据结构，他是一种特殊的线性表，只允许从head头出队，从tail尾入队。先进先出（FIFO）：先插入的队列的元素也最先出队列，类似于排队的功能。从某种程度上来说这种队列也体现了一种公平性。</p>
<p><strong>什么是Array</strong></p>
<p>在计算机科学中，数组数据结构（英语：array data structure），简称数组（英语：Array），是由相同类型的元素（element）的集合所组成的数据结构，分配一块<strong>连续的内存来存储</strong>。利用元素的索引（index）可以计算出该元素对应的存储地址。所以查找起来比较方便，和数组相对数据结构的就是链表，链表是不连续的存储。连续存储的好处就是她查找起来比较方便，每个元素都是相同大小的存放到一起。但是很容易出现碎片化的问题，而且对于大数组来说内存的消耗很大。但是链表就不会，他是很多和节点联系在一起，所以插入和删除比较方便，不用去移动位置。需要更改前驱和后继的指针就好了。</p>
<p><strong>什么是BlockingQueue</strong></p>
<p>Blocking（阻塞）Queue（队列）。多线程环境中，通过队列可以很容易实现数据共享，比如经典的“生产者”和“消费者”模型中，通过队列可以很便利地实现两者之间的数据共享。假设我们有若干生产者线程，另外又有若干个消费者线程。如果生产者线程需要把准备好的数据共享给消费者线程，利用队列的方式来传递数据，就可以很方便地解决他们之间的数据共享问题。但如果生产者和消费者在某个时间段内，万一发生数据处理速度不匹配的情况呢？理想情况下，如果生产者产出数据的速度大于消费者消费的速度，并且当生产出来的数据累积到一定程度的时候，那么生产者必须暂停等待一下（阻塞生产者线程），以便等待消费者线程把累积的数据处理完毕，反之亦然。（在多线程领域：所谓阻塞，在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤醒）</p>
<p><strong>当队列中没有数据的情况下，消费者端的所有线程都会被自动阻塞（挂起），直到有数据放入队列。</strong></p>
<p><strong>当队列中填满数据的情况下，生产者端的所有线程都会被自动阻塞（挂起），直到队列中有空的位置，线程被自动唤醒。</strong></p>
<p><strong>什么是ArrayBlockingQueue</strong></p>
<p>ArrayBlockingQueue就是通过数组来实现阻塞队列的一种方式。在ArrayBlockingQueue内部，维护了一个定长数组，以便缓存队列中的数据对象，这是一个常用的阻塞队列，除了一个定长数组外，ArrayBlockingQueue内部还保存着两个整形变量，分别标识着队列的头部和尾部在数组中的位置。</p>
<p>ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行，这点尤其不同于LinkedBlockingQueue；按照实现原理来分析，ArrayBlockingQueue完全可以采用分离锁，从而实现生产者和消费者操作的完全并行运行。Doug Lea之所以没这样去做，也许是因为ArrayBlockingQueue的数据写入和获取操作已经足够轻巧，以至于引入独立的锁机制，除了给代码带来额外的复杂性外，其在性能上完全占不到任何便宜。 ArrayBlockingQueue和LinkedBlockingQueue间还有一个明显的不同之处在于，前者在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。而在创建ArrayBlockingQueue时，我们还可以控制对象的内部锁是否采用公平锁，默认采用非公平锁。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div><div class="line">532</div><div class="line">533</div><div class="line">534</div><div class="line">535</div><div class="line">536</div><div class="line">537</div><div class="line">538</div><div class="line">539</div><div class="line">540</div><div class="line">541</div><div class="line">542</div><div class="line">543</div><div class="line">544</div><div class="line">545</div><div class="line">546</div><div class="line">547</div><div class="line">548</div><div class="line">549</div><div class="line">550</div><div class="line">551</div><div class="line">552</div><div class="line">553</div><div class="line">554</div><div class="line">555</div><div class="line">556</div><div class="line">557</div><div class="line">558</div><div class="line">559</div><div class="line">560</div><div class="line">561</div><div class="line">562</div><div class="line">563</div><div class="line">564</div><div class="line">565</div><div class="line">566</div><div class="line">567</div><div class="line">568</div><div class="line">569</div><div class="line">570</div><div class="line">571</div><div class="line">572</div><div class="line">573</div><div class="line">574</div><div class="line">575</div><div class="line">576</div><div class="line">577</div><div class="line">578</div><div class="line">579</div><div class="line">580</div><div class="line">581</div><div class="line">582</div><div class="line">583</div><div class="line">584</div><div class="line">585</div><div class="line">586</div><div class="line">587</div><div class="line">588</div><div class="line">589</div><div class="line">590</div><div class="line">591</div><div class="line">592</div><div class="line">593</div><div class="line">594</div><div class="line">595</div><div class="line">596</div><div class="line">597</div><div class="line">598</div><div class="line">599</div><div class="line">600</div><div class="line">601</div><div class="line">602</div><div class="line">603</div><div class="line">604</div><div class="line">605</div><div class="line">606</div><div class="line">607</div><div class="line">608</div><div class="line">609</div><div class="line">610</div><div class="line">611</div><div class="line">612</div><div class="line">613</div><div class="line">614</div><div class="line">615</div><div class="line">616</div><div class="line">617</div><div class="line">618</div><div class="line">619</div><div class="line">620</div><div class="line">621</div><div class="line">622</div><div class="line">623</div><div class="line">624</div><div class="line">625</div><div class="line">626</div><div class="line">627</div><div class="line">628</div><div class="line">629</div><div class="line">630</div><div class="line">631</div><div class="line">632</div><div class="line">633</div><div class="line">634</div><div class="line">635</div><div class="line">636</div><div class="line">637</div><div class="line">638</div><div class="line">639</div><div class="line">640</div><div class="line">641</div><div class="line">642</div><div class="line">643</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ArrayBlockingQueue 继承AbstractQueue实现了BlockingQueue接口和序列化接口</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></div><div class="line">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> &#123;</div><div class="line">  </div><div class="line">  <span class="comment">//这个Object数组就是用来存放ArrayBlockingQueue里面的对象。这里面也就ArrayBlockingQueue的Array</span></div><div class="line">  <span class="comment">/** The queued items */</span></div><div class="line">   <span class="keyword">final</span> Object[] items;</div><div class="line">  </div><div class="line">   <span class="comment">//用于取出（take），删除（remove），出队（poll，peek）的对象的下标（索引）</span></div><div class="line">   <span class="comment">/** items index for next take, poll, peek or remove */</span></div><div class="line">    <span class="keyword">int</span> takeIndex;</div><div class="line">    <span class="comment">//用于放入（put），提供（offer），添加（add）的对象下标</span></div><div class="line">  	<span class="comment">/** items index for next put, offer, or add */</span></div><div class="line">    <span class="keyword">int</span> putIndex;</div><div class="line">  	<span class="comment">//用于记录队列里元素的个数</span></div><div class="line"> 	<span class="comment">/** Number of elements in the queue */</span></div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">  </div><div class="line">    <span class="comment">/*</span></div><div class="line">     * Concurrency control uses the classic two-condition algorithm</div><div class="line">     * found in any textbook.</div><div class="line">     * 并发控制使用任何教科书中的经典双条件算法。</div><div class="line">     */</div><div class="line">  </div><div class="line">  	<span class="comment">//守护所有访问的主要锁，也就是所有的访问都要通过这个锁</span></div><div class="line"> 	<span class="comment">/** Main lock guarding all access */</span></div><div class="line">    <span class="keyword">final</span> ReentrantLock lock;</div><div class="line">	</div><div class="line">  	<span class="comment">//取操作等待的条件（take，remove，poll）</span></div><div class="line">    <span class="comment">/** Condition for waiting takes */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</div><div class="line">	</div><div class="line">  	<span class="comment">//放入操作的等待条件（put，offer，add）</span></div><div class="line">    <span class="comment">/** Condition for waiting puts */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</div><div class="line">  </div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">     * Shared state for currently active iterators, or null if there</div><div class="line">     * are known not to be any.  Allows queue operations to update</div><div class="line">     * iterator state.</div><div class="line">     */</div><div class="line">  </div><div class="line"> <span class="comment">// 当前活动迭代器的共享状态，如果不存在任何已知操作，则为null。 允许队列操作更新迭代器状态。</span></div><div class="line">    <span class="keyword">transient</span> Itrs itrs = <span class="keyword">null</span>;</div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Circularly decrement i.从i循环递减到0</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">dec</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((i == <span class="number">0</span>) ? items.length : i) - <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">   <span class="comment">/**</span></div><div class="line">     * Returns item at index i. 返回items i的元素</div><div class="line">     */</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">final</span> E <span class="title">itemAt</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (E) items[i];</div><div class="line">    &#125;</div><div class="line">   <span class="comment">/**</span></div><div class="line">     * Throws NullPointerException if argument is null.</div><div class="line">     *  校验参数v是否为空 v是元素</div><div class="line">     * <span class="doctag">@param</span> v the element</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">checkNotNull</span><span class="params">(Object v)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (v == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="comment">/**</span></div><div class="line">     * Inserts element at current put position, advances, and signals.</div><div class="line">     * Call only when holding lock.</div><div class="line">     */</div><div class="line">  <span class="comment">//插入元素在put位置（下标putIndex位置），也就是当前插入下标的数组节点，同时唤醒持有锁的插入线程</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E x)</span> </span>&#123;</div><div class="line">        <span class="comment">// assert lock.getHoldCount() == 1;</span></div><div class="line">        <span class="comment">// assert items[putIndex] == null;</span></div><div class="line">      	<span class="comment">//获取存储所有数据的数组</span></div><div class="line">        <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</div><div class="line">      	<span class="comment">//把数据放入当前下标节点的数组节点中</span></div><div class="line">        items[putIndex] = x;</div><div class="line">      	<span class="comment">//判断一下是不是到数组最后节点也就 length-1，这里用的是++putIndex来说明</span></div><div class="line">        <span class="keyword">if</span> (++putIndex == items.length)</div><div class="line">          	<span class="comment">//如果是的话，就从头开始存放，因为那边消费也就是从投开始消费。</span></div><div class="line">          	<span class="comment">//即每次插入都从0开始，消费也都从0开始那么就可以实现先入先出</span></div><div class="line">            putIndex = <span class="number">0</span>;</div><div class="line">      	<span class="comment">//加入成功后增加对列中元素数量，数组中元素加一</span></div><div class="line">        count++;</div><div class="line">      <span class="comment">//唤醒那些等待插入的线程（持有锁的线程），可以插入。获取的Condition notEmpty的插入线程</span></div><div class="line">        notEmpty.signal();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Extracts element at current take position, advances, and signals.</div><div class="line">     * Call only when holding lock.</div><div class="line">     */</div><div class="line">  <span class="comment">//提取take位置的元素（下标takeIndex的元素），同时唤醒持有锁的取出线程</span></div><div class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// assert lock.getHoldCount() == 1;</span></div><div class="line">        <span class="comment">// assert items[takeIndex] != null;</span></div><div class="line">      	<span class="comment">//获取存储所有数据的数组</span></div><div class="line">        <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</div><div class="line">      	<span class="comment">//获取数组中take位置的元素</span></div><div class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">        E x = (E) items[takeIndex];</div><div class="line">      	<span class="comment">//将take位置制为空</span></div><div class="line">        items[takeIndex] = <span class="keyword">null</span>;</div><div class="line">      	<span class="comment">//判读是不是取数取到item数组的最后元素，如果超过会出现数组越界</span></div><div class="line">        <span class="keyword">if</span> (++takeIndex == items.length)</div><div class="line">         <span class="comment">//如果是从投开始取</span></div><div class="line">            takeIndex = <span class="number">0</span>;</div><div class="line">      	<span class="comment">//对列中存在的元素数量减一</span></div><div class="line">        count--;</div><div class="line">      	<span class="comment">//如果迭代器不为空，说明有线程把数据取走，元素减一</span></div><div class="line">        <span class="keyword">if</span> (itrs != <span class="keyword">null</span>)</div><div class="line">            itrs.elementDequeued();</div><div class="line">      <span class="comment">//唤醒取出线程（持有锁的）</span></div><div class="line">        notFull.signal();</div><div class="line">      <span class="comment">//返回take节点元素</span></div><div class="line">        <span class="keyword">return</span> x;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">     * Deletes item at array index removeIndex.</div><div class="line">     * Utility for remove(Object) and iterator.remove.</div><div class="line">     * Call only when holding lock.</div><div class="line">     */</div><div class="line">  <span class="comment">//删除item数组中index下标的元素，同时移除迭代器中数据，唤醒阻塞的线程</span></div><div class="line">  <span class="comment">//删除元素，不影响队列的顺序，就是要不从队列的前面删除，出队删除，也就是找到takeIndex，然后删除。</span></div><div class="line">  <span class="comment">//如果不是，那么就从队列最后面删除，即把之前的元素，和其他元素依次移动，然后把要删除的元素，移动到</span></div><div class="line">  <span class="comment">//putIndex哪里然后删除</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeAt</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> removeIndex)</span> </span>&#123;</div><div class="line">        <span class="comment">// assert lock.getHoldCount() == 1;</span></div><div class="line">        <span class="comment">// assert items[removeIndex] != null;</span></div><div class="line">        <span class="comment">// assert removeIndex &gt;= 0 &amp;&amp; removeIndex &lt; items.length;</span></div><div class="line">      	<span class="comment">//获取存储数据的数组</span></div><div class="line">        <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</div><div class="line">      <span class="comment">//如果取出位置，和要移除的位置正好是同一个（从队列前删除）</span></div><div class="line">        <span class="keyword">if</span> (removeIndex == takeIndex) &#123;</div><div class="line">            <span class="comment">// removing front item; just advance</span></div><div class="line">          	<span class="comment">//清空位置信息</span></div><div class="line">            items[takeIndex] = <span class="keyword">null</span>;</div><div class="line">          	<span class="comment">//如果取出位置的下一个位置是最大位置，将取出位设成0，起始位置</span></div><div class="line">            <span class="keyword">if</span> (++takeIndex == items.length)</div><div class="line">                takeIndex = <span class="number">0</span>;</div><div class="line">          <span class="comment">//count-- 表示位置减少</span></div><div class="line">            count--;</div><div class="line">          	<span class="comment">//迭代器中的如果也存有值，那么将这个值也清除掉</span></div><div class="line">            <span class="keyword">if</span> (itrs != <span class="keyword">null</span>)</div><div class="line">                itrs.elementDequeued();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// an "interior" remove</span></div><div class="line"></div><div class="line">            <span class="comment">// slide over all others up through putIndex.</span></div><div class="line">          <span class="comment">//如果要删除位置，不是取出位置，那么进行循环，直到找到取出位置</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> putIndex = <span class="keyword">this</span>.putIndex;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = removeIndex;;) &#123;</div><div class="line">              	<span class="comment">//进行for的死循环</span></div><div class="line">                <span class="keyword">int</span> next = i + <span class="number">1</span>;</div><div class="line">              	<span class="comment">//如果next是数组的长度，那么从数组的长度为0也就是头部开始</span></div><div class="line">                <span class="keyword">if</span> (next == items.length)</div><div class="line">                    next = <span class="number">0</span>;</div><div class="line">              	<span class="comment">//</span></div><div class="line">                <span class="keyword">if</span> (next != putIndex) &#123;</div><div class="line">                  <span class="comment">//找到要移除的元素，然后把要移除的元素，放到putIndex哪里，然后删除掉（从队列后删除）</span></div><div class="line">                    items[i] = items[next];</div><div class="line">                    i = next;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                  <span class="comment">//删除队列，并设置putIndex值</span></div><div class="line">                    items[i] = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">this</span>.putIndex = i;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">          <span class="comment">//队列中的值减少</span></div><div class="line">            count--;</div><div class="line">          	<span class="comment">//如果迭代器不为空，清除迭代器中存放的值</span></div><div class="line">            <span class="keyword">if</span> (itrs != <span class="keyword">null</span>)</div><div class="line">                itrs.removedAt(removeIndex);</div><div class="line">        &#125;</div><div class="line">      <span class="comment">//唤醒线程</span></div><div class="line">        notFull.signal();</div><div class="line">      </div><div class="line">      <span class="comment">/**</span></div><div class="line">     * Creates an &#123;<span class="doctag">@code</span> ArrayBlockingQueue&#125; with the given (fixed)</div><div class="line">     * capacity and default access policy.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> capacity the capacity of this queue</div><div class="line">     * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> capacity &lt; 1&#125;</div><div class="line">     */</div><div class="line">     <span class="comment">//ArrayBlockingQueue 构造函数，默认是不公平锁，这里是指定了队列的大小</span></div><div class="line">      <span class="comment">/**</span></div><div class="line">     * Creates an &#123;<span class="doctag">@code</span> ArrayBlockingQueue&#125; with the given (fixed)</div><div class="line">     * capacity and the specified access policy.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> capacity the capacity of this queue</div><div class="line">     * <span class="doctag">@param</span> fair if &#123;<span class="doctag">@code</span> true&#125; then queue accesses for threads blocked</div><div class="line">     *        on insertion or removal, are processed in FIFO order;</div><div class="line">     *        if &#123;<span class="doctag">@code</span> false&#125; the access order is unspecified.</div><div class="line">     * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> capacity &lt; 1&#125;</div><div class="line">     */</div><div class="line">    <span class="comment">// ArrayBlockingQueue的构造函数，指定队列大小，和是否使用公平锁（一次插入，一次移除）</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity, <span class="keyword">boolean</span> fair)</span> </span>&#123;</div><div class="line">      	<span class="comment">//当 capacity小于0的时候抛出异常</span></div><div class="line">        <span class="keyword">if</span> (capacity &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">      	<span class="comment">//创建大小合适的数组</span></div><div class="line">        <span class="keyword">this</span>.items = <span class="keyword">new</span> Object[capacity];</div><div class="line">      	<span class="comment">//创建并发时候用的锁</span></div><div class="line">        lock = <span class="keyword">new</span> ReentrantLock(fair);</div><div class="line">      	<span class="comment">//入队条件</span></div><div class="line">        notEmpty = lock.newCondition();</div><div class="line">      	<span class="comment">//出队条件</span></div><div class="line">        notFull =  lock.newCondition();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(capacity, <span class="keyword">false</span>);</div><div class="line">    &#125;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Creates an &#123;<span class="doctag">@code</span> ArrayBlockingQueue&#125; with the given (fixed)</div><div class="line">     * capacity, the specified access policy and initially containing the</div><div class="line">     * elements of the given collection,</div><div class="line">     * added in traversal order of the collection's iterator.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> capacity the capacity of this queue</div><div class="line">     * <span class="doctag">@param</span> fair if &#123;<span class="doctag">@code</span> true&#125; then queue accesses for threads blocked</div><div class="line">     *        on insertion or removal, are processed in FIFO order;</div><div class="line">     *        if &#123;<span class="doctag">@code</span> false&#125; the access order is unspecified.</div><div class="line">     * <span class="doctag">@param</span> c the collection of elements to initially contain</div><div class="line">     * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> capacity&#125; is less than</div><div class="line">     *         &#123;<span class="doctag">@code</span> c.size()&#125;, or less than 1.</div><div class="line">     * <span class="doctag">@throws</span> NullPointerException if the specified collection or any</div><div class="line">     *         of its elements are null</div><div class="line">     */</div><div class="line">  </div><div class="line">  <span class="comment">//将一个已有的集合，放入到队列中去</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity, <span class="keyword">boolean</span> fair,</span></span></div><div class="line">                              Collection&lt;? extends E&gt; c) &#123;</div><div class="line">      	<span class="comment">//初始化构造函数</span></div><div class="line">        <span class="keyword">this</span>(capacity, fair);</div><div class="line">		<span class="comment">//初始化锁</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">      	<span class="comment">//将队列锁住，也就当前线程获取锁。</span></div><div class="line">        lock.lock(); <span class="comment">// Lock only for visibility, not mutual exclusion</span></div><div class="line">      	<span class="comment">//然后将集合中的值遍历出来放到队列数组中去</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">for</span> (E e : c) &#123;</div><div class="line">                  	<span class="comment">//校验是否为空，是空则抛出空指针异常</span></div><div class="line">                    checkNotNull(e);</div><div class="line">                    items[i++] = e;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">            &#125;</div><div class="line">            count = i;</div><div class="line">          	<span class="comment">//初始化队尾，如果等于最大值，为变为头，如果不是则为 i</span></div><div class="line">            putIndex = (i == capacity) ? <span class="number">0</span> : i;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          	<span class="comment">//释放锁</span></div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  </div><div class="line">   <span class="comment">/**</span></div><div class="line">     * Inserts the specified element at the tail of this queue if it is</div><div class="line">     * possible to do so immediately without exceeding the queue's capacity,</div><div class="line">     * returning &#123;<span class="doctag">@code</span> true&#125; upon success and throwing an</div><div class="line">     * &#123;<span class="doctag">@code</span> IllegalStateException&#125; if this queue is full.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> e the element to add</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; (as specified by &#123;<span class="doctag">@link</span> Collection#add&#125;)</div><div class="line">     * <span class="doctag">@throws</span> IllegalStateException if this queue is full</div><div class="line">     * <span class="doctag">@throws</span> NullPointerException if the specified element is null</div><div class="line">     */</div><div class="line">   <span class="comment">//向队列加入值，这里面调用的是父类的方法，父类中调用的是offer()方法，</span></div><div class="line">  <span class="comment">//如果添加成功返回true，失败则抛出异常（也就是）队列满了情况下</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.add(e);</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  </div><div class="line">  <span class="comment">/**</span></div><div class="line">     * Inserts the specified element at the tail of this queue if it is</div><div class="line">     * possible to do so immediately without exceeding the queue's capacity,</div><div class="line">     * returning &#123;<span class="doctag">@code</span> true&#125; upon success and &#123;<span class="doctag">@code</span> false&#125; if this queue</div><div class="line">     * is full.  This method is generally preferable to method &#123;<span class="doctag">@link</span> #add&#125;,</div><div class="line">     * which can fail to insert an element only by throwing an exception.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@throws</span> NullPointerException if the specified element is null</div><div class="line">     */</div><div class="line">  <span class="comment">//插入一个元素，向队列中，如果插入成功返回true，失败返回false</span></div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</div><div class="line">      	<span class="comment">//如果插入的值是null，抛空指针异常</span></div><div class="line">        checkNotNull(e);</div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">      	<span class="comment">//当前线程获取锁，也就是操作权限</span></div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          	<span class="comment">//队列已满，插入失败</span></div><div class="line">            <span class="keyword">if</span> (count == items.length)</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">              <span class="comment">//插入对列，返回成功</span></div><div class="line">                enqueue(e);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="comment">//释放锁</span></div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">  <span class="comment">//出队</span></div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</div><div class="line">     	<span class="comment">//获取到锁</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          <span class="comment">//如果count等于0返回null，否则出队一个元素</span></div><div class="line">            <span class="keyword">return</span> (count == <span class="number">0</span>) ? <span class="keyword">null</span> : dequeue();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="comment">//最后释放锁</span></div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  	<span class="comment">//从队列取出一个元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">      <span class="comment">//获取锁</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">      	<span class="comment">//如果当前线程没有被打断，获取锁。如果这个 锁没有被获取</span></div><div class="line">        lock.lockInterruptibly();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          	<span class="comment">//当count==0也就是队列是空的情况，线程一直保持等待，其他线程进不来</span></div><div class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>)</div><div class="line">                notEmpty.await();</div><div class="line">          	<span class="comment">//如果不是空则，出队一个元素</span></div><div class="line">            <span class="keyword">return</span> dequeue();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="comment">//释放锁</span></div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  <span class="comment">//在一段时间出队一个元素，时间是纳秒</span></div><div class="line">   <span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">     	<span class="comment">//使用TimeUnit设置时间长度</span></div><div class="line">        <span class="keyword">long</span> nanos = unit.toNanos(timeout);</div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">       <span class="comment">//如果当前线程没有被打断，获取锁。如果这个 锁没有被获取</span></div><div class="line">        lock.lockInterruptibly();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          	<span class="comment">//如果队列元素为0个，同时超过了等待时间，那就返回一个空，否则就继续等待</span></div><div class="line">            <span class="keyword">while</span> (count == <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                nanos = notEmpty.awaitNanos(nanos);</div><div class="line">            &#125;</div><div class="line">          	<span class="comment">//如果队列元素不是0，那就出队一个元素</span></div><div class="line">            <span class="keyword">return</span> dequeue();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          	<span class="comment">//释放锁</span></div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  	<span class="comment">//从队列头取出一个元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</div><div class="line">      	<span class="comment">//获取锁，如果没有获取，那么线程就一直处于等待状态</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          <span class="comment">//返回一个元素，即takeIndex位置的元素。都是最前面的元素</span></div><div class="line">            <span class="keyword">return</span> itemAt(takeIndex); <span class="comment">// null when queue is empty</span></div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="comment">//释放锁</span></div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">// this doc comment is overridden to remove the reference to collections</span></div><div class="line">  <span class="comment">//这个文章的注解@overridden，被移除掉引用从集合接口中</span></div><div class="line">    <span class="comment">// greater in size than Integer.MAX_VALUE</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the number of elements in this queue.</div><div class="line">     * 返回队列元素的个数</div><div class="line">     * <span class="doctag">@return</span> the number of elements in this queue</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</div><div class="line">      	<span class="comment">//获取锁</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          <span class="comment">//返回count值，即队列中元素的数量</span></div><div class="line">            <span class="keyword">return</span> count;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="comment">//释放锁</span></div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// this doc comment is a modified copy of the inherited doc comment,</span></div><div class="line">    <span class="comment">// without the reference to unlimited queues.</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the number of additional elements that this queue can ideally</div><div class="line">     * (in the absence of memory or resource constraints) accept without</div><div class="line">     * blocking. This is always equal to the initial capacity of this queue</div><div class="line">     * less the current &#123;<span class="doctag">@code</span> size&#125; of this queue.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Note that you &lt;em&gt;cannot&lt;/em&gt; always tell if an attempt to insert</div><div class="line">     * an element will succeed by inspecting &#123;<span class="doctag">@code</span> remainingCapacity&#125;</div><div class="line">     * because it may be the case that another thread is about to</div><div class="line">     * insert or remove an element.</div><div class="line">     */ </div><div class="line">  <span class="comment">//队列中剩余多少可以插入的元素，一般就是用数组的总长度减去当前元素的个数</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">remainingCapacity</span><span class="params">()</span> </span>&#123;</div><div class="line">      	<span class="comment">//获取锁，如果没有获取等待</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          	<span class="comment">//返回当前线程时，剩余能插入的元素个数</span></div><div class="line">            <span class="keyword">return</span> items.length - count;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          	<span class="comment">//释放锁</span></div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">   <span class="comment">/**</span></div><div class="line">     * Removes a single instance of the specified element from this queue,</div><div class="line">     * if it is present.  More formally, removes an element &#123;<span class="doctag">@code</span> e&#125; such</div><div class="line">     * that &#123;<span class="doctag">@code</span> o.equals(e)&#125;, if this queue contains one or more such</div><div class="line">     * elements.</div><div class="line">     * Returns &#123;<span class="doctag">@code</span> true&#125; if this queue contained the specified element</div><div class="line">     * (or equivalently, if this queue changed as a result of the call).</div><div class="line">     *</div><div class="line">     * &lt;p&gt;Removal of interior elements in circular array based queues</div><div class="line">     * is an intrinsically slow and disruptive operation, so should</div><div class="line">     * be undertaken only in exceptional circumstances, ideally</div><div class="line">     * only when the queue is known not to be accessible by other</div><div class="line">     * threads.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> o element to be removed from this queue, if present</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this queue changed as a result of the call</div><div class="line">     */</div><div class="line">  	<span class="comment">//从队列里删除一个元素o</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">      	<span class="comment">//如果o是null返回false</span></div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      	<span class="comment">//获取存取队列的到当前的数组</span></div><div class="line">        <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</div><div class="line">      	<span class="comment">//获取锁，如果获取不到进入等待，等待condition.signal()唤醒</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          	<span class="comment">//如果队列中有元素，就去查找移除，否则返回false</span></div><div class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> putIndex = <span class="keyword">this</span>.putIndex;</div><div class="line">                <span class="keyword">int</span> i = takeIndex;</div><div class="line">              	<span class="comment">//通过do while循环去遍历整个数组，也就是队列。从对列的头进入。也就是从takeIndex节点开始</span></div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                  	<span class="comment">//如果找到，然后调用removeAt将元素删除，并且调整队列</span></div><div class="line">                    <span class="keyword">if</span> (o.equals(items[i])) &#123;</div><div class="line">                        removeAt(i);</div><div class="line">                      <span class="comment">//返回成功</span></div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                  	<span class="comment">//如果达到数组的最大长度，然后从数组的头开始，即第一个元素</span></div><div class="line">                    <span class="keyword">if</span> (++i == items.length)</div><div class="line">                        i = <span class="number">0</span>;</div><div class="line">                  <span class="comment">//当i等于putIndex也就是从头找到尾，因为putIndex即队尾</span></div><div class="line">                &#125; <span class="keyword">while</span> (i != putIndex);</div><div class="line">            &#125;</div><div class="line">          	<span class="comment">//否则返回false，就是没找到相等的对象，在这个队列</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          	<span class="comment">//释放锁</span></div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  </div><div class="line">   <span class="comment">/**</span></div><div class="line">     * Returns &#123;<span class="doctag">@code</span> true&#125; if this queue contains the specified element.</div><div class="line">     * More formally, returns &#123;<span class="doctag">@code</span> true&#125; if and only if this queue contains</div><div class="line">     * at least one element &#123;<span class="doctag">@code</span> e&#125; such that &#123;<span class="doctag">@code</span> o.equals(e)&#125;.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> o object to be checked for containment in this queue</div><div class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if this queue contains the specified element</div><div class="line">     */</div><div class="line">  	<span class="comment">//是否包含当前元素o</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">      	<span class="comment">//如果当前元素是null返回false</span></div><div class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      	<span class="comment">//获取当前数组存储队列值</span></div><div class="line">        <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</div><div class="line">      	<span class="comment">//获取锁，如果获取不到进入等待，等待condition.signal()唤醒</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          	<span class="comment">//如果队列里有元素就去查找，否则返回false</span></div><div class="line">            <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</div><div class="line">              	<span class="comment">//获取当前队列中队列尾部在数组中位置</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> putIndex = <span class="keyword">this</span>.putIndex;</div><div class="line">              	<span class="comment">//获取当前队列的开头部分，也就是出队位置</span></div><div class="line">                <span class="keyword">int</span> i = takeIndex;</div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                  	<span class="comment">//如果队列开头位置的元素，是包含的，返回true</span></div><div class="line">                    <span class="keyword">if</span> (o.equals(items[i]))</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                   <span class="comment">//如果达到数组的最大长度，然后从数组的头开始，即第一个元素</span></div><div class="line">                    <span class="keyword">if</span> (++i == items.length)</div><div class="line">                        i = <span class="number">0</span>;</div><div class="line">                  <span class="comment">//循环到队列尾部，结束也就是i==putIndex</span></div><div class="line">                &#125; <span class="keyword">while</span> (i != putIndex);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          <span class="comment">//释放锁</span></div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  </div><div class="line">   <span class="comment">/**</span></div><div class="line">     * Atomically removes all of the elements from this queue.</div><div class="line">     * The queue will be empty after this call returns.</div><div class="line">     */</div><div class="line">  <span class="comment">//移除该队列中所有元素</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">      	<span class="comment">//获取存放队列元素的数组</span></div><div class="line">        <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</div><div class="line">      <span class="comment">//获取锁</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          	<span class="comment">//获取队列张还有多少元素</span></div><div class="line">            <span class="keyword">int</span> k = count;</div><div class="line">          	<span class="comment">//如果元素小于等于0，说明没有元素队列</span></div><div class="line">            <span class="keyword">if</span> (k &gt; <span class="number">0</span>) &#123;</div><div class="line">              	<span class="comment">//获取队尾的节点的数组位置</span></div><div class="line">                <span class="keyword">final</span> <span class="keyword">int</span> putIndex = <span class="keyword">this</span>.putIndex;</div><div class="line">              	<span class="comment">//获取队头节点的数组位置</span></div><div class="line">                <span class="keyword">int</span> i = takeIndex;</div><div class="line">                <span class="keyword">do</span> &#123;</div><div class="line">                  	<span class="comment">//清空该节点的位置，也就是对头元素位置</span></div><div class="line">                    items[i] = <span class="keyword">null</span>;</div><div class="line">                  	<span class="comment">//是否达到数组最大边界,如果是从数组第一个元素开始</span></div><div class="line">                    <span class="keyword">if</span> (++i == items.length)</div><div class="line">                        i = <span class="number">0</span>;</div><div class="line">                <span class="comment">//直到把整个队列数据清空  </span></div><div class="line">                &#125; <span class="keyword">while</span> (i != putIndex);</div><div class="line">              	<span class="comment">//清空后把队尾，和队列头放到一起</span></div><div class="line">                takeIndex = putIndex;</div><div class="line">              	<span class="comment">//清空队列里计算</span></div><div class="line">                count = <span class="number">0</span>;</div><div class="line">              	<span class="comment">//清空迭代器里的值，告诉迭代器现在队列中值是空的</span></div><div class="line">                <span class="keyword">if</span> (itrs != <span class="keyword">null</span>)</div><div class="line">                    itrs.queueIsEmpty();</div><div class="line">              	<span class="comment">//如果之前队列元素，那么看一下还有多少个等待添加的线程，如果有唤醒他们，让他们向队列添加。也就是</span></div><div class="line">              	<span class="comment">//clear队列，对应的是当前线程，如果有加入线程，在当前线程清空后还可以加入。</span></div><div class="line">                <span class="keyword">for</span> (; k &gt; <span class="number">0</span> &amp;&amp; lock.hasWaiters(notFull); k--)</div><div class="line">                    notFull.signal();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          	<span class="comment">//释放锁</span></div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  <span class="comment">//最多从此队列中移除给定数量的可用元素，并将这些元素添加到给定 collection 中 。返回值int代表添加了多少个 </span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">drainTo</span><span class="params">(Collection&lt;? <span class="keyword">super</span> E&gt; c, <span class="keyword">int</span> maxElements)</span> </span>&#123;</div><div class="line">    	<span class="comment">//校验给定的集合是不是空，如果是空抛出空指针异常</span></div><div class="line">        checkNotNull(c);</div><div class="line">    	<span class="comment">//如果这个给定的集合，等于当前这个队列，抛出非法参数异常</span></div><div class="line">        <span class="keyword">if</span> (c == <span class="keyword">this</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">    	<span class="comment">//如果要移除的元素个数小于等于0，直接返回0</span></div><div class="line">        <span class="keyword">if</span> (maxElements &lt;= <span class="number">0</span>)</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    	<span class="comment">//获取存放队列的数组</span></div><div class="line">        <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</div><div class="line">    	<span class="comment">//获取锁</span></div><div class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</div><div class="line">        lock.lock();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">          	<span class="comment">//从要转移的最大元素个数，和线程中存在的元素个数取小的那个</span></div><div class="line">            <span class="keyword">int</span> n = Math.min(maxElements, count);</div><div class="line">          	<span class="comment">//获取队列的起始位置，也就是队列的头</span></div><div class="line">            <span class="keyword">int</span> take = takeIndex;</div><div class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">              	<span class="comment">//开始循环，取出值</span></div><div class="line">                <span class="keyword">while</span> (i &lt; n) &#123;</div><div class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">                  <span class="comment">//从队列取出值放到集合中去，然后删除队列中的值</span></div><div class="line">                    E x = (E) items[take];</div><div class="line">                    c.add(x);</div><div class="line">                    items[take] = <span class="keyword">null</span>;</div><div class="line">                  	<span class="comment">//如果队列头位置，到达数组最大值那么从数组第一元素开始</span></div><div class="line">                    <span class="keyword">if</span> (++take == items.length)</div><div class="line">                        take = <span class="number">0</span>;</div><div class="line">                  	<span class="comment">//取出元素+1</span></div><div class="line">                    i++;</div><div class="line">                &#125;</div><div class="line">              	<span class="comment">//最后返回n个</span></div><div class="line">                <span class="keyword">return</span> n;</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="comment">// Restore invariants even if c.add() threw</span></div><div class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</div><div class="line">                  	<span class="comment">//成功个数大于0,将队列中元素减去i个</span></div><div class="line">                    count -= i;</div><div class="line">                  	<span class="comment">//设置takeIndex位置</span></div><div class="line">                    takeIndex = take;</div><div class="line">                  	<span class="comment">//如果迭代器不等于null</span></div><div class="line">                    <span class="keyword">if</span> (itrs != <span class="keyword">null</span>) &#123;</div><div class="line">                      	<span class="comment">//如果count等于0，说明队列中没有元素</span></div><div class="line">                        <span class="keyword">if</span> (count == <span class="number">0</span>)</div><div class="line">                          	<span class="comment">//设置迭代器队列是空</span></div><div class="line">                            itrs.queueIsEmpty();</div><div class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; take)</div><div class="line">                          	<span class="comment">//否则用Index的值来覆盖到迭代器中</span></div><div class="line">                            itrs.takeIndexWrapped();</div><div class="line">                    &#125;</div><div class="line">                  	<span class="comment">//唤醒等待的线程</span></div><div class="line">                    <span class="keyword">for</span> (; i &gt; <span class="number">0</span> &amp;&amp; lock.hasWaiters(notFull); i--)</div><div class="line">                        notFull.signal();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">          	<span class="comment">//释放锁</span></div><div class="line">            lock.unlock();</div><div class="line">        &#125;</div><div class="line">    	<span class="comment">//这个有两个try操作中有两个finally，一个是处理迭代器的，另一个是处理锁的</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其实ArrayBockingQueue中还有几个内部类没有说，但是我在这里就不多解释，包括序列化和toString方法，迭代器方法和内部类没有介绍。所以我这也就不过多的介绍，本文是基于JDK 1.8.0_121的进行的分析。 ArrayBlockingQueue实现的队列中的锁是没有分离的，即生产和消费用的是同一个锁。而且ArrayBlockingQueue相比LinkedBlockingQueue性能更高。因为ArrayBlocking是通过数组，查找更快，移除使用过的元素会更快，但删除队列中元素对整个队列排序时候LinkedBlockingQueue更快。而且队列长度越大越明显，也会移动调整元素数量更多。但一般情况队列都不会存特别多数据。LinkedBlockingQueue最大长大度也就是Integer的最大值</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;什么是Queue&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Queue就是队列的意思，所谓的队列就是排队，先进先出（FIFO first in frist out）。队列是一种非常常见的数据结构，他是一种特殊的线性表，只允许从head头出队，从tail尾入队。先进先出
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="源代码" scheme="http://yoursite.com/tags/%E6%BA%90%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>LinkedHashMap</title>
    <link href="http://yoursite.com/2017/09/17/LinkedHashMap/"/>
    <id>http://yoursite.com/2017/09/17/LinkedHashMap/</id>
    <published>2017-09-17T02:55:59.000Z</published>
    <updated>2017-11-25T02:37:27.813Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>Linked是什么</p>
<p>linked是串联，连接的意思。编程里面理解成是用<strong>链表</strong>实现的数据结构，一般与HashMap，List，Set什么联合使用，说明这些集合类，都是通过链表实现的，这些集合存储额都是有顺序的，按照放进去的顺序。</p>
</li>
<li><p>什么是链表，链表与数组的去别</p>
<p>链表这个名称，估计学过数据结构的人都不陌生，<strong>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据</strong>。<strong>也就是说他存储的信息的地址不是顺序的，与之相反的是数组。他的存储的信息和内存地址是连续的。</strong>使用链表的好处就在于每次修改删除比较方便，你只要找到对于位置，修改掉前驱元素和后继元素的指针就可以，不用移动其他数据，而数组在新增和删除的时候要移动大量的数据。所以在查询方面数组有很的优势，而在频繁的修改的数据，使用链表速度快一点<strong>。数组利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度O(n)； 数组插入或删除元素的时间复杂度O(n)，链表的时间复杂度O(1)</strong>。同时链表也增加了存储空间，原来只存data，现在要存data的before和after。</p>
</li>
<li><p>LinkedHashMap是什么</p>
<p>LinkedHashMap是HashMap的子类，他实现了Map接口</p>
<p>其扩展了 HashMap 增加了双向链表的实现。相较于 HashMap 的迭代器中混乱的访问顺序，LinkedHashMap 可以提供可以预测的迭代访问，<strong>即按照插入序 (insertion-order) 或访问序 (access-order) 来对哈希表中的元素进行迭代</strong>。从类声明中可以看到，LinkedHashMap 确实是继承了 HashMap，因而 HashMap 中的一些基本操作，如哈希计算、扩容、查找等，在 LinkedHashMap 中都和父类 HashMap 是一致的。插入序就是安装插入的顺序来访问，即从链表的头（frist）开始访问，如果是访问序，就是从链表的尾部（tail）来开始访问，即最新插入，或者是之前访问过的就是最先访问。但是，和 HashMap 有所区别的是，LinkedHashMap 支持按插入序 (insertion-order) 或访问序 (access-order) 来访问其中的元素。所谓插入顺序，就是 Entry 被添加到 Map 中的顺序，更新一个 Key 关联的 Value 并不会对插入顺序造成影响；而访问顺序则是对所有 Entry 按照最近访问 (least-recently) 到最远访问 (most-recently) 进行排序，读写都会影响到访问顺序，但是对迭代器 (entrySet(), keySet(), values()) 的访问不会影响到访问顺序。访问序的特性使得可以很容易通过 LinkedHashMap 来实现一个 LRU(least-recently-used) Cache，后面会给出一个简单的例子。之所以 LinkedHashMap 能够支持插入序或访问序的遍历，是因为 LinkedHashMap 在 HashMap 的基础上增加了双向链表的实现。下面是代码分析</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></div><div class="line">    <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div><div class="line">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</div><div class="line">&#123;</div><div class="line"> <span class="comment">//一个匿名内部类，用于存放相关节点信息，继承HashMap的Node内部类</span></div><div class="line"> <span class="comment">//多了Entry&lt;K,V&gt;类型的 before和after。类似组合模式</span></div><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>.<span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">        Entry&lt;K,V&gt; before, after;</div><div class="line">        Entry(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123;</div><div class="line">            <span class="keyword">super</span>(hash, key, value, next);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//当前链表节点的头节点，最老的节点</span></div><div class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; head;</div><div class="line"><span class="comment">//当前链表的尾部节点，最新的节点</span></div><div class="line"><span class="keyword">transient</span> LinkedHashMap.Entry&lt;K,V&gt; tail;  </div><div class="line">&#125;</div><div class="line"><span class="comment">//将新节点 p 链接到双向链表的末尾</span></div><div class="line"><span class="comment">//一个私有方法，把一个节点加到另一个节点后面，如果前驱节点为null，只有他一个节点，即他是head也是tail</span></div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkNodeLast</span><span class="params">(LinkedHashMap.Entry&lt;K,V&gt; p)</span> </span>&#123;</div><div class="line">        LinkedHashMap.Entry&lt;K,V&gt; last = tail;</div><div class="line">        tail = p;</div><div class="line">        <span class="keyword">if</span> (last == <span class="keyword">null</span>)</div><div class="line">            head = p;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">         <span class="comment">//之前最后的节点是last，把last节点放到最新节点p的before，把last节点after设置成最新节点p</span></div><div class="line">            p.before = last;</div><div class="line">            last.after = p;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//私有方法，把src链接到dst上，就是用dst替换src在双向链表中的位置</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">transferLinks</span><span class="params">(LinkedHashMap.Entry&lt;K,V&gt; src,</span></span></div><div class="line">                               LinkedHashMap.Entry&lt;K,V&gt; dst) &#123;</div><div class="line">  	 	<span class="comment">//将之前src的前驱，和后继都复制给dst，同时赋值给a和b，b是前驱，a是后继</span></div><div class="line">        LinkedHashMap.Entry&lt;K,V&gt; b = dst.before = src.before;</div><div class="line">        LinkedHashMap.Entry&lt;K,V&gt; a = dst.after = src.after;</div><div class="line">  		<span class="comment">//如果b为空，src原来就是head节点，把dst设置成head节点</span></div><div class="line">        <span class="keyword">if</span> (b == <span class="keyword">null</span>)</div><div class="line">            head = dst;</div><div class="line">        <span class="keyword">else</span></div><div class="line">         <span class="comment">//否则把src的前驱节点的after设置成dst</span></div><div class="line">            b.after = dst;</div><div class="line">  		<span class="comment">// 如果a为空,src是原来的tail节点，把dst设置成tail节点</span></div><div class="line">        <span class="keyword">if</span> (a == <span class="keyword">null</span>)</div><div class="line">            tail = dst;</div><div class="line">        <span class="keyword">else</span></div><div class="line">          <span class="comment">//否则把src的后继节点before设置成dst</span></div><div class="line">            a.before = dst;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//调用父类的重新初始化方法，把值设成null</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reinitialize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.reinitialize();</div><div class="line">        head = tail = <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//创建一个新的entry节点，重写父类hashmap的方法</span></div><div class="line"><span class="function">Node&lt;K,V&gt; <span class="title">newNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; e)</span> </span>&#123;</div><div class="line">        LinkedHashMap.Entry&lt;K,V&gt; p =</div><div class="line">            <span class="keyword">new</span> LinkedHashMap.Entry&lt;K,V&gt;(hash, key, value, e);</div><div class="line">  		<span class="comment">//将创建的新节点，加到列表后面</span></div><div class="line">        linkNodeLast(p);</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//将TreeNode节点转换成普通节点。TreeNode节点是个红黑树，在hashMap中，当链表长度超过8时，会把entry链表转换</span></div><div class="line"><span class="comment">//成TreeNode.普通节点即entry节点，是个单链表由key，value，next，hash组成</span></div><div class="line"><span class="function">Node&lt;K,V&gt; <span class="title">replacementNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</div><div class="line">        LinkedHashMap.Entry&lt;K,V&gt; q = (LinkedHashMap.Entry&lt;K,V&gt;)p;</div><div class="line">        LinkedHashMap.Entry&lt;K,V&gt; t =</div><div class="line">            <span class="keyword">new</span> LinkedHashMap.Entry&lt;K,V&gt;(q.hash, q.key, q.value, next);</div><div class="line"> 		<span class="comment">//替换节点的方法</span></div><div class="line">        transferLinks(q, t);</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//创建一个treeNode节点，加入到链表的最后，treeNode是hashmap的内部类，LinkedHashMap继承了HashMap</span></div><div class="line"><span class="function">TreeNode&lt;K,V&gt; <span class="title">newTreeNode</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next)</span> </span>&#123;</div><div class="line">        TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;(hash, key, value, next);</div><div class="line">        linkNodeLast(p);</div><div class="line">        <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//将一个entry节点替换成TreeNode节点，一般碰撞超过8个会用一个树来代替上面的链表</span></div><div class="line"> <span class="function">TreeNode&lt;K,V&gt; <span class="title">replacementTreeNode</span><span class="params">(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next)</span> </span>&#123;</div><div class="line">        LinkedHashMap.Entry&lt;K,V&gt; q = (LinkedHashMap.Entry&lt;K,V&gt;)p;</div><div class="line">   		<span class="comment">//新建一个treeNode节点</span></div><div class="line">        TreeNode&lt;K,V&gt; t = <span class="keyword">new</span> TreeNode&lt;K,V&gt;(q.hash, q.key, q.value, next);</div><div class="line">   		<span class="comment">//替换节点</span></div><div class="line">        transferLinks(q, t);</div><div class="line">        <span class="keyword">return</span> t;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//移除节点的回调函数，这个函数在hashmap中声明，但是没有实现，然后在linkedhashmap实现。</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeRemoval</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// unlink</span></div><div class="line">    <span class="comment">//移除一个节点，双向链表中的连接关系也要调整，先将节点里的值取出来</span></div><div class="line">    LinkedHashMap.Entry&lt;K,V&gt; p =</div><div class="line">        (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</div><div class="line">  	<span class="comment">//移除节点</span></div><div class="line">    p.before = p.after = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (b == <span class="keyword">null</span>)</div><div class="line">        head = a;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        b.after = a;</div><div class="line">    <span class="keyword">if</span> (a == <span class="keyword">null</span>)</div><div class="line">        tail = b;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        a.before = b;</div><div class="line">&#125;</div><div class="line"><span class="comment">/*插入节点的回调函数，也是在hashmap中声明，在Linkedhashmap中实现，evict（赶出），在hashmap照片您好evict都是等于true,本函数也就是在没有指定removeEldestEntry这个函数等于true的时候，是不会移除第一个节点，都只是向后插入，而不替换之前的节点，但是，如果是set的话，*/</span></div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; <span class="comment">// possibly remove eldest</span></div><div class="line">        LinkedHashMap.Entry&lt;K,V&gt; first;</div><div class="line">   		<span class="comment">//对是否删除eldest节点做判断</span></div><div class="line">   		<span class="comment">//如果evict是true，节点不为空，removeEldestEntry函数返回的是true，删除eldest节点</span></div><div class="line">   		<span class="comment">//一般默认removeEldestEntry函数返回的是FALSE，在LinkedHashMap，所以只是把head赋值给了first，并</span></div><div class="line">   		<span class="comment">//没有移除eldest节点，如果你要设置LRU算法的时候覆写该方法，一般的实现是，当设定的内存</span></div><div class="line">  		<span class="comment">//（这里指节点个数）达到最大值时，返回true</span></div><div class="line">        <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="keyword">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</div><div class="line">            K key = first.key;</div><div class="line">          	<span class="comment">//hashMap中的方法，用来节点，linkedhashMap继承过来的</span></div><div class="line">            removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//访问节点的回调函数，这里实现了访问序和插入序的实现</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">afterNodeAccess</span><span class="params">(Node&lt;K,V&gt; e)</span> </span>&#123; <span class="comment">// move node to last</span></div><div class="line">        LinkedHashMap.Entry&lt;K,V&gt; last;</div><div class="line">    	<span class="comment">//如果是访问序，把当前节点放到tail节点</span></div><div class="line">        <span class="keyword">if</span> (accessOrder &amp;&amp; (last = tail) != e) &#123;</div><div class="line">            LinkedHashMap.Entry&lt;K,V&gt; p =</div><div class="line">                (LinkedHashMap.Entry&lt;K,V&gt;)e, b = p.before, a = p.after;</div><div class="line">            p.after = <span class="keyword">null</span>;</div><div class="line">          	<span class="comment">//如果当前的节点的前驱点是空，也可以说，当前节点为head结点那，把after节点，放到head上，</span></div><div class="line">          	<span class="comment">//如果不是把 p 的前驱节点节点的后继节点改成 p 的后继节点。</span></div><div class="line">            <span class="keyword">if</span> (b == <span class="keyword">null</span>)</div><div class="line">                head = a;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                b.after = a;</div><div class="line">         <span class="comment">//如果p的后继节点不为空，p的后继节点与的前驱节点改成p的前驱节点</span></div><div class="line">        <span class="comment">//如果不是也就是p节点是没有后继节点，也就是tail节点那把p的前驱节点复制给last节点，last节点是tail节点</span></div><div class="line">            <span class="keyword">if</span> (a != <span class="keyword">null</span>)</div><div class="line">                a.before = b;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                last = b;</div><div class="line">          	<span class="comment">//如果last节点为空，也就是只有一个节点（当前的tail节点），把当前节点赋值给head节点</span></div><div class="line">          	<span class="comment">//如果不是last节点不为空，把当前节点的前驱设置成last节点，把last节点的后继设成当前节点。</span></div><div class="line">            <span class="keyword">if</span> (last == <span class="keyword">null</span>)</div><div class="line">                head = p;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                p.before = last;</div><div class="line">                last.after = p;</div><div class="line">            &#125;</div><div class="line">          	<span class="comment">//把当前节点放到tail节点上</span></div><div class="line">            tail = p;</div><div class="line">            ++modCount;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	<span class="comment">//遍历LinkedHashMap，将LinkedHashMap中的key和value实现序列化</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">internalWriteEntries</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        <span class="keyword">for</span> (LinkedHashMap.Entry&lt;K,V&gt; e = head; e != <span class="keyword">null</span>; e = e.after) &#123;</div><div class="line">            s.writeObject(e.key);</div><div class="line">            s.writeObject(e.value);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//遍历LinkedHashMap，查找是否包含某个值</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (LinkedHashMap.Entry&lt;K,V&gt; e = head; e != <span class="keyword">null</span>; e = e.after) &#123;</div><div class="line">            V v = e.value;</div><div class="line">            <span class="keyword">if</span> (v == value || (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//获取value值，getNode()方法，实现在hashMap类中</span></div><div class="line">  <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        Node&lt;K,V&gt; e;</div><div class="line">        <span class="keyword">if</span> ((e = getNode(hash(key), key)) == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (accessOrder)</div><div class="line">            afterNodeAccess(e);</div><div class="line">        <span class="keyword">return</span> e.value;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//是否移除最老的entry，记录，默认是false，如果写LRU缓存可以重写这方法。</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//最后说一下LinkedHashMap的构造函数</span></div><div class="line"><span class="comment">//指定LinkedHashMap的初始大小，和负载因子，防止hash碰撞过多，这里是符合泊松分布的。默认加载因子是0.75，</span></div><div class="line"><span class="comment">//super这里调用的是HashMap的构造方法。</span></div><div class="line"><span class="comment">//访问序（accessOrder是false）。</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(initialCapacity, loadFactor);</div><div class="line">        accessOrder = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">//这个应该是他最全的构造函数，这里accessOrder是指是否访问序</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkedHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></div><div class="line">                         <span class="keyword">float</span> loadFactor,</div><div class="line">                         <span class="keyword">boolean</span> accessOrder) &#123;</div><div class="line">        <span class="keyword">super</span>(initialCapacity, loadFactor);</div><div class="line">        <span class="keyword">this</span>.accessOrder = accessOrder;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其实LinkedHashMap中还有几个内部类没有说，但是我在这里就不多解释，他都是重写或者实现了上层的方法。所以我这也就不过多的介绍，本文是基于JDK 1.8.0_121的进行的分析。LinkedHashMap的好处就是插入和删除比较快，他不会像数组那样每次删除增加都会移动，但是，每次查询都会比较慢，毕竟是连续的存储，只有知道当前节点才能知道下一个节点。不如数组快。同时采用链表的设计会对内存的要求增大(每个节点不仅存数据，还要存前驱后继的地址)，不LinkedHashMap是有序的，在很多要求有序的场景下可以使用。</p>
<p>最后还要LRU缓存的实现，这个是从网上找的例子。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//http://blog.jrwang.me/2016/java-collections-linkedhashmap/ 代码出处</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheImpl</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Map&lt;K, V&gt; cache;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacity;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> POLICY &#123;</div><div class="line">        LRU, FIFO</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CacheImpl</span><span class="params">(<span class="keyword">int</span> cap, POLICY policy)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.capacity = cap;</div><div class="line">        cache = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;(cap, <span class="number">0.75f</span>, policy.equals(POLICY.LRU))&#123;</div><div class="line">            <span class="comment">//超出容量就删除最老的值</span></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K, V&gt; eldest)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> size() &gt; capacity;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(K key)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (cache.containsKey(key)) &#123;</div><div class="line">            <span class="keyword">return</span> cache.get(key);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(K key, V val)</span> </span>&#123;</div><div class="line">        cache.put(key, val);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printKV</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"key value in cache"</span>);</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;K,V&gt; entry : cache.entrySet()) &#123;</div><div class="line">            System.out.println(entry.getKey() + <span class="string">":"</span> + entry.getValue());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        CacheImpl&lt;Integer, String&gt; cache = <span class="keyword">new</span> CacheImpl(<span class="number">5</span>, POLICY.LRU);</div><div class="line"></div><div class="line">        cache.set(<span class="number">1</span>, <span class="string">"first"</span>);</div><div class="line">        cache.set(<span class="number">2</span>, <span class="string">"second"</span>);</div><div class="line">        cache.set(<span class="number">3</span>, <span class="string">"third"</span>);</div><div class="line">        cache.set(<span class="number">4</span>, <span class="string">"fourth"</span>);</div><div class="line">        cache.set(<span class="number">5</span>, <span class="string">"fifth"</span>);</div><div class="line">        cache.printKV();</div><div class="line"></div><div class="line">        cache.get(<span class="number">1</span>);</div><div class="line">        cache.get(<span class="number">2</span>);</div><div class="line">        cache.printKV();</div><div class="line"></div><div class="line">        cache.set(<span class="number">6</span>, <span class="string">"sixth"</span>);</div><div class="line">        cache.printKV();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linked是什么&lt;/p&gt;
&lt;p&gt;linked是串联，连接的意思。编程里面理解成是用&lt;strong&gt;链表&lt;/strong&gt;实现的数据结构，一般与HashMap，List，Set什么联合使用，说明这些集合类，都是通过链表实现的，这些集合存储额都是有顺序的，按
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="源代码" scheme="http://yoursite.com/tags/%E6%BA%90%E4%BB%A3%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>转发与重定向</title>
    <link href="http://yoursite.com/2017/08/29/%E8%BD%AC%E5%8F%91/"/>
    <id>http://yoursite.com/2017/08/29/转发/</id>
    <published>2017-08-29T03:12:40.000Z</published>
    <updated>2017-11-25T02:37:59.484Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>转发(forward)：转发做了一次请求，浏览器的地址栏一直是第一次请求的地址。转发是服务器内部request/response控制权的移交。整个过程是一个请求，一个响应。</p>
</li>
<li><p>重定向(redirect):重定向行为是做了两次请求，及产生了两个request对象，重定向会导致request对象信息丢失。两个请求，两个响应。</p>
</li>
<li><p>区别：重定向是客户端行为，转发是服务器行为.重定向可以跨域访问，而转发是在web服务器内部进行的，不能跨域访问。</p>
</li>
<li><p>过程：</p>
<ul>
<li>重定向：浏览器发出http请求 <strong>&gt;&gt;</strong> 服务器接受请求并发送302状态码和新的对应的url到浏览器  <strong>&gt;&gt;</strong> 浏览器接收响应并自动请求新的url   <strong>&gt;&gt;</strong>  服务器接收请求并寻找客户所需的资源响应到浏览器。</li>
<li>转发：浏览器发出http求其  <strong>&gt;&gt;</strong> 服务器接收请求 <strong>&gt;&gt;</strong> 服务器调用内部的一个方法在容器内完成请求处理和转发动作 <strong>&gt;&gt;</strong> 将客户所需资源发送到浏览器。</li>
</ul>
</li>
<li><p>调用方式：</p>
<ul>
<li><p>重定向： </p>
<p>  1).response.sendRedict(url);2).response.setState(302); response.setHeader(“location”,url)；</p>
</li>
<li><p>转发： 1).request.getRequestDispatcher(url).forward(request,response);2).request.getRequestDispatcher(url).include(request,response)</p>
</li>
</ul>
</li>
<li><p>总结：</p>
<p>转发在服务器端完成的；重定向是在客户端完成的<br>转发的速度快；重定向速度慢</p>
<p>转发的是同一次请求；重定向是两次不同请求</p>
<p>转发不会执行转发后的代码；重定向会执行重定向之后的代码</p>
<p>转发地址栏没有变化；重定向地址栏有变化</p>
<p>转发必须是在同一台服务器下完成；重定向可以在不同的服务器下完成</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;转发(forward)：转发做了一次请求，浏览器的地址栏一直是第一次请求的地址。转发是服务器内部request/response控制权的移交。整个过程是一个请求，一个响应。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重定向(redirect):重定向行为是做了两次
    
    </summary>
    
      <category term="网络" scheme="http://yoursite.com/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>为什么你一直没有成就（来干了这碗鸡汤）</title>
    <link href="http://yoursite.com/2017/08/06/%E9%B8%A1%E6%B1%A4%E9%9A%8F%E7%AC%94/"/>
    <id>http://yoursite.com/2017/08/06/鸡汤随笔/</id>
    <published>2017-08-06T06:39:42.000Z</published>
    <updated>2017-11-25T02:34:59.277Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>因为你随波逐流，近墨者黑、不思上进，分钱没有、死爱面子！因为你畏惧你的父母、你听信你亲戚、你没有主张、你不敢一个人做决定。你观念传统、只想结婚生子，然后生老病死、走你父母一模一样的路。因为你天生脆弱、脑筋迟钝只想做按班就部的工作。因为你总以为只有自己创业才叫成功</li>
<li>整天应付你现在的工作而不思进取。因为你想做无本的生意，你想坐在家里等天上掉陷饼！因为你抱怨没有机遇、机遇来到你身边的时候你又抓不住，因为你不会抓！因为你的贫穷，所以你自卑！你退缩了、你什么都不敢做！你没有特别技能，你只有使蛮力！你和你父母一样，恶性循环！所以，你永远一辈子碌碌无为，很多人想把握机会、但要做一件事情时，往往给自己找了很多理由让自己一直处于矛盾之中！不断浪费时间，虚度时光</li>
<li>1 、我没有口才——错：没有人天生就很会说话，台上的演讲大师也不是一下子就能出口成章，那是他们背后演练了无数次的结果！你骂人的时候很擅长，抱怨的时候也很擅长，但这种口才是没有价值的口才，看别人争论的时候、自己满嘴评头论足、却不知反省自己，倘若你付出努力练习，你今天是否还说自己没口才？</li>
<li>2 、我没有钱—— 错： 不是没有钱，而是没有赚钱的脑袋。工作几年了没有钱么？有，但是花掉了。花在没有投资回报的事情上面。花在吃喝玩乐上或存放贬值了，没有实现价值最大化，所以钱就这样入不敷出。每月当月光族、周而复始、没有远虑、当一天和尚敲一天钟，得过且过。</li>
<li>3 、我没有能力——错：不给自己机会去锻炼，又有谁一出生就有能力？一毕业就是社会精英？一创业就马上成功？当别人很努力的学习、很努力的积累、努力找方法，而你每天就只做了很少一点就觉得乏味。学了一些就觉得没意思、看了几页书就不想看、跟自己也跟别人说没兴趣学。然后大半辈子过去一事无成，整天抱怨上天不给机会。能力是努力修来的、不努力想有能力，天才都会成蠢材。但努力，再笨的人也能成精英。</li>
<li>4 、我没有时间——错：时间很多、但浪费的也很多！别人很充实、你在看电视，别人在努力学习时、你在玩游戏消遣虚度。总之时间就是觉得很多余、你过得越来越无聊。别人赚钱了羡慕别人、但不去学别人好好把握时间创造价值，整天不学无术。</li>
<li>5 、我没有心情——错：心情好的时候去游玩、心情不好的时候在家喝闷酒，心情好的时候去逛街、心情不好的时候玩游戏，心情好的时候去享受、心情不好的时候就睡大觉。好坏心情都一样，反正就是不做正事。</li>
<li>6 、我没有兴趣——错：兴趣是什么？吃喝玩乐谁都有兴趣，没有成就哪来的尽兴！没钱拿什么享受生活！你的兴趣是什么？是出去旅游回来月光族、出去K歌回头钱包空空、出去大量购物回来惨兮兮…. 打工有没有兴趣？挤公交车有没有兴趣？上班签到下班打卡有没有兴趣？家里急需要一大笔钱拿不出来有没有兴趣？借了钱没钱还有没有兴趣？卖老鼠药的人对老鼠药有兴趣…..？</li>
<li>7 、我考虑考虑——错：考虑做吧有可能就成了、不做吧好不甘心！一想整天上班也没有个头、还是明天开始做吧！又一想还是算了、这钱挣的也不容易！不不、决定了不能放弃机会！哎呀、天都黑了，明天再说吧！然后第二天又因为以上12345 点、因为左思右想、继续循环、最终不能决定。犹犹豫豫、耽误了很多时间、还是一无所获。有句话是：“可怜之人必有可恨之处！” 这一生中不是没有机遇，而是没有争取与把握！借口太多，理由太多….！争取之人必竭力争取、一分钱都没有也千方百计想办法！不争取之人给一百万也动不起来、发财不了、还有可能一败涂地。这就是行动力的欠缺！喜欢犹豫不决、喜欢拖延、喜欢一辈子平庸。在你穷的时候，要少在家里，多在外面。在你富有的时候，要多在家里，少在外面。这就是生活的艺术。</li>
<li>穷得时候，钱要花给别人，富的时候，钱要花给自己。很多人，都做颠倒了。</li>
<li>穷得时候，不要计较，对别人要好。富的时候，要学会让别人对自己好。自己对自己更好。</li>
<li>穷要把自己贡献出去，尽量让别人利用。富，要把自己收藏好，小心别让别人随便利用。这些奇妙的生活方式，是很少人能够明白的。</li>
<li>穷的时候，花钱给别人看。富的时候，花钱给自己享受。</li>
<li>穷的时候一定要大方，富的时候，就不要摆阔了。生命已经恢复了简单，已经回到了宁静。 年轻不是过错，贫穷无需害怕。懂得培养自己，懂得什么是贵重物品，懂得该投资什么，懂得该在哪里节约，这是整个过程的关键。</li>
<li>少在外面吃饭，要吃就请客，要请，就请比自己更有梦想的、更有思想、更努力的人。</li>
<li>一旦生活需要的钱已经够了，最大的花费，就是用你的收入，完成你的梦想，去放开你的翅膀大胆地做梦，去让生命经历不一样的旅程。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;因为你随波逐流，近墨者黑、不思上进，分钱没有、死爱面子！因为你畏惧你的父母、你听信你亲戚、你没有主张、你不敢一个人做决定。你观念传统、只想结婚生子，然后生老病死、走你父母一模一样的路。因为你天生脆弱、脑筋迟钝只想做按班就部的工作。因为你总以为只有自己创业才叫成功
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="鸡汤" scheme="http://yoursite.com/tags/%E9%B8%A1%E6%B1%A4/"/>
    
  </entry>
  
  <entry>
    <title>Java内存模型</title>
    <link href="http://yoursite.com/2017/07/27/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2017/07/27/Java内存模型/</id>
    <published>2017-07-27T11:23:03.000Z</published>
    <updated>2018-01-23T09:29:14.321Z</updated>
    
    <content type="html"><![CDATA[<p>Java内存模型(Java  Memory Model)：往往是指Java程序在运行时内存的模型，而Java代码是运行在Java虚拟机之上的，由Java虚拟机通过解释执行(解释器)或编译执行(即时编译器)来完成，虚拟机在执行Java程序的过程中，会把它管理的内存划分为几个不同的数据区域，这些区域都有各自的用途、创建时间、销毁时间。故Java内存模型，也就是指Java虚拟机的运行时内存模型。它包括程序计数器(Program Counter Register)、虚拟机栈（栈  Stack）、本地方法栈(Native Method Stack)、方法区(Method Area)、堆(Heap)。其实还有常量池，只不过他一般都是在方法区中。</p>
<p><img src="/img/jvm_memory_1.jpg" alt="jvm_memory"></p>
<p>Java栈：</p>
<ul>
<li>栈是一种非常常见的数据结构，它采用典型的<strong>先进后出(后进先出 LIFO)</strong>的操作方式完成的。每一个栈都包含一个栈顶，每次出栈是将栈顶的数据取出，同样存数据也是存到栈顶。栈式一块连续的内存区域，大小是有操作系统觉决定的(这个可以在配置文件中配置)。所以栈的大小比较小，远远小于堆。主要存储一些引用和局部变量(基本类型的局部变量)和方法调用信息，也就是每个方法调用被压入栈中，当他运行完的时候(return)被弹出，<strong>每个方法也就是一个栈帧</strong>，所以栈内是有严格的生命周期的，同时当方法调用过多的时候，栈空间不足会抛出java.lang.StackOverFlowError。在Hot Spot虚拟机中，可以使用<strong>-Xss参数来设置栈的大小</strong>。<strong>栈的大小直接决定了函数调用的可达深度</strong></li>
<li>Java<strong>栈总是与线程关联在一起的</strong>，每当创建一个线程，JVM就会为该线程创建对应的Java栈，<strong>在这个Java栈中又会包含多个栈帧(Stack Frame)，这些栈帧是与每个方法关联起来的，每运行一个方法就创建一个栈帧，每个栈帧会含有一些局部变量、操作栈和方法返回值等信息</strong>。每当一个方法执行完成时，该栈帧就会弹出栈帧的元素作为这个方法的返回值，并且清除这个栈帧，Java栈的栈顶的栈帧就是当前正在执行的活动栈，也就是当前正在执行的方法，PC寄存器也会指向该地址。只有这个活动的栈帧的本地变量可以被操作栈使用，当在这个栈帧中调用另外一个方法时，与之对应的一个新的栈帧被创建，这个新创建的栈帧被放到Java栈的栈顶，变为当前的活动栈。同样现在只有这个栈的本地变量才能被使用，当这个栈帧中所有指令都完成时，这个栈帧被移除Java栈，刚才的那个栈帧变为活动栈帧，前面栈帧的返回值变为这个栈帧的操作栈的一个操作数。<strong>所以Java栈是线程是不共享的，而堆内的数据是共享的</strong></li>
<li>由于Java栈是与线程对应起来的，Java栈数据不是线程共有的，所以不需要关心其数据一致性，也不会存在同步锁的问题。</li>
<li>栈帧(Stack Frame)由三部分组成：<strong>局部变量区、操作数栈、帧数据区</strong>(动态链接方法，返回地址，额外的信息)。局部变量区和操作数栈的大小要视对应的方法而定，他们是按字长计算的。但调用一个方法时，它从类型信息中得到此方法局部变量区和操作数栈大小，并据此分配栈内存，然后压入Java栈。<ul>
<li>局部变量表 (locals大小，编译期确定)，一组变量存储空间， 容量以slot为最小单位。</li>
<li>操作栈(stack大小，编译期确定)，操作栈元素的数据类型必须与字节码指令序列严格匹配</li>
<li>动态连接， 指向运行时常量池中该栈帧所属方法的引用，为了 动态连接使用。<ul>
<li>前面的解析过程其实是静态解析；</li>
<li>对于运行期转化为直接引用，称为动态解析。</li>
</ul>
</li>
<li>方法返回地址<ul>
<li>正常退出，执行引擎遇到方法返回的字节码，将返回值传递给调用者</li>
<li>异常退出，遇到Exception,并且方法未捕捉异常，那么不会有任何返回值。</li>
</ul>
</li>
<li>额外附加信息，虚拟机规范没有明确规定，由具体虚拟机实现。</li>
</ul>
</li>
</ul>
<p>Java堆：</p>
<ul>
<li><p>Java的堆，是用来存储真正的对象，<strong>即new的时候向内存申请的地方，Java是自动分配，他存储对象真正的信息</strong>。Java中通过引用去访问对象，即通过栈中的引用（存的是堆中的地址来拿到堆中的数据，这一点和C语言的指针很想，不过在Java中对堆的内存回收和处理都是通过JVM的GC(Garbage Collection)来处理内存。从内存回收的角度来看，由于现在GC基本都采用分代收集算法，所以Java堆还可以细分为：新生代和老年代；新生代再细致一点有Eden空间、From Survivor空间、To Survivor空间等。</p>
<ul>
<li>从内存回收角度，Java堆被分为新生代和老年代；这样划分的好处是为了更快的回收内存；</li>
<li>从内存分配角度，Java堆可以划分出线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB)；这样划分的好处是为了更快的分配内存；</li>
</ul>
</li>
<li><p><strong>堆内存用来存储Java中的对象。无论是成员变量，局部变量，还是类变量，它们指向的对象都存储在堆内存中</strong>。堆空间不足会抛出异常java.lang.OutOfMemoryError。他是线程共享，每一线程都去堆（heap）去取值，是被所有Java线程锁共享的，也就是线程不安全的。关于在堆上内存分配是并发进行的，虚拟机采用CAS加失败重试保证原子操作，或者是采用每个线程预先分配TLAB内存。</p>
</li>
<li><p>对象创建的过程是在堆上分配着实例对象，那么对象实例的具体结构如下：对于填充数据不是一定存在的，仅仅是为了字节对齐。HotSpot VM的自动内存管理要求对象起始地址必须是8字节的整数倍。对象头本身是8的倍数，当对象的实例数据不是8的倍数，便需要填充数据来保证8字节的对齐。该功能类似于高速缓存行的对齐。</p>
<p><img src="/img/java_object.jpg" alt="java_object"></p>
</li>
</ul>
<p>方法区：</p>
<ul>
<li><strong>方法区存放了要加载的类的信息（名称、修饰符等）、类中的静态常量、类中定义为final类型的常量、类中的Field信息、类中的方法信息</strong>，当在程序中通过Class对象的getName.isInterface等方法来获取信息时，这些数据都来源于方法区。方法区是被Java线程锁共享的，不像Java堆中其他部分一样会频繁被GC回收，它存储的信息相对比较稳定，在一定条件下会被GC，当方法区要使用的内存超过其允许的大小时，会抛出OutOfMemory的错误信息。方法区也是堆中的一部分，就是我们通常所说的Java堆中的永久区 Permanet Generation，大小可以通过参数来设置,可以通过-XX:PermSize指定初始值，-XX:MaxPermSize指定最大值，在java 8中移除方法区增加了MetaData区，也就是元数据区。</li>
</ul>
<p>PC寄存器/程序计数器：</p>
<ul>
<li><strong>当前线程所执行的字节码行号指示器</strong>，严格来说是一个数据结构，用于保存当前正在执行的程序的内存地址，由于Java是支持多线程执行的，所以程序执行的轨迹不可能一直都是线性执行。当有多个线程交叉执行时，被中断的线程的程序当前执行到哪条内存地址必然要保存下来，以便用于被中断的线程恢复执行时再按照被中断时的指令地址继续执行下去。<strong>为了线程切换后能恢复到正确的执行位置，每个线程都需要有一个独立的程序计数器，各个线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存,这在某种程度上有点类似于“ThreadLocal”，是线程安全的。</strong></li>
<li>当线程正在执行一个Java方法时，PC计数器记录的是正在执行的虚拟机字节码的地址；当线程正在执行的一个Native方法时，PC计数器则为空（Undefined）</li>
</ul>
<p>常量池：</p>
<ul>
<li>常量池本身是方法区中的一个数据结构。常量池中存储了如<strong>字符串、final变量值、类名和方法名常量</strong>。<strong>常量池在编译期间就被确定，并保存在已编译的.class文件中</strong>。一般分为两类：字面量和应用量。字面量就是字符串、final变量等。类名和方法名属于引用量。引用量最常见的是在调用方法的时候，根据方法名找到方法的引用，并以此定为到函数体进行函数代码的执行。引用量包含：类和接口的权限定名、字段的名称和描述符，方法的名称和描述符。</li>
</ul>
<p>本地方法栈：</p>
<ul>
<li>本地方法栈和Java栈所发挥的作用非常相似，<strong>区别不过是Java栈为JVM执行Java方法服务</strong>，<strong>而本地方法栈为JVM执行Native方法服务</strong>。本地方法栈也会抛出StackOverflowError和OutOfMemoryError异常。</li>
</ul>
<p>下面是详细的图片介绍：</p>
<p><img src="/img/stack_heap_info.jpg" alt="stack_heap_info"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Java内存模型(Java  Memory Model)：往往是指Java程序在运行时内存的模型，而Java代码是运行在Java虚拟机之上的，由Java虚拟机通过解释执行(解释器)或编译执行(即时编译器)来完成，虚拟机在执行Java程序的过程中，会把它管理的内存划分为几个不
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>事务</title>
    <link href="http://yoursite.com/2017/06/17/%E4%BA%8B%E5%8A%A1/"/>
    <id>http://yoursite.com/2017/06/17/事务/</id>
    <published>2017-06-17T02:00:00.000Z</published>
    <updated>2017-11-25T02:43:43.708Z</updated>
    
    <content type="html"><![CDATA[<p>(Transaction)事务:访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。也可以说一系列的操作，不允许加塞。Transaction是交易的意思，unit是单元也有单位的意思，也可以说是一种访问时交易的单位。</p>
<p>事务的特性：事务是恢复和并发的基本单位。即每次出问题回滚一个事务(Transaction)。在并发的情况下，也就是并发多个事务,也就是同时处理多个事务，事务之间是并发。</p>
<p>事务具有的四个属性：原子性  atomicity，一致性  consistency，隔离性  isolation，永久性 durability。</p>
<p>原子性：一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。也就是原子不可分割，但单内部执行，还是一条一条指令去执行。</p>
<p>一致性：事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。在关系型数据库中都是强一致性，非关系数据库中弱一致性也就是最终一致性是可以接受的。</p>
<ul>
<li>强一致性：当更新操作完成之后，任何多个后续进程或者线程的访问都会返回最新的更新过的值(可能是多个数据库节点，也有可能是单机)。这种是对用户最友好的，就是用户上一次写什么，下一次就保证能读到什么。根据 CAP 理论，这种实现需要牺牲可用性。</li>
<li>弱一致性：系统并不保证续进程或者线程的访问都会返回最新的更新过的值。系统在数据写入成功之后，不承诺立即可以读到最新写入的值，也不会具体的承诺多久之后可以读到。</li>
<li>最终一致性：弱一致性的特定形式。系统保证在没有后续更新的前提下，系统<strong>最终</strong>返回上一次更新操作的值。在没有故障发生的前提下，不一致窗口的时间主要受通信延迟，系统负载和复制副本的个数影响。DNS 是一个典型的最终一致性系统(由于DNS多级缓存的实现，所以修改DNS记录后不会在全球所有DNS服务节点生效，需要等待DNS服务器缓存过期后向源服务器更新新的记录才能实现)。也可说最终一致性，就是不保证在任意时刻任意节点上的同一份数据都是相同的，但是随着时间的迁移，不同节点上的同一份数据总是在向趋同的方向变化。也可以简单的理解为在一段时间后，节点间的数据会最终达到一致状态。</li>
</ul>
<p>隔离性：一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。SQL标准定义了4类隔离级别，包括了一些具体规则，用来限定事务内外的哪些改变是可见的，哪些是不可见的。低级别的隔离级一般支持更高的并发处理，并拥有更低的系统开销。</p>
<ul>
<li><p>Read Uncommitted（读取未提交内容）在该隔离级别，所有事务都可以看到其他未提交事务的执行结果。本隔离级别很少用于实际应用，因为它的性能也不比其他级别好多少。<strong>读取未提交的数据，也被称之为脏读（Dirty Read）</strong>，这个一般只多个事务之间存在的问题。</p>
</li>
<li><p>Read Committed（读取提交内容）这是大多数数据库系统的默认隔离级别（但不是MySQL默认的）。它满足了隔离的简单定义：一个事务只能看见已经提交事务所做的改变。这种隔离级别也支持所谓的不可重复读（Nonrepeatable Read），因为同一事务的其他实例在该实例处理其间可能会有新的commit，所以同一select可能返回不同结果。</p>
</li>
<li><p>Repeatable Read（可重读，即一个事务中可以重复读取数据）这是MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行。不过理论上，这会导致另一个棘手的问题：<strong>幻读（Phantom Read）。简单的说，幻读指当用户读取某一范围的数据行时，另一个事务又在该范围内插入了新行，当用户再读取该范围的数据行时，会发现有新的“幻影”行。</strong>InnoDB和Falcon存储引擎通过多版本并发控制（MVCC，Multiversion Concurrency Control）机制解决了该问题。    </p>
</li>
<li><p>Serializable（可串行化） 这是最高的隔离级别，它通过<strong>强制事务排序</strong>，使之不可能相互冲突，从而解决幻读问题。简言之，它是在每个读的数据行上加上共享锁。在这个级别，可能导致大量的超时现象和锁竞争。(不存在事务的并发)</p>
</li>
<li><p>脏读(Drity Read)：<strong>某个事务</strong>已更新一份数据，<strong>另一个事务</strong>在此时读取了同一份数据，由于某些原因，前一个RollBack了操作，则后一个事务所读取的数据就会是不正确的。</p>
</li>
<li><p>不可重复读(Non-repeatable read):在<strong>一个事务</strong>的两次查询之中数据不一致，这可能是两次查询过程中间插入了一个事务更新的原有的数据。<strong>即一次事务中不可已重复读取数据</strong></p>
</li>
<li><p>幻读(Phantom Read):在<strong>一个事务</strong>的两次查询中数据笔数不一致，例如有一个事务查询了几列(Row)数据，而<strong>另一个事务</strong>却在此时插入了新的几列数据，先前的事务在接下来的查询中，就会发现有几列数据是它先前所没有的。</p>
<p><img src="/img/af5b9c1e-4517-3df2-ad62-af25d1672d12.jpg" alt="img"></p>
</li>
</ul>
<p>持久性：持久性也称永久性，指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响，除非下一个事务中的操作更改这个数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;(Transaction)事务:访问并可能更新数据库中各种数据项的一个程序执行单元(unit)。也可以说一系列的操作，不允许加塞。Transaction是交易的意思，unit是单元也有单位的意思，也可以说是一种访问时交易的单位。&lt;/p&gt;
&lt;p&gt;事务的特性：事务是恢复和并发的
    
    </summary>
    
      <category term="数据库" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>CAS-乐观锁</title>
    <link href="http://yoursite.com/2017/05/29/%E9%94%81/"/>
    <id>http://yoursite.com/2017/05/29/锁/</id>
    <published>2017-05-29T15:56:10.000Z</published>
    <updated>2017-11-25T02:35:32.361Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>锁<br>在java中一般并发编程时候（多线程）才会用到锁，锁的作用就是保证数据的一致性，防止操作数据时出现脏数据。而加上锁就可以保证 共享资源 会被单个线程使用，保证了数据的一致性。（即不会出现多个线程操作同一个资源导致数据异常）。不过引入了锁就会导致一个问题，那就是死锁</li>
<li>死锁<br>顾明思义，就是因为锁的缘故（共享资源）导致两个或两个以上线程互相等待（阻塞），和死循环类似。 也可以指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</li>
<li><p>死锁的产生条件<br>1、互斥条件：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。<br>2、请求和保持条件：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。<br>3、不剥夺条件：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。<br>4、环路等待条件：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源<br><strong>总结一下就是因为有共享资源，所以有竞争，有竞争后有锁，有锁后有死锁（不过非互斥锁没有死锁，也就是乐观锁，不过会一直自旋）</strong></p>
</li>
<li><p>悲观锁<br>顾名思义比较悲观，每次操作之前都上锁，不管用没有竞争都有锁；如果持有时间比较长的时间时，对性能上的开销比较大，因为每次都会将资源锁定。比如在java中synchronized关键字，synchronized一般用于引用类型而不是基本类型。</p>
</li>
<li>乐观锁<br>也就是每次操作之前，都不上锁。然后通过一定检测手段决定是否更新数据，这种方式下，已经没有所谓的锁概念了，每条线程都直接先去执行操作，计算完成后检测是否与其他线程存在共享数据竞争，如果没有则让此操作成功，如果存在共享数据竞争则可能不断地重新执行操作和检测，直到成功为止。</li>
<li>乐观锁的缺点<br>观锁只能保证一个共享变量的原子操作。如上例子，自旋过程中只能保证value变量的原子性，这时如果多一个或几个变量，乐观锁将变得力不从心，但互斥锁能轻易解决，不管对象数量多少及对象颗粒度大小。<br>长时间自旋可能导致开销大。假如CAS长时间不成功而一直自旋，会给CPU带来很大的开销。<br>ABA问题。CAS的核心思想是通过比对内存值与预期值是否一样而判断内存值是否被改过，但这个判断逻辑不严谨，假如内存值原来是A，后来被一条线程改为B，最后又被改成了A，则CAS认为此内存值并没有发生改变，但实际上是有被其他线程改过的，这种情况对依赖过程值的情景的运算结果影响很大。解决的思路是引入版本号，每次变量更新都把版本号加一。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;锁&lt;br&gt;在java中一般并发编程时候（多线程）才会用到锁，锁的作用就是保证数据的一致性，防止操作数据时出现脏数据。而加上锁就可以保证 共享资源 会被单个线程使用，保证了数据的一致性。（即不会出现多个线程操作同一个资源导致数据异常）。不过引入了锁就会导致一个问题
    
    </summary>
    
      <category term="编程" scheme="http://yoursite.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java语法糖</title>
    <link href="http://yoursite.com/2017/05/14/Java%E8%AF%AD%E6%B3%95%E7%B3%96/"/>
    <id>http://yoursite.com/2017/05/14/Java语法糖/</id>
    <published>2017-05-14T03:26:05.000Z</published>
    <updated>2017-11-25T02:37:08.571Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>Java语法糖（syntactic sugar），也称为糖衣语法，是由英国计算机科学家Peter.j.Landin发明的术语，指计算机语言中添加某种语法。（说白了就是对现有语法的封装）这种语法对语言是我功能并没有影响，但是方便程序员使用。Java中最常用的语法糖泛型，变长参数，条件编译，自动拆装箱，内部类，枚举类等。虚拟机其实并不支持这些语法，他们都是在编译期被还原成简单基础的语法结构。这个过程为语法糖。</li>
<li><p>泛型的实现</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 在源代码中存在泛型</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</div><div class="line">    map.put(<span class="string">"hello"</span>,<span class="string">"你好"</span>);</div><div class="line">    String hello = map.get(<span class="string">"hello"</span>);</div><div class="line">    System.out.println(hello);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//当上述源代码被编译为class文件后，泛型被擦除且引入强制类型转换</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    HashMap map = <span class="keyword">new</span> HashMap(); <span class="comment">//类型擦除</span></div><div class="line">    map.put(<span class="string">"hello"</span>, <span class="string">"你好"</span>);</div><div class="line">    String hello = (String)map.get(<span class="string">"hello"</span>);<span class="comment">//强制转换</span></div><div class="line">    System.out.println(hello);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>自动拆装箱的实现</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//源码中的泛型</div><div class="line">public static void main(String[] args) &#123;</div><div class="line">    Integer a = 1;</div><div class="line">    int b = 2;</div><div class="line">    int c = a + b;</div><div class="line">    System.out.println(c);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//编译为class文件</div><div class="line"></div><div class="line">public static void main(String[] args) &#123;</div><div class="line">    Integer a = Integer.valueOf(1); // 自动装箱</div><div class="line">    byte b = 2;</div><div class="line">    int c = a.intValue() + b;//自动拆箱</div><div class="line">    System.out.println(c);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>变长参数</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//源码中的变长参数</div><div class="line">public class Varargs &#123;</div><div class="line">    public static void print(String... args) &#123;</div><div class="line">        for(String str : args)&#123;</div><div class="line">            System.out.println(str);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        print(&quot;hello&quot;, &quot;world&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">//编译后的变长参数，而且能看出来变长参数是通过数组实现的</div><div class="line">public class Varargs &#123;</div><div class="line">    public Varargs() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void print(String... args) &#123;</div><div class="line">        String[] var1 = args;</div><div class="line">        int var2 = args.length;</div><div class="line">        //增强for循环的数组实现方式</div><div class="line">        for(int var3 = 0; var3 &lt; var2; ++var3) &#123;</div><div class="line">            String str = var1[var3];</div><div class="line">            System.out.println(str);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        //变长参数转换为数组</div><div class="line">        print(new String[]&#123;&quot;hello&quot;, &quot;world&quot;&#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>内部类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//在源码中的内部类</div><div class="line">public class Outer &#123;</div><div class="line">    class Inner&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//在编译后的内部类</div><div class="line"></div><div class="line">class Outer$Inner &#123;</div><div class="line">    Outer$Inner(Outer var1) &#123;</div><div class="line">        this.this$0 = var1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>枚举类型</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">//在源码中的枚举实现</div><div class="line"></div><div class="line">public enum Fruit &#123;</div><div class="line">    APPLE,ORINGE</div><div class="line">&#125;</div><div class="line"></div><div class="line">//编译后的枚举</div><div class="line"></div><div class="line">//继承java.lang.Enum并声明为final</div><div class="line">public final class Fruit extends Enum</div><div class="line">&#123;</div><div class="line"></div><div class="line">    public static Fruit[] values()</div><div class="line">    &#123;</div><div class="line">        return (Fruit[])$VALUES.clone();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Fruit valueOf(String s)</div><div class="line">    &#123;</div><div class="line">        return (Fruit)Enum.valueOf(Fruit, s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Fruit(String s, int i)</div><div class="line">    &#123;</div><div class="line">        super(s, i);</div><div class="line">    &#125;</div><div class="line">    //枚举类型常量</div><div class="line">    public static final Fruit APPLE;</div><div class="line">    public static final Fruit ORANGE;</div><div class="line">    private static final Fruit $VALUES[];//使用数组进行维护</div><div class="line"></div><div class="line">    static</div><div class="line">    &#123;   </div><div class="line">        //protected Enum(String name, int ordinal),这个构造函数是Enum自带的，ordinal是用来排序的</div><div class="line">        APPLE = new Fruit(&quot;APPLE&quot;, 0);</div><div class="line">        ORANGE = new Fruit(&quot;ORANGE&quot;, 1);</div><div class="line">        $VALUES = (new Fruit[] &#123;</div><div class="line">            APPLE, ORANGE</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Java语法糖（syntactic sugar），也称为糖衣语法，是由英国计算机科学家Peter.j.Landin发明的术语，指计算机语言中添加某种语法。（说白了就是对现有语法的封装）这种语法对语言是我功能并没有影响，但是方便程序员使用。Java中最常用的语法糖
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>HashMap</title>
    <link href="http://yoursite.com/2017/05/14/HashMap/"/>
    <id>http://yoursite.com/2017/05/14/HashMap/</id>
    <published>2017-05-14T03:26:05.000Z</published>
    <updated>2017-11-25T02:45:52.297Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>什么是hash    </p>
<p>散列法（Hashing）或哈希法是一种将字符组成的字符串转换为固定长度（一般是更短长度）的数值或索引值的方法，称为散列法，也叫哈希法。==简单来讲就是将任意长度的二进制映射到固定长度的较小的二进制，而这个较小的二进制是由hash算法来生成。== 在简单点就是像是查字典，只不过是字典里的查询不是a,b,c,d而是hashcode。而这个hashcode就有是较短的二进制。   </p>
</li>
<li><p><strong>什么是map</strong><br>map即映射，也就是平时说的key-value键值对，entry：也是key，value的形式存储的，有了entry后从map里取值，赋值上更方便[对象操作对象]（查了好多资料都是这样说的，而且好多实现都是把值存到entry中，在存到map里，而jdk8用的不是entry用的是node，而对hash算法，也是对entry或者是node的使用进行了hash而对map本身没有影响）</p>
</li>
<li><p><strong>什么是hashMap，也就是使用了hash算法的map</strong><br>但是在代码实现就不是那么简单了。<br>Java中的hashMap中的数据存储是由数组和链表实现的。</p>
<ul>
<li><strong>数组</strong>：组是在内存中开辟一段连续的空间，因此，只要知道了数组首个元素的地址，在数组中寻址就会非常容易，其时间复杂度为O(1)。但是当要插入或删除数据时，时间复杂度就会变为O(n)。</li>
<li><strong>链表</strong>： 是内存中一系列离散的空间，其插入和删除操作的内存复杂度为O(1)，但是寻址操作的复杂度却是O(n)。那有没有一种方法可以结合两者的优点，即寻址，插入删除都快呢？这个方法就是HashMap。</li>
<li><strong>散列函数</strong>：将数据的hashCode映射到散列表中的位置，此过程不需给出冲突解决方案。好的散列函数的2个必备条件：1，快捷，在O（1）时间内运行；2，均匀的分布hashCode，填充概率相同。</li>
<li><strong>冲突解决方案</strong>（collisionsolution）：当一个新项散列到已经被占据的散列表中的位置时，被告之发生冲突，解决方案用于确定新项可以插入散列表中未被占据的位置。解决冲突主要的主要方法：开放寻址方法（寻找另外的空位）；封闭寻址方法（吊挂另一种数据结构）一般采用后者挂链表的方式。</li>
<li><strong>再散列</strong>（rehash）：当数据的容量大于散列表的容量的容量时，那么创建一张指定新容量的表，再将原来表中的数据映射到新表中。</li>
<li><strong>java.util.HashMap</strong>是很常见的类，实现了java.util.Map<k,v>接口<br><strong>HashMap</strong>主要是用数组来存储数据的，我们都知道它会对key进行哈希运算，<br>哈系运算会有重复的哈希值，对于哈希值的冲突，HashMap采用链表（挂链）来解决的。   </k,v></li>
</ul>
</li>
<li><p><strong>Entry</strong>就是HashMap存储数据所用的类，相当于链表的节点。它拥有的属性如下<br>Java代码 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">static class Entry implements Map.Entry &#123;  </div><div class="line">    final K key;  </div><div class="line">          V value;  </div><div class="line">          Entry next;  </div><div class="line">          int hash;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>看到next了吗？next就是为了哈希冲突而存在的。比如通过哈希运算，一个新元素应该在数组的第10个位置，但是第10个位置已经有Entry，那么好吧，将新加的元素也放到第10个位置，将第10个位置的原有Entry赋值给当前新加的 Entry的next属性。数组存储的是链表，链表是为了解决哈希冲突的。</p>
</li>
<li><strong> 后记 </strong> 这种一般在其他的包装类也可以看得到如arrayList中的 elementData。也是用来存放数据的。包装类只不过是帮你把一些操作封装了，相关操作，方便我们使用。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;什么是hash    &lt;/p&gt;
&lt;p&gt;散列法（Hashing）或哈希法是一种将字符组成的字符串转换为固定长度（一般是更短长度）的数值或索引值的方法，称为散列法，也叫哈希法。==简单来讲就是将任意长度的二进制映射到固定长度的较小的二进制，而这个较小的二进制是
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="编程" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
